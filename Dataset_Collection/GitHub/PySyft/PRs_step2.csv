url	label	title	all_text	comments	merged	created_time	updated_time	closed_time
https://github.com/OpenMined/PySyft/pull/6588	[]	Upgrading cypress to fix json-schema security issue	"Upgrading cypress to fix json-schema security issue## Description
Please include a summary of the change, the motivation, and any additional context that will help others understand your PR. If it closes one or more open issues, [please tag them as described here](https://help.github.com/en/github/managing-your-work-on-github/linking-a-pull-request-to-an-issue#linking-a-pull-request-to-an-issue-using-a-keyword).

## Affected Dependencies
List any dependencies that are required for this change.

## How has this been tested?
- Describe the tests that you ran to verify your changes.
- Provide instructions so we can reproduce.
- List any relevant details for your test configuration.

## Checklist
- [ ] I have followed the [Contribution Guidelines](https://github.com/OpenMined/.github/blob/master/CONTRIBUTING.md) and [Code of Conduct](https://github.com/OpenMined/.github/blob/master/CODE_OF_CONDUCT.md)
- [ ] I have commented my code following the [OpenMined Styleguide](https://github.com/OpenMined/.github/blob/master/STYLEGUIDE.md)
- [ ] I have labeled this PR with the relevant [Type labels](https://github.com/OpenMined/.github/labels?q=Type%3A)
- [ ] My changes are covered by tests"	1	True	2022-06-08 07:43:34	2022-06-20 06:27:41	2022-06-20 06:27:40
https://github.com/OpenMined/PySyft/pull/6573	[]	Disable checking all domain health by default	Disable checking all domain health by defaultnormally when we run network_client.domains it checks the health of all the domains before doing anything. as the number of domains increases (and we also discover some bugs/issues) this seems to be causing problems by default - disabling for now@madhavajay should we re-enable this, since all messages are sent with timeouts or at least have some sort of default timeout?Should we have a larger timeout? since it fetches all datasets so deserialization can take time if there are a large number of datasets uploaded.	1	True	2022-06-03 22:37:22	2022-06-07 07:15:36	2022-06-07 07:15:35
https://github.com/OpenMined/PySyft/pull/6567	[]	Fix Network hangs Bug and add timeouts	"Fix Network hangs Bug and add timeouts## Description
Please include a summary of the change, the motivation, and any additional context that will help others understand your PR. If it closes one or more open issues, [please tag them as described here](https://help.github.com/en/github/managing-your-work-on-github/linking-a-pull-request-to-an-issue#linking-a-pull-request-to-an-issue-using-a-keyword).

**Changes: **

- Add a 15 sec timeout to Signed with reply messages in msg_forwarding service.
- Add a timeout on sy.connect.
- add an ExceptionMessage if sy.connect time's out.
- add a retry mechanism to submitting association request, if failed to connect to network via sy.connect.
- Make ReceiveAssociationRequestMessage Without Reply.
- make ImmediateMessageWithoutReply message in syft_route to run async in celeryworker.

[ch-6297]
cc @IonesioJunior 

## Affected Dependencies
List any dependencies that are required for this change.

## How has this been tested?
- Describe the tests that you ran to verify your changes.
- Provide instructions so we can reproduce.
- List any relevant details for your test configuration.

## Checklist
- [x] I have followed the [Contribution Guidelines](https://github.com/OpenMined/.github/blob/master/CONTRIBUTING.md) and [Code of Conduct](https://github.com/OpenMined/.github/blob/master/CODE_OF_CONDUCT.md)
- [x] I have commented my code following the [OpenMined Styleguide](https://github.com/OpenMined/.github/blob/master/STYLEGUIDE.md)
- [x] I have labeled this PR with the relevant [Type labels](https://github.com/OpenMined/.github/labels?q=Type%3A)
- [x] My changes are covered by tests
MAYBE:  Line 479, could we use the same vpn_status variable( in L462) to retrieve host ip , as self.vpn_status makes a new network call ,Yes, good catch. üëçFixed in this commit: https://github.com/OpenMined/PySyft/pull/6567/commits/7e031150a03d995c3824c66527465d573c896035"	2	True	2022-06-01 16:07:51	2022-06-06 09:41:59	2022-06-06 09:41:58
https://github.com/OpenMined/PySyft/pull/6530	[]	Fixed lazy repeat array subtraction	"Fixed lazy repeat array subtraction## Description
Please include a summary of the change, the motivation, and any additional context that will help others understand your PR. If it closes one or more open issues, [please tag them as described here](https://help.github.com/en/github/managing-your-work-on-github/linking-a-pull-request-to-an-issue#linking-a-pull-request-to-an-issue-using-a-keyword).

## Affected Dependencies
List any dependencies that are required for this change.

## How has this been tested?
- Describe the tests that you ran to verify your changes.
- Provide instructions so we can reproduce.
- List any relevant details for your test configuration.

## Checklist
- [ ] I have followed the [Contribution Guidelines](https://github.com/OpenMined/.github/blob/master/CONTRIBUTING.md) and [Code of Conduct](https://github.com/OpenMined/.github/blob/master/CODE_OF_CONDUCT.md)
- [ ] I have commented my code following the [OpenMined Styleguide](https://github.com/OpenMined/.github/blob/master/STYLEGUIDE.md)
- [ ] I have labeled this PR with the relevant [Type labels](https://github.com/OpenMined/.github/labels?q=Type%3A)
- [ ] My changes are covered by tests"	1	True	2022-05-26 16:04:08	2022-05-27 05:11:38	2022-05-27 05:11:37
https://github.com/OpenMined/PySyft/pull/6522	[]	Fixing empty gamma tensor state	"Fixing empty gamma tensor state## Description
If a data scientist tries to publish a PhiTensor, or a PhiTensor with public values added to it, the state tree will be empty when `publish` is called, resulting in failures. This PR adds a small check for this and rectifies the state tree.

## Affected Dependencies
Nothing new.

## How has this been tested?
Re-running failed tests

## Checklist
- [ ] I have followed the [Contribution Guidelines](https://github.com/OpenMined/.github/blob/master/CONTRIBUTING.md) and [Code of Conduct](https://github.com/OpenMined/.github/blob/master/CODE_OF_CONDUCT.md)
- [ ] I have commented my code following the [OpenMined Styleguide](https://github.com/OpenMined/.github/blob/master/STYLEGUIDE.md)
- [ ] I have labeled this PR with the relevant [Type labels](https://github.com/OpenMined/.github/labels?q=Type%3A)
- [ ] My changes are covered by tests"	1	True	2022-05-25 15:59:24	2022-05-26 04:43:55	2022-05-26 04:43:55
https://github.com/OpenMined/PySyft/pull/6487	[]	small notebook fixes	"small notebook fixes## Description
Please include a summary of the change, the motivation, and any additional context that will help others understand your PR. If it closes one or more open issues, [please tag them as described here](https://help.github.com/en/github/managing-your-work-on-github/linking-a-pull-request-to-an-issue#linking-a-pull-request-to-an-issue-using-a-keyword).

## Affected Dependencies
List any dependencies that are required for this change.

## How has this been tested?
- Describe the tests that you ran to verify your changes.
- Provide instructions so we can reproduce.
- List any relevant details for your test configuration.

## Checklist
- [ ] I have followed the [Contribution Guidelines](https://github.com/OpenMined/.github/blob/master/CONTRIBUTING.md) and [Code of Conduct](https://github.com/OpenMined/.github/blob/master/CODE_OF_CONDUCT.md)
- [ ] I have commented my code following the [OpenMined Styleguide](https://github.com/OpenMined/.github/blob/master/STYLEGUIDE.md)
- [ ] I have labeled this PR with the relevant [Type labels](https://github.com/OpenMined/.github/labels?q=Type%3A)
- [ ] My changes are covered by tests"	1	True	2022-05-13 07:32:47	2022-05-13 11:02:29	2022-05-13 11:02:29
https://github.com/OpenMined/PySyft/pull/6480	[]	Fix for stack Course Tests	"Fix for stack Course Tests## Description
Please include a summary of the change, the motivation, and any additional context that will help others understand your PR. If it closes one or more open issues, [please tag them as described here](https://help.github.com/en/github/managing-your-work-on-github/linking-a-pull-request-to-an-issue#linking-a-pull-request-to-an-issue-using-a-keyword).

## Affected Dependencies
List any dependencies that are required for this change.

[ch-6044]

## How has this been tested?
- Describe the tests that you ran to verify your changes.
- Provide instructions so we can reproduce.
- List any relevant details for your test configuration.

## Checklist
- [x] I have followed the [Contribution Guidelines](https://github.com/OpenMined/.github/blob/master/CONTRIBUTING.md) and [Code of Conduct](https://github.com/OpenMined/.github/blob/master/CODE_OF_CONDUCT.md)
- [x] I have commented my code following the [OpenMined Styleguide](https://github.com/OpenMined/.github/blob/master/STYLEGUIDE.md)
- [x] I have labeled this PR with the relevant [Type labels](https://github.com/OpenMined/.github/labels?q=Type%3A)
- [x] My changes are covered by tests"	1	True	2022-05-12 06:19:47	2022-05-13 03:48:28	2022-05-13 03:48:27
https://github.com/OpenMined/PySyft/pull/6470	[]	Fix bug with race condition with flag `install=false` on remote machine	"Fix bug with race condition with flag `install=false` on remote machine## Description
Please include a summary of the change, the motivation, and any additional context that will help others understand your PR. If it closes one or more open issues, [please tag them as described here](https://help.github.com/en/github/managing-your-work-on-github/linking-a-pull-request-to-an-issue#linking-a-pull-request-to-an-issue-using-a-keyword).

## Affected Dependencies
List any dependencies that are required for this change.

## How has this been tested?
- Describe the tests that you ran to verify your changes.
- Provide instructions so we can reproduce.
- List any relevant details for your test configuration.

## Checklist
- [ ] I have followed the [Contribution Guidelines](https://github.com/OpenMined/.github/blob/master/CONTRIBUTING.md) and [Code of Conduct](https://github.com/OpenMined/.github/blob/master/CODE_OF_CONDUCT.md)
- [ ] I have commented my code following the [OpenMined Styleguide](https://github.com/OpenMined/.github/blob/master/STYLEGUIDE.md)
- [ ] I have labeled this PR with the relevant [Type labels](https://github.com/OpenMined/.github/labels?q=Type%3A)
- [ ] My changes are covered by tests"	1	True	2022-05-10 10:58:08	2022-05-11 05:07:22	2022-05-11 05:07:21
https://github.com/OpenMined/PySyft/pull/6464	[]	local user group and hagrid launch message	"local user group and hagrid launch messageSupport for user account management in Windows 10 Home Edition is not well explained on Microsoft pages too. So, adding those two lines of text (as a Note) will save time for those who are trying hagrid for the first time. 

Also, the hagrid launch error message is cryptic - just changing to 'domain' works.

## Description
Those notes will help save time for those Windows 10 users with Home edition, who are eager to get hagrid launch to happen successfully.

## Affected Dependencies
No dependencies

## How has this been tested?
I verified the steps -"	1	True	2022-05-08 07:08:21	2022-05-09 06:07:48	2022-05-09 02:18:09
https://github.com/OpenMined/PySyft/pull/6456	[]	Fixed issue with tempdir and public key in HAGrid	"Fixed issue with tempdir and public key in HAGrid- Updated network operator notebook for AdAstra
- Pinned cryptography breaking paramiko
  see: https://github.com/paramiko/paramiko/pull/2039
- Added /ping endpoint so that NetworkRegistry works on --headless

## Description
Please include a summary of the change, the motivation, and any additional context that will help others understand your PR. If it closes one or more open issues, [please tag them as described here](https://help.github.com/en/github/managing-your-work-on-github/linking-a-pull-request-to-an-issue#linking-a-pull-request-to-an-issue-using-a-keyword).

## Affected Dependencies
List any dependencies that are required for this change.

## How has this been tested?
- Describe the tests that you ran to verify your changes.
- Provide instructions so we can reproduce.
- List any relevant details for your test configuration.

## Checklist
- [ ] I have followed the [Contribution Guidelines](https://github.com/OpenMined/.github/blob/master/CONTRIBUTING.md) and [Code of Conduct](https://github.com/OpenMined/.github/blob/master/CODE_OF_CONDUCT.md)
- [ ] I have commented my code following the [OpenMined Styleguide](https://github.com/OpenMined/.github/blob/master/STYLEGUIDE.md)
- [ ] I have labeled this PR with the relevant [Type labels](https://github.com/OpenMined/.github/labels?q=Type%3A)
- [ ] My changes are covered by tests"	1	True	2022-05-06 04:55:48	2022-05-06 04:56:00	2022-05-06 04:55:59
https://github.com/OpenMined/PySyft/pull/6448	[]	Extend rdp cache to dramatically improve accuracy of DP system	"Extend rdp cache to dramatically improve accuracy of DP system## Description
The cache used to speed up the privacy budget calculation was not granular enough when the value of the RDP constants was between 0-1. This resulted in every query having a minimum privacy budget spend of ~7.766, even if it was supposed to spend significantly less.

This PR extends the cache significantly to include (as of now) 1.2M cached values. The minimum privacy budget spend will be reduced from 7.766 to ~0.05. [Numbers may change in the future depending on user feedback.]

## Affected Dependencies

The cache file located in `syft/src/syft/cache` will be replaced, and its size will increase by a factor of 4, from around 2.3MB to around 9.2MB.
This may also solve some other bugs in the codebase- by default, admin accounts have a PB of 5.55, and since the minimum PB spendable (prior to this PR) was  7.766, there may have been things breaking.

## How has this been tested?
- Describe the tests that you ran to verify your changes.
- Provide instructions so we can reproduce.
- List any relevant details for your test configuration.

Currently this has been prototyped in notebooks, but will add dedicated tests as I incorporate changes into the codebase. 

## Checklist
- [ ] I have followed the [Contribution Guidelines](https://github.com/OpenMined/.github/blob/master/CONTRIBUTING.md) and [Code of Conduct](https://github.com/OpenMined/.github/blob/master/CODE_OF_CONDUCT.md)
- [ ] I have commented my code following the [OpenMined Styleguide](https://github.com/OpenMined/.github/blob/master/STYLEGUIDE.md)
- [ ] I have labeled this PR with the relevant [Type labels](https://github.com/OpenMined/.github/labels?q=Type%3A)
- [ ] My changes are covered by tests
:heart:"	1	True	2022-05-05 07:11:27	2022-05-19 15:11:20	2022-05-19 15:11:19
https://github.com/OpenMined/PySyft/pull/6421	[]	Missing `f` prefix on f-strings fix	Missing `f` prefix on f-strings fixFixes #6420	1	True	2022-04-23 22:21:00	2022-05-04 04:42:15	2022-05-04 04:42:15
https://github.com/OpenMined/PySyft/pull/6407	[]	add hagrid version command	"add hagrid version command## Description
This PR is to add a `hagrid version` command to Hagrid which prints the hagrid version to the cli.
I'm not sure this is a good idea to have syft imported directly into HAGrid. Even when we add the ability for HAGrid to manage syft environments for us we probably won't want to import syft itself.I think users expect to type something like `version` and in that case perhaps we can just print the hagrid version since all the other information is already available under `hagrid debug`.Remove unused commented lines to keep our PRs to only include changes that are being used.Okay, thanks Madhava! @madhavajay I was actually thinking the same since we have `hagrid debug` happening, we could add anything there and keep `--version` to just print hagrid version. I'll do that.@madhavajay, right also since we are dumping all other stuff on the `debug` command, I'll strip it off. "	1	True	2022-04-15 07:09:54	2022-04-29 23:17:28	2022-04-29 23:17:27
https://github.com/OpenMined/PySyft/pull/6406	[]	Apply to Network Bug	"Apply to Network Bugcreate a notebook to demonstrate the network apply is working fine

## Description
Please include a summary of the change, the motivation, and any additional context that will help others understand your PR. If it closes one or more open issues, [please tag them as described here](https://help.github.com/en/github/managing-your-work-on-github/linking-a-pull-request-to-an-issue#linking-a-pull-request-to-an-issue-using-a-keyword).

[ch-5605]

## Affected Dependencies
List any dependencies that are required for this change.

## How has this been tested?
- Describe the tests that you ran to verify your changes.
- Provide instructions so we can reproduce.
- List any relevant details for your test configuration.

## Checklist
- [x] I have followed the [Contribution Guidelines](https://github.com/OpenMined/.github/blob/master/CONTRIBUTING.md) and [Code of Conduct](https://github.com/OpenMined/.github/blob/master/CODE_OF_CONDUCT.md)
- [x] I have commented my code following the [OpenMined Styleguide](https://github.com/OpenMined/.github/blob/master/STYLEGUIDE.md)
- [x] I have labeled this PR with the relevant [Type labels](https://github.com/OpenMined/.github/labels?q=Type%3A)
- [x] My changes are covered by tests"	2	True	2022-04-14 10:43:27	2022-04-25 01:01:57	2022-04-25 01:01:56
https://github.com/OpenMined/PySyft/pull/6262	['bug ']	Add test and fix for store object mutation.	"Add test and fix for store object mutation.## Description
Please include a summary of the change, the motivation, and any additional context that will help others understand your PR. If it closes one or more open issues, [please tag them as described here](https://help.github.com/en/github/managing-your-work-on-github/linking-a-pull-request-to-an-issue#linking-a-pull-request-to-an-issue-using-a-keyword).

## Affected Dependencies
List any dependencies that are required for this change.

A guest user is able to mutate an object owned by the data owner.

Shortcut Links:
- https://app.shortcut.com/openmined/story/4457/guest-mutation-security-fix
- https://app.shortcut.com/openmined/story/4918/bug-object-mutation-exploit

## How has this been tested?
- Describe the tests that you ran to verify your changes.
- Provide instructions so we can reproduce.
- List any relevant details for your test configuration.

## Checklist
- [x] I have followed the [Contribution Guidelines](https://github.com/OpenMined/.github/blob/master/CONTRIBUTING.md) and [Code of Conduct](https://github.com/OpenMined/.github/blob/master/CODE_OF_CONDUCT.md)
- [x] I have commented my code following the [OpenMined Styleguide](https://github.com/OpenMined/.github/blob/master/STYLEGUIDE.md)
- [x] I have labeled this PR with the relevant [Type labels](https://github.com/OpenMined/.github/labels?q=Type%3A)
- [x] My changes are covered by tests
TODO: remove this.@shubham3121 , are we clear with those questions we earlier had based on the algorithm?"	2	True	2022-01-21 04:37:04	2022-02-16 00:00:04	2022-02-16 00:00:03
https://github.com/OpenMined/PySyft/pull/6254	[]	FIX: new budget calculated incorrectly for budget requests in domain GUI client	"FIX: new budget calculated incorrectly for budget requests in domain GUI client## Description
This PR fixes *new budget* calculation on the Budget Request GUI page.
closes: #6253

## How has this been tested?
On a test node, a screenshot is attached.
<img width=""1344"" alt=""Screenshot 2022-01-16 at 23 45 17"" src=""https://user-images.githubusercontent.com/48272539/149677422-3f347ed1-8f86-4e36-b494-a4bdbe0dbf8a.png"">


## Checklist
- [x] I have followed the [Contribution Guidelines](https://github.com/OpenMined/.github/blob/master/CONTRIBUTING.md) and [Code of Conduct](https://github.com/OpenMined/.github/blob/master/CODE_OF_CONDUCT.md)
- [x] I have commented my code following the [OpenMined Styleguide](https://github.com/OpenMined/.github/blob/master/STYLEGUIDE.md)
- [x] I have labeled this PR with the relevant [Type labels](https://github.com/OpenMined/.github/labels?q=Type%3A)
- [x] My changes are covered by tests"	2	True	2022-01-16 20:47:14	2022-02-18 01:39:44	2022-02-18 01:39:44
https://github.com/OpenMined/PySyft/pull/6192	[]	Reenable PA - bools got fixed in the new release	"Reenable PA - bools got fixed in the new release## Description
Please include a summary of the change, the motivation, and any additional context that will help others understand your PR. If it closes one or more open issues, [please tag them as described here](https://help.github.com/en/github/managing-your-work-on-github/linking-a-pull-request-to-an-issue#linking-a-pull-request-to-an-issue-using-a-keyword).

## Affected Dependencies
List any dependencies that are required for this change.

## How has this been tested?
- Describe the tests that you ran to verify your changes.
- Provide instructions so we can reproduce.
- List any relevant details for your test configuration.

## Checklist
- [ ] I have followed the [Contribution Guidelines](https://github.com/OpenMined/.github/blob/master/CONTRIBUTING.md) and [Code of Conduct](https://github.com/OpenMined/.github/blob/master/CODE_OF_CONDUCT.md)
- [ ] I have commented my code following the [OpenMined Styleguide](https://github.com/OpenMined/.github/blob/master/STYLEGUIDE.md)
- [ ] I have labeled this PR with the relevant [Type labels](https://github.com/OpenMined/.github/labels?q=Type%3A)
- [ ] My changes are covered by tests
‚ù§Ô∏è"	1	True	2021-11-22 12:00:03	2022-01-25 01:31:02	2022-01-24 14:28:39
https://github.com/OpenMined/PySyft/pull/6177	[]	[WIP] feat: configure traefik self-signed TLS	"[WIP] feat: configure traefik self-signed TLS‚ö†Ô∏è üöß This is work in progress!

## Description

Exposed on port 443 and routes to front and back-ends.

## Affected Dependencies
- Self-signed certificates (i.e. `openssl`)

## How has this been tested?

You can either generate a self-signed cert with SAN extension or Traefik can generate a default self-signed certificate.
The current Traefik config assumes you generate one.

```shell
# generating self-signed certs with SAN extension for 127.0.0.1 in the right place
mkdir packages/grid/traefik/certs
cd packages/grid/traefik/certs
curl -sS https://raw.githubusercontent.com/antelle/generate-ip-cert/master/generate-ip-cert.sh |
    bash -s 127.0.0.1
```

```shell
# deploy with docker compose
cd packages/grid
source .env && docker compose -p eu --profile frontend up -d
```

After the frontend loads, open `https://127.0.0.1` in a browser. There will be a warning or error about the certificate not being trusted. Add the certificate to your trusted certificates - either from the browser settings or  for the whole system.

## Checklist
- [ ] I have followed the [Contribution Guidelines](https://github.com/OpenMined/.github/blob/master/CONTRIBUTING.md) and [Code of Conduct](https://github.com/OpenMined/.github/blob/master/CODE_OF_CONDUCT.md)
- [ ] I have commented my code following the [OpenMined Styleguide](https://github.com/OpenMined/.github/blob/master/STYLEGUIDE.md)
- [ ] I have labeled this PR with the relevant [Type labels](https://github.com/OpenMined/.github/labels?q=Type%3A)
- [ ] My changes are covered by tests"	2	True	2021-11-12 07:38:26	2021-11-29 06:27:01	2021-11-29 06:27:01
https://github.com/OpenMined/PySyft/pull/6173	[]	Update L3_DataPreparation.ipynb	"Update L3_DataPreparation.ipynbAdding changes requested by Y/K review process.

## Description
Additional information / sections / description / links added.

## How has this been tested?
- Tested by running in the notebook.

## Checklist
- [x] I have followed the [Contribution Guidelines](https://github.com/OpenMined/.github/blob/master/CONTRIBUTING.md) and [Code of Conduct](https://github.com/OpenMined/.github/blob/master/CODE_OF_CONDUCT.md)
- [ ] I have commented my code following the [OpenMined Styleguide](https://github.com/OpenMined/.github/blob/master/STYLEGUIDE.md)
- [ ] I have labeled this PR with the relevant [Type labels](https://github.com/OpenMined/.github/labels?q=Type%3A)
- [ ] My changes are covered by tests"	1	True	2021-11-11 01:49:52	2021-11-11 02:06:52	2021-11-11 02:06:51
https://github.com/OpenMined/PySyft/pull/6169	[]	Updating 0.6.0	"Updating 0.6.0## Description
Lots of updates including fixes for HAGrid on Windows.

## Affected Dependencies
List any dependencies that are required for this change.

## How has this been tested?
- Describe the tests that you ran to verify your changes.
- Provide instructions so we can reproduce.
- List any relevant details for your test configuration.

## Checklist
- [ ] I have followed the [Contribution Guidelines](https://github.com/OpenMined/.github/blob/master/CONTRIBUTING.md) and [Code of Conduct](https://github.com/OpenMined/.github/blob/master/CODE_OF_CONDUCT.md)
- [ ] I have commented my code following the [OpenMined Styleguide](https://github.com/OpenMined/.github/blob/master/STYLEGUIDE.md)
- [ ] I have labeled this PR with the relevant [Type labels](https://github.com/OpenMined/.github/labels?q=Type%3A)
- [ ] My changes are covered by tests"	1	True	2021-11-10 11:38:23	2021-11-10 11:38:51	2021-11-10 11:38:51
https://github.com/OpenMined/PySyft/pull/6167	[]	HAGrid Windows	"HAGrid Windows## Description
- Removed non windows compatible dependencies from hagrid
- Added is_windows function to detect windows
- Added get_environment
- Fixed emoji style issue by removing unused virtualbox / vagrant check

## Affected Dependencies
List any dependencies that are required for this change.

## How has this been tested?
- Describe the tests that you ran to verify your changes.
- Provide instructions so we can reproduce.
- List any relevant details for your test configuration.

## Checklist
- [ ] I have followed the [Contribution Guidelines](https://github.com/OpenMined/.github/blob/master/CONTRIBUTING.md) and [Code of Conduct](https://github.com/OpenMined/.github/blob/master/CODE_OF_CONDUCT.md)
- [ ] I have commented my code following the [OpenMined Styleguide](https://github.com/OpenMined/.github/blob/master/STYLEGUIDE.md)
- [ ] I have labeled this PR with the relevant [Type labels](https://github.com/OpenMined/.github/labels?q=Type%3A)
- [ ] My changes are covered by tests"	1	True	2021-11-10 00:07:11	2021-11-11 07:12:31	2021-11-10 11:36:14
https://github.com/OpenMined/PySyft/pull/6153	[]	Creating hotfix to correct issue on azure vm where db migration fails	"Creating hotfix to correct issue on azure vm where db migration fails## Description
Creating hotfix to correct issue on azure vm where db migration fails

## Affected Dependencies
List any dependencies that are required for this change.

## How has this been tested?
- Describe the tests that you ran to verify your changes.
- Provide instructions so we can reproduce.
- List any relevant details for your test configuration.

## Checklist
- [ ] I have followed the [Contribution Guidelines](https://github.com/OpenMined/.github/blob/master/CONTRIBUTING.md) and [Code of Conduct](https://github.com/OpenMined/.github/blob/master/CODE_OF_CONDUCT.md)
- [ ] I have commented my code following the [OpenMined Styleguide](https://github.com/OpenMined/.github/blob/master/STYLEGUIDE.md)
- [ ] I have labeled this PR with the relevant [Type labels](https://github.com/OpenMined/.github/labels?q=Type%3A)
- [ ] My changes are covered by tests"	1	True	2021-11-05 02:12:59	2021-11-05 03:15:31	2021-11-05 03:15:31
https://github.com/OpenMined/PySyft/pull/6148	[]	Index objects with ID without having to pull back entire database to ‚Ä¶	"Index objects with ID without having to pull back entire database to ‚Ä¶It was really bugging me that domain_client.datasets[-1]['asset_name'] was CRAZY slow on the second run. I dug in and found code that was just written naively (probably prototype code that has lived on too long) so that if pulls back every object in the database to the client and then does the searching client side when you want to select an asset....

So this makes it so that if you ask for a pointer to an object with a specific id... it only returns that object. 

While i'm here I also added a .block to publish() in a couple places. This method isn't yet asynchronous for some reason so we need to put this in just to prevent things from breaking.

Fixes: [ch3659]"	2	True	2021-11-04 23:28:57	2021-11-05 02:38:02	2021-11-05 02:38:01
https://github.com/OpenMined/PySyft/pull/6140	[]	Hagrid to throw error without launching if there's not enough ram	Hagrid to throw error without launching if there's not enough ram[ch3661]	2	True	2021-11-03 14:32:38	2021-11-03 17:56:28	2021-11-03 17:56:28
https://github.com/OpenMined/PySyft/pull/6139	[]	Fix: UI compatible with dev	"Fix: UI compatible with dev## Description
Please include a summary of the change, the motivation, and any additional context that will help others understand your PR. If it closes one or more open issues, [please tag them as described here](https://help.github.com/en/github/managing-your-work-on-github/linking-a-pull-request-to-an-issue#linking-a-pull-request-to-an-issue-using-a-keyword).

## Affected Dependencies
List any dependencies that are required for this change.

## How has this been tested?
- Describe the tests that you ran to verify your changes.
- Provide instructions so we can reproduce.
- List any relevant details for your test configuration.

## Checklist
- [ ] I have followed the [Contribution Guidelines](https://github.com/OpenMined/.github/blob/master/CONTRIBUTING.md) and [Code of Conduct](https://github.com/OpenMined/.github/blob/master/CODE_OF_CONDUCT.md)
- [ ] I have commented my code following the [OpenMined Styleguide](https://github.com/OpenMined/.github/blob/master/STYLEGUIDE.md)
- [ ] I have labeled this PR with the relevant [Type labels](https://github.com/OpenMined/.github/labels?q=Type%3A)
- [ ] My changes are covered by tests"	1	True	2021-11-03 14:10:09	2021-11-05 03:33:30	2021-11-05 03:33:30
https://github.com/OpenMined/PySyft/pull/6134	[]	Fix: domain config formData	"Fix: domain config formDataCloses [ch3699]

## Description
Please include a summary of the change, the motivation, and any additional context that will help others understand your PR. If it closes one or more open issues, [please tag them as described here](https://help.github.com/en/github/managing-your-work-on-github/linking-a-pull-request-to-an-issue#linking-a-pull-request-to-an-issue-using-a-keyword).

## Affected Dependencies
List any dependencies that are required for this change.

## How has this been tested?
- Describe the tests that you ran to verify your changes.
- Provide instructions so we can reproduce.
- List any relevant details for your test configuration.

## Checklist
- [ ] I have followed the [Contribution Guidelines](https://github.com/OpenMined/.github/blob/master/CONTRIBUTING.md) and [Code of Conduct](https://github.com/OpenMined/.github/blob/master/CODE_OF_CONDUCT.md)
- [ ] I have commented my code following the [OpenMined Styleguide](https://github.com/OpenMined/.github/blob/master/STYLEGUIDE.md)
- [ ] I have labeled this PR with the relevant [Type labels](https://github.com/OpenMined/.github/labels?q=Type%3A)
- [ ] My changes are covered by tests"	1	True	2021-11-03 05:59:43	2021-11-03 11:53:50	2021-11-03 11:53:50
https://github.com/OpenMined/PySyft/pull/6133	[]	Fix: add support for updating institution and website fields	"Fix: add support for updating institution and website fieldsCloses [ch3695]

## Description
Please include a summary of the change, the motivation, and any additional context that will help others understand your PR. If it closes one or more open issues, [please tag them as described here](https://help.github.com/en/github/managing-your-work-on-github/linking-a-pull-request-to-an-issue#linking-a-pull-request-to-an-issue-using-a-keyword).

## Affected Dependencies
List any dependencies that are required for this change.

## How has this been tested?
- Describe the tests that you ran to verify your changes.
- Provide instructions so we can reproduce.
- List any relevant details for your test configuration.

## Checklist
- [ ] I have followed the [Contribution Guidelines](https://github.com/OpenMined/.github/blob/master/CONTRIBUTING.md) and [Code of Conduct](https://github.com/OpenMined/.github/blob/master/CODE_OF_CONDUCT.md)
- [ ] I have commented my code following the [OpenMined Styleguide](https://github.com/OpenMined/.github/blob/master/STYLEGUIDE.md)
- [ ] I have labeled this PR with the relevant [Type labels](https://github.com/OpenMined/.github/labels?q=Type%3A)
- [ ] My changes are covered by tests"	1	True	2021-11-03 05:50:41	2021-11-03 13:52:58	2021-11-03 13:52:58
https://github.com/OpenMined/PySyft/pull/6130	[]	Fix: change roles update route from PUT to PATCH	"Fix: change roles update route from PUT to PATCHCloses [ch3688]

## Description
Please include a summary of the change, the motivation, and any additional context that will help others understand your PR. If it closes one or more open issues, [please tag them as described here](https://help.github.com/en/github/managing-your-work-on-github/linking-a-pull-request-to-an-issue#linking-a-pull-request-to-an-issue-using-a-keyword).

## Affected Dependencies
List any dependencies that are required for this change.

## How has this been tested?
- Describe the tests that you ran to verify your changes.
- Provide instructions so we can reproduce.
- List any relevant details for your test configuration.

## Checklist
- [ ] I have followed the [Contribution Guidelines](https://github.com/OpenMined/.github/blob/master/CONTRIBUTING.md) and [Code of Conduct](https://github.com/OpenMined/.github/blob/master/CODE_OF_CONDUCT.md)
- [ ] I have commented my code following the [OpenMined Styleguide](https://github.com/OpenMined/.github/blob/master/STYLEGUIDE.md)
- [ ] I have labeled this PR with the relevant [Type labels](https://github.com/OpenMined/.github/labels?q=Type%3A)
- [ ] My changes are covered by tests"	1	True	2021-11-03 05:20:50	2021-11-03 11:50:56	2021-11-03 11:50:56
https://github.com/OpenMined/PySyft/pull/6117	[]	Update Hagrid docs to contain Kubernetes deployment	"Update Hagrid docs to contain Kubernetes deployment## Description
Added documentation on deploying locally and on GKE, which is currently deployed at https://openmined.github.io/PySyft/deployment/index.html#installation.

## Affected Dependencies
No affected deps.

## How has this been tested?
- Run the updated changes to see the page is formatted nicely without any errors.

## Checklist
- [x] I have followed the [Contribution Guidelines](https://github.com/OpenMined/.github/blob/master/CONTRIBUTING.md) and [Code of Conduct](https://github.com/OpenMined/.github/blob/master/CODE_OF_CONDUCT.md)
- [x] I have commented my code following the [OpenMined Styleguide](https://github.com/OpenMined/.github/blob/master/STYLEGUIDE.md)
- [x] I have labeled this PR with the relevant [Type labels](https://github.com/OpenMined/.github/labels?q=Type%3A)
- [x] My changes are covered by tests"	1	True	2021-11-01 12:45:00	2021-11-01 18:28:39	2021-11-01 18:28:34
https://github.com/OpenMined/PySyft/pull/6114	['bug ', '0.6.0 alpha']	Fix object dataset relationship deleted on data request.	"Fix object dataset relationship deleted on data request.## Description
Please include a summary of the change, the motivation, and any additional context that will help others understand your PR. If it closes one or more open issues, [please tag them as described here](https://help.github.com/en/github/managing-your-work-on-github/linking-a-pull-request-to-an-issue#linking-a-pull-request-to-an-issue-using-a-keyword).

- If the DS requests the dataset itself and the DO approves the requests, then the object dataset relationship is deleted.

## Affected Dependencies
List any dependencies that are required for this change.

## How has this been tested?
- Describe the tests that you ran to verify your changes.
- Provide instructions so we can reproduce.
- List any relevant details for your test configuration.

## Checklist
- [x] I have followed the [Contribution Guidelines](https://github.com/OpenMined/.github/blob/master/CONTRIBUTING.md) and [Code of Conduct](https://github.com/OpenMined/.github/blob/master/CODE_OF_CONDUCT.md)
- [x] I have commented my code following the [OpenMined Styleguide](https://github.com/OpenMined/.github/blob/master/STYLEGUIDE.md)
- [ ] I have labeled this PR with the relevant [Type labels](https://github.com/OpenMined/.github/labels?q=Type%3A)
- [ ] My changes are covered by tests
Since the BinObject is deleted, the corresponding BinObjDataset is also deleted due to cascading effect. Thus we need to recreate the BinObjDataset for the new BinObject being created."	5	True	2021-11-01 06:32:44	2021-11-02 14:44:13	2021-11-02 14:44:12
https://github.com/OpenMined/PySyft/pull/6112	[]	Add Batched SMPC Action	"Add Batched SMPC Action## Description
Create a `SeqBatchAction Message` for SMPC actions.

The scope of the actions is the following:
* The celery worker will try to execute a group of actions -- all at once
* if one action fails then do not try to execute the next actions since they are dependent on one another

## Checklist
- [x] I have followed the [Contribution Guidelines](https://github.com/OpenMined/.github/blob/master/CONTRIBUTING.md) and [Code of Conduct](https://github.com/OpenMined/.github/blob/master/CODE_OF_CONDUCT.md)
- [x] I have commented my code following the [OpenMined Styleguide](https://github.com/OpenMined/.github/blob/master/STYLEGUIDE.md)
- [x] I have labeled this PR with the relevant [Type labels](https://github.com/OpenMined/.github/labels?q=Type%3A)
- [x] My changes are covered by tests
Same functionality as `SMPCActionMessage` only that it keeps a list of `SMPCActionMessages`Some of the maps that were kept in `smpc_action_message.py` file should be kept separatedQ: George, I forgot could you reiterate why we are clubbing `spdz_mask`, `spdz_multiply` , In the current DB logic, when action fails, we store it in the  DB part,we retry the action when a new object arrives,
George, I think when when spdz multiply fails,this keeps the whole SMPCBatchMessage in DB, when a new message arrives,, `spdz_mask` would be executed again, there would be another roundtrip of communication by spdz mask .I only skimmed the PR, maybe I am missing something?Yep, my point is that we should not try to execute an action that is dependent on the previous one - in our case, `spdz_multiply` is dependent on `spdz_mask`.
In our current approach we do:
```
execute spdz_mask --> Fail --> add to DB
execute spdz_multiply --> Fail --> add to DB
```
When we get an object we will try to execute both `spdz_mask` and `spdz_multiply`

Now we do:
```
try to execute spdz_mask --> Fail --> Store spdz_mask, spdz_mul in the DB
```
When an item arrives we try again `execute spdz_mask` and if success `spdz_mul` - if `spdz_mul` fails then we will store only the `spdz_mul` in the DB.

This can be extended to ""N"" actions that are sequentially dependent on one another.

This PR still keep the same number of actions in the DB, but what I think are the improvements:
1. It will not hit the DB that much -- since we store all the messages at once (we require only 1 connection, not 2 as before)
2. we will try to execute only 1 action and if it fails we ""put on hold"" more `SMPCAction` messages.

The logic to store in the DB is done using `try catches` which in Python are expensive, but they are `pythonic` (zen of python says that is better to ask for `forgiveness` than `permission`)
This `BatchSeq Action` might not have a big impact on the multiplication since we have only 2 messages, but when we move the `gt` operation to be entirely done by actions (for the moment we still have that ping-pong between the DS and DOs - the actions generated by the `gt` functionality will be kept - and there are more than 2 :smile: in a `BatchSeqAction`)
This was my  first doubt george, 
`When an item arrives we try again execute spdz_mask and if success spdz_mul - if spdz_mul fails then we will store only the spdz_mul in the DB`
By the DB logic, if the spdz mask succeeds and spdz mul fails, since this came from a single `BatchSeqAction` , this would keep spdz mask and spdz multiply both in the DB , and spdz mask would be executed again when a new object arrives.
Great thought , george single message make great sense, as  currently have the RunClassMethodSMPCAction is put in queue, which actually creates SMPCActionMessages and put it at back of queue, this create a lot of hassle, which slows our runtime.I think by this we could execute spdz mask and spdz directly in one action directly in RunClassMethodSMPC itself. I think also by this we would not have to couple the SMPC logic in the backend stream which we discussed, as we execute directly
This should perfectly fit the greelet logic I am working on.Discussed in slack"	6	True	2021-10-31 23:46:17	2021-11-03 04:30:08	2021-11-03 04:30:07
https://github.com/OpenMined/PySyft/pull/6076	[]	[Back-End] - Adjust permissions so a Data Scientist (or any user?) can update their own information	[Back-End] - Adjust permissions so a Data Scientist (or any user?) can update their own informationStory details: https://app.shortcut.com/openmined/story/1545	1	True	2021-10-25 05:48:43	2021-10-25 06:52:44	2021-10-25 06:52:43
https://github.com/OpenMined/PySyft/pull/6052	[]	Private mul iteration5	"Private mul iteration5## Description
Client serialization and protobuf modification


Q: Why do we need this? Each `SMPCActionMessage` should only be sent to the node that should run itSORRY: Completely my fault...I should have probably done this better...I am not sure why I added proto here.No worries georgeYeah correct ranks to run actions ,good catchremoved itQ: For what is `msg_id` needed?"	1	True	2021-10-16 10:17:18	2021-10-16 12:08:50	2021-10-16 11:20:29
https://github.com/OpenMined/PySyft/pull/6049	[]	SPDZ multiply code	"SPDZ multiply code## Description
SPDZ multiplication code

Merge after `rasswanth_iteration_2` branch, if the changes are not conflicting.Probably this should be another error -- something like `ObjectNotInStore` (we kind of tying the mpc logic to the celery worker and we should not do that because the celery worker should be genericAbsolutely :+1:"	1	True	2021-10-14 19:12:29	2021-10-15 03:04:39	2021-10-14 22:20:22
https://github.com/OpenMined/PySyft/pull/6009	[]	Replacing Global Variables in pytest files with fixtures	"Replacing Global Variables in pytest files with fixtures## Description
We ran into latent bugs while testing `SingleEntityPhiTensor` and `RowEntityPhiTensor` due to using global variables instead of pytest fixtures. This was probably done to speed up the testing process.

In this PR, I removed ALL global variables from both test files and replaced them with safer Pytest fixtures.

## Affected Dependencies
No new dependencies; however, all of the PRs concerning new operations for `SingleEntityPhiTensor` and `RowEntityPhiTensor` will have to be completely rewritten due to these changes.

## How has this been tested?
- Describe the tests that you ran to verify your changes.
- Provide instructions so we can reproduce.
- List any relevant details for your test configuration.

Actually running the tests:
`pytest row_entity_phi_test.py`
`pytest single_entity_phi_test.py`
Linting:
`pre-commit run --all-files`

## Checklist
- [x] I have followed the [Contribution Guidelines](https://github.com/OpenMined/.github/blob/master/CONTRIBUTING.md) and [Code of Conduct](https://github.com/OpenMined/.github/blob/master/CODE_OF_CONDUCT.md)
- [x] I have commented my code following the [OpenMined Styleguide](https://github.com/OpenMined/.github/blob/master/STYLEGUIDE.md)
- [x] I have labeled this PR with the relevant [Type labels](https://github.com/OpenMined/.github/labels?q=Type%3A)
- [x] My changes are covered by tests"	1	True	2021-09-28 03:44:42	2021-09-30 18:40:56	2021-09-30 18:40:56
https://github.com/OpenMined/PySyft/pull/6002	[]	[W.I.P.] Patch flaky SEPT tests on Windows by checking for dimension size	"[W.I.P.] Patch flaky SEPT tests on Windows by checking for dimension size## Description
Currently, four tests for SingleEntityPhiTensor fail on Windows when the tensor data generated by the pytest fixture is of size (1, 1):

- test_ne_shapes
- test_compress
- test_partition
- test_partition_axis

## Affected Dependencies
No changed or affected dependencies.

## How has this been tested?
- Describe the tests that you ran to verify your changes.
- Provide instructions so we can reproduce.
- List any relevant details for your test configuration.

I generated 1 million random tensors using the same method as was done in the pytest file, and none of them failed the dimensions check.

## Checklist
- [x] I have followed the [Contribution Guidelines](https://github.com/OpenMined/.github/blob/master/CONTRIBUTING.md) and [Code of Conduct](https://github.com/OpenMined/.github/blob/master/CODE_OF_CONDUCT.md)
- [x] I have commented my code following the [OpenMined Styleguide](https://github.com/OpenMined/.github/blob/master/STYLEGUIDE.md)
- [x] I have labeled this PR with the relevant [Type labels](https://github.com/OpenMined/.github/labels?q=Type%3A)
- [x] My changes are covered by tests
Q: Should we remove this file?
Strange as to why it is generating tensor of (1,1) at this point
Sometimes, the CI additional has randomness, It happened many times in SyMPC also, if we run locally  for zillion times it passes, but in CI it fails Great catch, I just deleted it :)"	1	True	2021-09-24 13:42:18	2021-09-24 19:29:32	2021-09-24 19:29:08
https://github.com/OpenMined/PySyft/pull/5951	[]	fix: remove blank notebook	fix: remove blank notebook	1	True	2021-09-03 08:53:13	2021-09-04 21:23:12	2021-09-04 21:23:11
https://github.com/OpenMined/PySyft/pull/5948	[]	Added support & tests for np operations (eq, ne, add, sub, repeat, pos) to S.E.P.T, R.E.P.T	"Added support & tests for np operations (eq, ne, add, sub, repeat, pos) to S.E.P.T, R.E.P.TAdding support & tests for np operations (eq, ne, add, sub) to S.E.P.T, R.E.P.T, I.G.TGood question. We really should add `__eq__` to the new serde interface because its crucial that equality is defined on a class so that we can confirm that the serialization works as expected. We probably need to do this through the whole tensor chain since each tensor can have arbitrary attributes with values which need comparison.awesome workThis assignment will mean that `third_tensor` and `reference_tensor` will point to the same variable in memory and have the same id() so comparing it later should always be True, was that intended?Test functions don't need to return anything. You can change the return type to -> None as well.Test functions don't need to return anything. You can change the return type to -> None as well.same as aboveIf we want to make sure you cant compare with different owners, should we also have a test that shows you CAN compare with the same owner and that the `__eq__` passes?You can remove the type ignore if we tell mypy what the type is like this:
```
def test_eq_ndarray(row_data: List) -> None:
    """"""Test equality between a SEPT and a simple type (int, float, bool, np.ndarray)""""""
    sub_row_data: SEPT = row_data[0]

    reference_tensor = REPT(rows=sub_row_data)
    assert sub_row_data.child == reference_tensor, ""Comparison b/w REPT and ""
```Added!Unfortunately I'm not sure that this can be the way in which we handle equality. This checks to see if the polynomial itself is equal but what we actually need to do is check whether the underlying result of the polynomial is equal. One could have two different polnyomials return the same value (they could both return 0, for example)Probably need to comment this out for now. see __eq__ for comment.Any reason this was deleted?I'm confused about what's going on here.(we can't do IntermediateGammaTensor until we modify with the clip at teh end of the polynomial as discussed at the last meeting I attended.)I fully agree, I haven't modified the code for IntermediateGammaTensors since before we had that meeting, and reduced the scope of this PR to just the methods for SingleEntity and RowEntity Phi TensorsThis would fail if self.child and other.child have shapes that are not equal, but are still broadcastable, so I rewrote them to check for broadcastability, and if self.entity == other.entity:

[Link to relevant lines](https://github.com/OpenMined/PySyft/blob/a13862e62d75dd1cc3e3f2c64625f9abfb757320/packages/syft/src/syft/core/tensor/autodp/single_entity_phi.py#L381)if `other` is an acceptable_simple_type (int, float, bool, np.ndarray) then there are two scenarios:

- if it's a float/int/bool, then the comparison is doable, and no additional checks need to be made
- if it's a numpy array, then we need to check that self.child.shape and other.child.shape are broadcastable. If it's not, we raise an exception and tell the user that __eq__ can't be performed because the shapes are not broadcastable. If they are, we save the result of `self.child == other.child`, and return a SingleEntityPhiTensor whose child equals this result.

Sorry if my changes and thought process isn't clear! I can add more comments inline to explain.Ah makes sense - actualy what confuse dme was the way Github printed it. The code is clear.Marking as resolved since there's another PR open for equality for IntermediateGammaTensors""self"" should be self.gamma.child instead (or actually you should first run self = self.gamma and then run what you ran here)interesting!invert isn't the right method here. you wanat (1 - x).  invert is 1/x"	1	True	2021-09-02 04:21:08	2021-09-23 19:36:27	2021-09-23 19:36:26
https://github.com/OpenMined/PySyft/pull/5884	[]	Hot Fix for unboxed PyPrimitive upcasting	"Hot Fix for unboxed PyPrimitive upcasting## Description
- Fixed issue where temporary_box in dict isn't checked before del
- Switched pytest.mark.skip for broken tests to pytest.mark.xfail

## Checklist
- [x] I have followed the [Contribution Guidelines](https://github.com/OpenMined/.github/blob/master/CONTRIBUTING.md) and [Code of Conduct](https://github.com/OpenMined/.github/blob/master/CODE_OF_CONDUCT.md)
- [x] I have commented my code following the [OpenMined Styleguide](https://github.com/OpenMined/.github/blob/master/STYLEGUIDE.md)
- [x] I have labeled this PR with the relevant [Type labels](https://github.com/OpenMined/.github/labels?q=Type%3A)
- [x] My changes are covered by tests"	1	True	2021-08-05 05:26:30	2021-08-05 09:10:11	2021-08-05 06:44:44
https://github.com/OpenMined/PySyft/pull/5876	[]	Codebase fixes to get the Friday trade_demo working	"Codebase fixes to get the Friday trade_demo working## Description
This friday we have an important demo which is being worked in in the notebook series "	1	True	2021-08-04 13:44:43	2021-08-04 16:24:59	2021-08-04 16:24:58
https://github.com/OpenMined/PySyft/pull/5847	[]	Madhava/hot fix backend issue	"Madhava/hot fix backend issue## Description
Fixes issue which breaks grid from starting. Simple syft Dict vs typing.Dict issue.

## Checklist
- [ ] I have followed the [Contribution Guidelines](https://github.com/OpenMined/.github/blob/master/CONTRIBUTING.md) and [Code of Conduct](https://github.com/OpenMined/.github/blob/master/CODE_OF_CONDUCT.md)
- [ ] I have commented my code following the [OpenMined Styleguide](https://github.com/OpenMined/.github/blob/master/STYLEGUIDE.md)
- [ ] I have labeled this PR with the relevant [Type labels](https://github.com/OpenMined/.github/labels?q=Type%3A)
- [ ] My changes are covered by tests"	1	True	2021-07-28 21:44:30	2021-07-28 22:01:49	2021-07-28 22:01:49
https://github.com/OpenMined/PySyft/pull/5846	[]	Updating tox fix	"Updating tox fix## Description
Updates to this PR: https://github.com/OpenMined/PySyft/pull/5844

## Affected Dependencies
List any dependencies that are required for this change.

## How has this been tested?
- Describe the tests that you ran to verify your changes.
- Provide instructions so we can reproduce.
- List any relevant details for your test configuration.

## Checklist
- [ ] I have followed the [Contribution Guidelines](https://github.com/OpenMined/.github/blob/master/CONTRIBUTING.md) and [Code of Conduct](https://github.com/OpenMined/.github/blob/master/CODE_OF_CONDUCT.md)
- [ ] I have commented my code following the [OpenMined Styleguide](https://github.com/OpenMined/.github/blob/master/STYLEGUIDE.md)
- [ ] I have labeled this PR with the relevant [Type labels](https://github.com/OpenMined/.github/labels?q=Type%3A)
- [ ] My changes are covered by tests"	1	True	2021-07-28 01:40:25	2021-07-28 01:44:02	2021-07-28 01:44:02
https://github.com/OpenMined/PySyft/pull/5831	[]	fixing mypy for grid	"fixing mypy for grid## Description
Please include a summary of the change, the motivation, and any additional context that will help others understand your PR. If it closes one or more open issues, [please tag them as described here](https://help.github.com/en/github/managing-your-work-on-github/linking-a-pull-request-to-an-issue#linking-a-pull-request-to-an-issue-using-a-keyword).

## Affected Dependencies
List any dependencies that are required for this change.

## How has this been tested?
- Describe the tests that you ran to verify your changes.
- Provide instructions so we can reproduce.
- List any relevant details for your test configuration.

## Checklist
- [ ] I have followed the [Contribution Guidelines](https://github.com/OpenMined/.github/blob/master/CONTRIBUTING.md) and [Code of Conduct](https://github.com/OpenMined/.github/blob/master/CODE_OF_CONDUCT.md)
- [ ] I have commented my code following the [OpenMined Styleguide](https://github.com/OpenMined/.github/blob/master/STYLEGUIDE.md)
- [ ] I have labeled this PR with the relevant [Type labels](https://github.com/OpenMined/.github/labels?q=Type%3A)
- [ ] My changes are covered by tests"	1	True	2021-07-23 08:28:25	2021-07-27 07:29:03	2021-07-27 07:29:03
https://github.com/OpenMined/PySyft/pull/5829	[]	fixing mypy for hagrid	"fixing mypy for hagrid## Description
Please include a summary of the change, the motivation, and any additional context that will help others understand your PR. If it closes one or more open issues, [please tag them as described here](https://help.github.com/en/github/managing-your-work-on-github/linking-a-pull-request-to-an-issue#linking-a-pull-request-to-an-issue-using-a-keyword).

## Affected Dependencies
List any dependencies that are required for this change.

## How has this been tested?
- Describe the tests that you ran to verify your changes.
- Provide instructions so we can reproduce.
- List any relevant details for your test configuration.

## Checklist
- [ ] I have followed the [Contribution Guidelines](https://github.com/OpenMined/.github/blob/master/CONTRIBUTING.md) and [Code of Conduct](https://github.com/OpenMined/.github/blob/master/CODE_OF_CONDUCT.md)
- [ ] I have commented my code following the [OpenMined Styleguide](https://github.com/OpenMined/.github/blob/master/STYLEGUIDE.md)
- [ ] I have labeled this PR with the relevant [Type labels](https://github.com/OpenMined/.github/labels?q=Type%3A)
- [ ] My changes are covered by tests"	1	True	2021-07-22 11:40:51	2021-07-27 07:19:49	2021-07-27 07:19:49
https://github.com/OpenMined/PySyft/pull/5822	[]	Sympc tensor grid	"Sympc tensor grid## Description
Please include a summary of the change, the motivation, and any additional context that will help others understand your PR. If it closes one or more open issues, [please tag them as described here](https://help.github.com/en/github/managing-your-work-on-github/linking-a-pull-request-to-an-issue#linking-a-pull-request-to-an-issue-using-a-keyword).

## Affected Dependencies
List any dependencies that are required for this change.

## How has this been tested?
- Describe the tests that you ran to verify your changes.
- Provide instructions so we can reproduce.
- List any relevant details for your test configuration.

## Checklist
- [ ] I have followed the [Contribution Guidelines](https://github.com/OpenMined/.github/blob/master/CONTRIBUTING.md) and [Code of Conduct](https://github.com/OpenMined/.github/blob/master/CODE_OF_CONDUCT.md)
- [ ] I have commented my code following the [OpenMined Styleguide](https://github.com/OpenMined/.github/blob/master/STYLEGUIDE.md)
- [ ] I have labeled this PR with the relevant [Type labels](https://github.com/OpenMined/.github/labels?q=Type%3A)
- [ ] My changes are covered by tests
This is not working!! It works only for Hagrid this versionNote that there's also a packages/syft/proto/core/node/common/action/smpc_action.proto file which appears to be empty. Let's remove it.Is there a reason there is both ""tensor"" and ""array""?I'm surprised this works with missing number values. I thought proto didn't like that. Any reason we got rid of entity and id?(this might not have been your doing?)let's move these imports to the top of the fileHow big of a project is it to handle this TODO before we merge. If we don't handle it let's definitely create a Story in Clubhouse before merging so we don't forget.This is not a good place for this run_class_smpc_method function - definitely let's find a better place for it.

klass.py is about code generating pointers but in the case of ShareTensor we're not code generating anything. We just need to create a pointer subclass and put methods on it that we want. This documentation is incorrect.Can we get some comments and documentation on this service explaining what's going on? It's pretty complex :)Maybe a bit of documentation explaining this tensor here would be good.niceAcceptable @madhavajay this is ok to be removed?Those needs to be put backThose needs to be removedYep. I need to remove themI think this was from a branch where I had also the DP code. I will revisit this logicHmm...the work here is from the branch you had with DP and a lot of the work from here is your work -- I think this one I commented because I only wanted to leave the SMPC part in and then maybe get the DPIt should not be that big.

The party that has the MPCTEnsor would send in the kwargs the seed and each party would generate the UUIDsSure! I will have in the morning a sync with @madhavajay only to be sure that I might not overcomplicate stuff with the `celeryworker` and the MPCTensor and tomorrow I will get this done.Ahhh..it is because the child could be a Tensor or an array -- I am not sure which approach should we keep (I think this was something that I have seen in the DP branch and I carried with it)
If you look here - basically there is an `if...else` depending on the child [here](https://github.com/OpenMined/PySyft/pull/5822/files#diff-37698445e24479cdf1304dfe050c1beb3d4e6463eca4245b8a52591b1d8028fd) at the serializationAh right - that makes sensebrilliant <3This showcased a lot of problems for the allowed methods.@tudorcebere @madhavajay I added here not to garbage collection because sometimes it was triggered by the worker (probably because working with pointer more than usually)Yeah custom tensor proto is recursive and can be another Tensor all the way to the bottom until it finally must be a numpy array. Turtles most of the way down. üê¢ üåèQ: Why do we have ShareTensor inside FP Tensor.Should it be like FP tensor inside ShareTensor.Q: Should we also have ring_size in ShareTensor?MAYBE: We could remove the above repeated commentsQ: Why do we disable garbage collection?MAYBE : We could have the import at top of module.Q:Why do we generate it sequentially without assignment of the generator.Q: why do we disable garbage collection here also?YepI think for the moment this won't matter -- this is a branch that diverged a lot from ""dev"" and when we go back we would have that field (from what I remember we have it in dev)Here we have FPTensor --> ShareTensor  (you need to convert to integer and the we secret share it -- and the result is still an int tensor)We have a remote pointer and then we ask to do a remote operation -- at that point, we lose the ""pointer"" locally and we also send a ""GarbageCollect action"" -- that action might be executed before doing the actual operation (and we lose the data we want to do the operation on)We use this to be ""in sync"" with the parties and the intermediary result from the shares.
All the parties (+ the orchestrator) have a seed and they generate ""id_at_locations"" in a deterministic and synchronized way.

The parties might have intermediary results (and they generate ids for those results).  The orchestrator discards the ids for those intermediary results and keeps only the last id for the result.
I get a recursive import :(The same reason as bellowdoes this invert the bool? Should it possibly just be pointable=False incase the bool is already False?Maybe we can do a quick find replace on the copied `RunClassMethodAction` string inside this file?Should we just remove commented out unused code we have in git history?This breaks the tests/syft/core/tensor/autodp/single_entity_phi_test.py test?Looks like its being called in transformers, so im adding it back.Why does this need to be removed? And are you asking or saying?I have done this.I have disabled these tests so this can be off for now.Not the scope of this PR, but we really need to clear the serialize/deserialize functionsShould we raise an exception when rank is not provided or assign a default value?Q: Why is it insecure, since we beaver triples, I think it should be secure.We generate for all parties and take only specific rank, would all the parties have the same seed.Should we have  `slots`  or we will keep it for a later PR?Can we have the default base as 2,it would be effective for shift operations?Same here , could we have default base as 2?I think we should remove the error logs in the notebook before merge.Having numpy also , includes unsigned integers(not available in torch), which helped me a lot  in protocol implementations.What errors george, is it resolved?I think we can add ```__slots__``` later or maybe not at all. ```__slots__``` can have a disadvantage when used in an inheritance scenario and in this case we (the SMPC team) do not fully control what happens with the ```PassthroughTensor```)Because the parties might know how the shares from the other parties might look.
Since they all get the same seed and generate shares (even thought they do not keep them -- they could still ""look"" at them)Now it works -- 7 days ago there were some ```allowlist``` related problemsI am not sure if I understand what you mean.
Here I only want to make sure that we set `pointable` accordingly to the `gc_enabled` parameter. If we don't want to garbage collect the parameter we should set `pointable to False` (which is the invert of the `gc_enabled` variable)Rank should always be provided. It does not have any default value.Yep - all parties have the same seed and generate the same ""shares"", but they keep only specific shares depending on their rank (if you look at line 118)This is used for the moment since it would be simpler to visualize the result (if you have a float number)Is this resolved?Is this resolved?Is this resolved?Is this resolved?Is this resolved?Is this resolved?Is this resolved?"	5	True	2021-07-20 19:02:34	2021-08-03 10:20:32	2021-08-03 10:20:31
https://github.com/OpenMined/PySyft/pull/5821	[]	Flake 8 fix 0.6.0	"Flake 8 fix 0.6.0## Description
Please include a summary of the change, the motivation, and any additional context that will help others understand your PR. If it closes one or more open issues, [please tag them as described here](https://help.github.com/en/github/managing-your-work-on-github/linking-a-pull-request-to-an-issue#linking-a-pull-request-to-an-issue-using-a-keyword).

## Affected Dependencies
List any dependencies that are required for this change.

## How has this been tested?
- Describe the tests that you ran to verify your changes.
- Provide instructions so we can reproduce.
- List any relevant details for your test configuration.

## Checklist
- [ ] I have followed the [Contribution Guidelines](https://github.com/OpenMined/.github/blob/master/CONTRIBUTING.md) and [Code of Conduct](https://github.com/OpenMined/.github/blob/master/CODE_OF_CONDUCT.md)
- [ ] I have commented my code following the [OpenMined Styleguide](https://github.com/OpenMined/.github/blob/master/STYLEGUIDE.md)
- [ ] I have labeled this PR with the relevant [Type labels](https://github.com/OpenMined/.github/labels?q=Type%3A)
- [ ] My changes are covered by tests"	1	True	2021-07-20 12:26:29	2021-07-22 10:17:09	2021-07-22 10:17:09
https://github.com/OpenMined/PySyft/pull/5733	[]	Releasing 0.5.0rc3	"Releasing 0.5.0rc3## Description
- sy.load is now automatic
- apache arrow torch serde
- python 3.9 and pydp support
- updated dev tooling with tox
- new docker containers for grid
- added docker-compose example
- unified versioning system for 0.5.0rc3
- grid supports PostgreSQL
- lots of bug fixes

## Affected Dependencies
Stuff

## How has this been tested?
CI

## Checklist
- [x] I have followed the [Contribution Guidelines](https://github.com/OpenMined/.github/blob/master/CONTRIBUTING.md) and [Code of Conduct](https://github.com/OpenMined/.github/blob/master/CODE_OF_CONDUCT.md)
- [x] I have commented my code following the [OpenMined Styleguide](https://github.com/OpenMined/.github/blob/master/STYLEGUIDE.md)
- [x] I have labeled this PR with the relevant [Type labels](https://github.com/OpenMined/.github/labels?q=Type%3A)
- [x] My changes are covered by tests"	1	True	2021-06-25 07:07:48	2021-06-25 07:08:31	2021-06-25 07:08:31
https://github.com/OpenMined/PySyft/pull/5727	[]	Improved Docker and grid local dev with tox	"Improved Docker and grid local dev with tox## Description
- Improved Docker and grid local dev with tox
- Copied @koenvanderveen Grid Network and Domain connection notebook
- Added print private exception in debug mode on server side
- Split up docker files into two stages
- Set flask.app.url_map.strict_slashes = False
- Fixed bug with CreateInitialSetUpResponse return message key
- Set grid unit tests to run without random order (possible db state)

## Affected Dependencies
Stuff

## How has this been tested?
Locally a lot.

## Checklist
- [x] I have followed the [Contribution Guidelines](https://github.com/OpenMined/.github/blob/master/CONTRIBUTING.md) and [Code of Conduct](https://github.com/OpenMined/.github/blob/master/CODE_OF_CONDUCT.md)
- [x] I have commented my code following the [OpenMined Styleguide](https://github.com/OpenMined/.github/blob/master/STYLEGUIDE.md)
- [x] I have labeled this PR with the relevant [Type labels](https://github.com/OpenMined/.github/labels?q=Type%3A)
- [x] My changes are covered by tests"	1	True	2021-06-24 11:41:53	2021-06-25 06:11:00	2021-06-25 06:11:00
https://github.com/OpenMined/PySyft/pull/5658	[]	Fixing pydp tests	"Fixing pydp tests## Description
Fixing pydp tests

## Affected Dependencies
None

## How has this been tested?
Locally and CI

## Checklist
- [x] I have followed the [Contribution Guidelines](https://github.com/OpenMined/.github/blob/master/CONTRIBUTING.md) and [Code of Conduct](https://github.com/OpenMined/.github/blob/master/CODE_OF_CONDUCT.md)
- [x] I have commented my code following the [OpenMined Styleguide](https://github.com/OpenMined/.github/blob/master/STYLEGUIDE.md)
- [x] I have labeled this PR with the relevant [Type labels](https://github.com/OpenMined/.github/labels?q=Type%3A)
- [x] My changes are covered by tests"	2	True	2021-06-14 04:20:14	2021-06-14 05:21:10	2021-06-14 05:21:10
https://github.com/OpenMined/PySyft/pull/5609	[]	Test network utility	"Test network utility## Description
Basic network diagnostics test utility. 

- [x] CI test
- [x] Check local signaling server
- [x] Loopbackloopback=True still uses the same signalling server it just exchanges the IDs automatically using a file, so we should still check all of these main url service checks. There is the case where a user can run their own signalling server so it might be nice to be able to pass that in as a parameter and have these checks run against it to make sure that the python process can read the url on the port you supply.

like:
```
sy.test_duet_network(network_url=""http://192.168.0.2:5432"")
```Not sure how I missed those üòûÔ∏è. Fixed."	3	True	2021-05-28 05:06:22	2021-06-28 22:55:59	2021-06-28 22:55:59
https://github.com/OpenMined/PySyft/pull/5602	['priority: 2 - high :cold_sweat:', 'documentation ']	Update Hyperledger Aries Example to fix Breaking Changes to Controller package	"Update Hyperledger Aries Example to fix Breaking Changes to Controller package## Description
We recently introduced some breaking changes to the aries_cloudcontroller package. I have been through the tutorials and updated code appropriately so it all works. Plus I now fixed the packaged to a specific version so this will hopefully remain stable in the future.

I linked to a deployed version of the OM Duet Authority - http://139.162.224.50/. Would be good to put behind a proper domain and add SSL etc but this will do for now. Just to show people taking the example what something more ""real"" might look like.

I added a notebook to allow people who didn't take the full course to still get a credential on their mobile which they can use to authenticate against the OM Duet Authority website.

And made some minor updates to the Readme.

@madhavajay I think the course comes out Wednesday so be good to get this in ASAP. No changes to any Syft code so would suggest just merge ;)

## Affected Dependencies
None

## How has this been tested?
- Worked through the full tutorial

## Checklist
- [x] I have followed the [Contribution Guidelines](https://github.com/OpenMined/.github/blob/master/CONTRIBUTING.md) and [Code of Conduct](https://github.com/OpenMined/.github/blob/master/CODE_OF_CONDUCT.md)
- [x] I have commented my code following the [OpenMined Styleguide](https://github.com/OpenMined/.github/blob/master/STYLEGUIDE.md)
- [x] I have labeled this PR with the relevant [Type labels](https://github.com/OpenMined/.github/labels?q=Type%3A)
- [x] My changes are covered by tests"	3	True	2021-05-24 16:15:08	2021-06-01 02:21:13	2021-06-01 02:21:12
https://github.com/OpenMined/PySyft/pull/5591	[]	Moving CDC data into external repo	"Moving CDC data into external repo## Description
Moving CDC data into external repo.
Fixes broken CDC test.

## Affected Dependencies
None

## How has this been tested?
Locally and CI

## Checklist
- [x] I have followed the [Contribution Guidelines](https://github.com/OpenMined/.github/blob/master/CONTRIBUTING.md) and [Code of Conduct](https://github.com/OpenMined/.github/blob/master/CODE_OF_CONDUCT.md)
- [x] I have commented my code following the [OpenMined Styleguide](https://github.com/OpenMined/.github/blob/master/STYLEGUIDE.md)
- [x] I have labeled this PR with the relevant [Type labels](https://github.com/OpenMined/.github/labels?q=Type%3A)
- [x] My changes are covered by tests"	1	True	2021-05-20 01:15:54	2021-05-20 01:16:28	2021-05-20 01:16:28
https://github.com/OpenMined/PySyft/pull/5495	[]	Public Key Infrastructures Course: Hyperledger Aries Duet Session Auth Layer	"Public Key Infrastructures Course: Hyperledger Aries Duet Session Auth Layer## Description
I replaced the self-sovereign-identity folder with the hl-aries-credential-exchange folder. This is now up to date and uses the Syft 0.5 rc version. Readme in the folder contains instructions for running the example which should stand independently of the course. 

Be grateful is someone can have a go at following these to run the example.

## Affected Dependencies
None

## How has this been tested?
- Example notebooks tested and working

We could remove this now"	1	True	2021-04-21 18:36:04	2021-05-03 06:04:48	2021-05-03 06:04:48
https://github.com/OpenMined/PySyft/pull/5494	['bug ', 'improvement ', 'good first issue :mortar_board:', 'priority: 4 - low :sunglasses:', 'severity: 4 - low :sunglasses:']	Fix notebook Remote Medical Data Science Grid Mock	"Fix notebook Remote Medical Data Science Grid Mock## Description

This just removes an extra return within a string in a notbook JSON. The notebook file is corrupted and doesn't load without this fix.

## Affected Dependencies
None

## How has this been tested?
- Just try to load the notebook either into a Google Colab or through `jupyter notebook`.

## Checklist
- [x] I have followed the [Contribution Guidelines](https://github.com/OpenMined/.github/blob/master/CONTRIBUTING.md) and [Code of Conduct](https://github.com/OpenMined/.github/blob/master/CODE_OF_CONDUCT.md)
- [x] I have commented my code following the [OpenMined Styleguide](https://github.com/OpenMined/.github/blob/master/STYLEGUIDE.md)
- [x] I have labeled this PR with the relevant [Type labels](https://github.com/OpenMined/.github/labels?q=Type%3A)
- [-] My changes are covered by tests"	2	True	2021-04-21 14:49:49	2021-04-27 06:20:38	2021-04-27 06:20:38
https://github.com/OpenMined/PySyft/pull/5477	[]	Fix tutorials SyMPC	"Fix tutorials SyMPC## Description
Fix the SyMPC VMs and Duet tutorials.

At one point we need to make a request to our own duet store -- at that point, we check if the node we respond is the same as the ""we"" and in that case, we made a request to our own store and we can give ```Request.Accepted```.

The problem is because requesting the ```len``` of an object triggers a ```request``` and then a ```get```.
The same behavior can be seen using:
```
ptr = duet.python.List([1,2,3])
ptr.get() ## This works because we do not request, we simply get the object


BUT, doing this:

# This won't work because we would do a get(request_block=True)
# and we do not have the logic for what happens when
# node X request an object from node X
len(ptr)
```

## How has this been tested?
- Running the tutorial

## Checklist
- [x] I have followed the [Contribution Guidelines](https://github.com/OpenMined/.github/blob/master/CONTRIBUTING.md) and [Code of Conduct](https://github.com/OpenMined/.github/blob/master/CODE_OF_CONDUCT.md)
- [x] I have commented my code following the [OpenMined Styleguide](https://github.com/OpenMined/.github/blob/master/STYLEGUIDE.md)
- [x] I have labeled this PR with the relevant [Type labels](https://github.com/OpenMined/.github/labels?q=Type%3A)
- [x] My changes are covered by tests
It should also approve the requests made by simple clients to be consistent with the case when we create an object and simply ""get"" it without approval?
Or should we change the behavior for ""get""?Well, currently we are using VirtualMachines as placeholders to simulate the permission mechanism as well, (we should probably create test-specific nodes at some points). Until then, normal clients are going through the permission scheme, while the root clients get auto-approved?"	1	True	2021-04-15 20:41:04	2021-05-06 12:07:13	2021-05-06 12:07:13
https://github.com/OpenMined/PySyft/pull/5455	[]	Forward plan (SyModule)	"Forward plan (SyModule)This PR is an attempt to solve the following challenges around SyModule
- Creating 1 model as source of truth, not a local and a remote model
- The ability to compose multiple SyModules into one bigger model
- A convenient API for defining complex models, load pre-trained weights, and then fine tune the pretrained model using SyModule
- The ability to pass a SyModule as a default argument to a plan 

This PR is based on earlier work by @xutongye around serialization of nn.module and introduces:

1) SyModule
- - the forward method is automatically converted into a plan **after initialization of an object**, by using the state in the SyModule in the Plan.
- - SyModule can contain nn.Parameters, nn.Modules from the ast, and nested SyModules
- - The most tricky part of this PR is the ""recompile"" step. We currently recompile (relinking the obj state to the plan) the SyModule on **deserialization**, as the state may have changed compared to when the forward `Plan` was constructed. We might want to handle this in a different place, or store a `needs_recompile` attribute and check before execution. The implementation details are in the lowest part of the `proto2object` for SyModule
2) SySequential, inheriting from SyModule which allows to chain multiple SyModules
3) Nested plans, in order to wrap a SyModule.forward call in a plan

<p>would be really cool if this dummy data could be automatically generated based on the input argument variables</p>
<br/>

 _Reply via <a href='https://app.reviewnb.com/OpenMined/PySyft/pull/5455/discussion/'>ReviewNB</a>_ <div id='ReviewNBCommentContext-DoNotDelete' style='display:none' data-state='OPEN' data-cellIndex='30'/><p>train_pointer is accepting actual variables as input instead of pointers to variables already on the remote machine. This makes me think that the plan is actually being executed locally on pointers instead of the actions actually being sent to the remote machien to be executed there. This would mean that there's still a tremendous amount of network traffic (one message per action) when running a plan as opposed to only saying ""hey run this plan on these variables"" being the only message actually sent over the network.</p>
<br/>

 _Reply via <a href='https://app.reviewnb.com/OpenMined/PySyft/pull/5455/discussion/'>ReviewNB</a>_ <div id='ReviewNBCommentContext-DoNotDelete' style='display:none' data-state='OPEN' data-cellIndex='41'/><p>Calling model.send() in the plan feels strange to me. If we're sending the plan to a remote worker and running it there then why would the plan (which is already on the remote machine) send data somewhere else?</p>
<br/>

 _Reply via <a href='https://app.reviewnb.com/OpenMined/PySyft/pull/5455/discussion/'>ReviewNB</a>_ <div id='ReviewNBCommentContext-DoNotDelete' style='display:none' data-state='OPEN' data-cellIndex='16'/><p>glad to se this is working without model.send() although i'm not sure where the model or its parameters are being sent to the remote machine. where is this happening?</p>
<br/>

 _Reply via <a href='https://app.reviewnb.com/OpenMined/PySyft/pull/5455/discussion/'>ReviewNB</a>_ <div id='ReviewNBCommentContext-DoNotDelete' style='display:none' data-state='OPEN' data-cellIndex='15'/><p>both, because model is an argument to the plan it is sent to the plan vm automatically. model is a symodule and therefore uses the object2proto in lib/torch/module line 419</p><p>This notebook was experimental and is outdated, please check the Sy Resnet nb</p><p>Yes, the plan pointer does accept variables (instead of pointers), however I think it would also accept pointers. But it does not mean that those variables are not sent and executed remotely (I am not sure how to interpret ""local"", is a VM also local?). When we execute the plan pointer by passing variables we don't need a lot of traffic, because we only serialize the arguments, not the actions in the plan. <strong>However, </strong>we currently use a hack for local execution of plans, which actually involves sending them to an ephemeral machine. We should get rid of that hack at some point.</p><p> </p><p>Also, this notebook is outdated </p><p>Agreed, I do think this would be a nice stand alone ticket so we might leave it our for now (in this PR)?</p><p>ahhhhh!</p>I think a requirement for this is that our API for calling the forward plans exactly matches the api for calling the torch.nn.Module.forward (I think this is a good idea anyway), right now there is a difference:

SyModule.forward
```
out = self.layer(x=x)[0]
```
torch.nn.Module.forward
```
out = self.layer(x)
```"	3	True	2021-04-09 14:01:59	2021-05-06 03:26:21	2021-05-06 03:26:21
https://github.com/OpenMined/PySyft/pull/5416	[]	PyGrid client Minor Fixes / Enhancement	"PyGrid client Minor Fixes / Enhancement## Description
Adjust the `syft.grid.client.get_instances` method to show available cloud instances in a DataFrame in a proper structure.

## Affected Dependencies
List any dependencies that are required for this change.

## How has this been tested?
- Describe the tests that you ran to verify your changes.
- Provide instructions so we can reproduce.
- List any relevant details for your test configuration.

## Checklist
- [x] I have followed the [Contribution Guidelines](https://github.com/OpenMined/.github/blob/master/CONTRIBUTING.md) and [Code of Conduct](https://github.com/OpenMined/.github/blob/master/CODE_OF_CONDUCT.md)
- [x] I have commented my code following the [OpenMined Styleguide](https://github.com/OpenMined/.github/blob/master/STYLEGUIDE.md)
- [ ] I have labeled this PR with the relevant [Type labels](https://github.com/OpenMined/.github/labels?q=Type%3A)
- [ ] My changes are covered by tests"	5	True	2021-03-31 19:19:17	2021-04-01 09:16:32	2021-04-01 09:16:31
https://github.com/OpenMined/PySyft/pull/5410	[]	Fix MCFL on Grid Side	"Fix MCFL on Grid Side## Description
Making changes to syft to match the PyGrid MCFL branch and integration tests.

## Affected Dependencies
Syft, Grid the whole world! 

## How has this been tested?
Integration tests and CI.

## Checklist
- [x] I have followed the [Contribution Guidelines](https://github.com/OpenMined/.github/blob/master/CONTRIBUTING.md) and [Code of Conduct](https://github.com/OpenMined/.github/blob/master/CODE_OF_CONDUCT.md)
- [x] I have commented my code following the [OpenMined Styleguide](https://github.com/OpenMined/.github/blob/master/STYLEGUIDE.md)
- [x] I have labeled this PR with the relevant [Type labels](https://github.com/OpenMined/.github/labels?q=Type%3A)
- [x] My changes are covered by tests"	1	True	2021-03-31 03:24:42	2021-06-29 18:01:43	2021-03-31 08:05:39
https://github.com/OpenMined/PySyft/pull/5406	[]	Add simple gc strategies	"Add simple gc strategies## Description
Add a strategy like design pattern to the GC logic.
Currently, it implements two strategies:
 - `simple` - the one that we had before when one pointer goes out of scope a message would be sent to the DO to delete the object.
 - `batched` - send a message when a number of messages have been collected.

TODO:
 - add `benchmarking`

## Affected Dependencies
- GC logic that was used before

## How has this been tested?
- Added tests
- TBD: Add benchmark.

## Checklist
- [x] I have followed the [Contribution Guidelines](https://github.com/OpenMined/.github/blob/master/CONTRIBUTING.md) and [Code of Conduct](https://github.com/OpenMined/.github/blob/master/CODE_OF_CONDUCT.md)
- [x] I have commented my code following the [OpenMined Styleguide](https://github.com/OpenMined/.github/blob/master/STYLEGUIDE.md)
- [x] I have labeled this PR with the relevant [Type labels](https://github.com/OpenMined/.github/labels?q=Type%3A)
- [x] My changes are covered by tests
typo in docstringDo we need both in your opinion?I think we might need the ```threshold_total``` in case the DS is talking with a lot of DOs (and it might accumulate a lot of pointers? even if they don't take as much space as the real data, they might also add up) - and in case we never reach the limit for ```trehshold_client``` we might consume memory on the DS side?

Thinking also about this now...I think I would remove this, this is premature optimization and we should add code only in case we need it (for the moment there is no indication that this might happen).NIT: more like a personal preference maybe, but it might make sense to live under `core/pointer`? If you feel like this is the right spot, leave it here.Q: Not sure how to solve the circular dependency more nicely :\@tudorcebere this is the way that I would think most people would use the gc strategyI like this as well, but we need really nice docs on it on how to actually use them/how to implement one. Most likely, people won't be aware of this feature, but it's nice to have the option to do it. (Maybe we want to cut network usage and never free anything, stuff like that).Yep - I would do that in the ```__init__.py``` file from ```garbage_collection``` dir"	3	True	2021-03-30 15:27:05	2021-04-06 11:03:30	2021-04-06 11:03:30
https://github.com/OpenMined/PySyft/pull/5385	[]	load multiple libs in one call	"load multiple libs in one call## Description
Fix #5344
Enable loading multiple libraries in a single `syft.load` call.

## How has this been tested?
`tests/syft/api/load_lib_test.py`

## Checklist
- [x] I have followed the [Contribution Guidelines](https://github.com/OpenMined/.github/blob/master/CONTRIBUTING.md) and [Code of Conduct](https://github.com/OpenMined/.github/blob/master/CODE_OF_CONDUCT.md)
- [x] I have commented my code following the [OpenMined Styleguide](https://github.com/OpenMined/.github/blob/master/STYLEGUIDE.md)
- [ ] I have labeled this PR with the relevant [Type labels](https://github.com/OpenMined/.github/labels?q=Type%3A)
- [x] My changes are covered by tests
Q: Why is the need to convert to string?NIT: Leave it like ```lib=lib```Could you add in the type hints that we want specifically strings?
`List[str], Set[str]` etc.

It has to be clear for the user that it shouldn't pass the module itself.We shouldn't convert to string, we need to check all the arguments (even if nested) are strings.

In other words:

```
if isintance(args[0], str):
   ...
elif is_iterable(args[0]):
   # iterate through this and check if the components are strings and load them
else:
   # errorCould we get another test that checks for different errors when an invalid string or an invalid object is passed?To ensure only string objects get passed.

Now checking using `isinstance` before calling `_load_lib`, to better handle error reporting.Done.Added error testing. But this requires #5397 to be merged first.Done.Done."	1	True	2021-03-28 17:28:56	2021-03-31 16:41:45	2021-03-30 10:59:25
https://github.com/OpenMined/PySyft/pull/5384	[]	fix#5365 skip rewrapping iter	"fix#5365 skip rewrapping iter## Description
Fix #5365

`__iter__` gets wrapped multiple times due to 
https://github.com/OpenMined/PySyft/blob/261869e50852a24b2d76f3b44a5819050acd9eb8/src/syft/ast/klass.py#L338-L342

Fix: skip re-wrapping if already wrapped

## Checklist
- [x] I have followed the [Contribution Guidelines](https://github.com/OpenMined/.github/blob/master/CONTRIBUTING.md) and [Code of Conduct](https://github.com/OpenMined/.github/blob/master/CODE_OF_CONDUCT.md)
- [x] I have commented my code following the [OpenMined Styleguide](https://github.com/OpenMined/.github/blob/master/STYLEGUIDE.md)
- [ ] I have labeled this PR with the relevant [Type labels](https://github.com/OpenMined/.github/labels?q=Type%3A)
- [x] My changes are covered by tests
NIT:
```
qual_name = getattr(iter_target, ""__qual_name__"", None)
if qual_name and ""wrap_iter"" in qual_name:
    return
```"	4	True	2021-03-28 09:02:55	2021-04-19 17:11:59	2021-03-30 12:11:16
https://github.com/OpenMined/PySyft/pull/5383	[]	torchvision test parameters, min_version requirements	"torchvision test parameters, min_version requirements## Description
Fix #5325 
Refactor torchvision test parameters & fix min_version requirements

Fix #5368 
Support PIL Image in torchvision tests.

## Checklist
- [x] I have followed the [Contribution Guidelines](https://github.com/OpenMined/.github/blob/master/CONTRIBUTING.md) and [Code of Conduct](https://github.com/OpenMined/.github/blob/master/CODE_OF_CONDUCT.md)
- [x] I have commented my code following the [OpenMined Styleguide](https://github.com/OpenMined/.github/blob/master/STYLEGUIDE.md)
- [ ] I have labeled this PR with the relevant [Type labels](https://github.com/OpenMined/.github/labels?q=Type%3A)
- [x] My changes are covered by tests
We have PIL image types now so this could potentially be enabled?Yes, done."	1	True	2021-03-28 08:26:21	2021-04-05 10:38:00	2021-04-05 10:38:00
https://github.com/OpenMined/PySyft/pull/5378	[]	Raise Reference error to prevent spurious network call	"Raise Reference error to prevent spurious network call## Description
Fixes issue #5364 
Pointer is invalidated if `.get()` is called once.

## Affected Dependencies
None

## How has this been tested?
``` python
import syft as sy
client = sy.VirtualMachine().get_root_client()

int_ptr = client.syft.lib.python.Int(0)
result = int_ptr.get() # delete_obj = True by default

# Does not make a network call and 
# Raises a ReferenceError
int_ptr.get()
```

Raises a reference Error in the second call and preventing a network call.

## Checklist
- [x] I have followed the [Contribution Guidelines](https://github.com/OpenMined/.github/blob/master/CONTRIBUTING.md) and [Code of Conduct](https://github.com/OpenMined/.github/blob/master/CODE_OF_CONDUCT.md)
- [x] I have commented my code following the [OpenMined Styleguide](https://github.com/OpenMined/.github/blob/master/STYLEGUIDE.md)
- [x] I have labeled this PR with the relevant [Type labels](https://github.com/OpenMined/.github/labels?q=Type%3A)
- [x] My changes are covered by tests"	2	True	2021-03-26 18:23:31	2021-03-29 11:50:35	2021-03-29 11:50:35
https://github.com/OpenMined/PySyft/pull/5376	[]	API of user-defined model & Plan	"API of user-defined model & Plan## Description
This PR is directly based on #5342 . 

### How does the API look like?
```python
class MyModel(torch.nn.Module):
    def __init__(self):
        super().__init__()
        self.fc1 = torch.nn.Linear(4,2)
        self.fc2 = torch.nn.Linear(2,1)

    def forward(self, x=torch.rand(4), torch=torch): # << The only difference is here.
        x = self.fc1(x)
        x = torch.relu(x)
        x = self.fc2(x)
        return x

@make_plan
def train(dl=dl, model=MyModel()):
    optimizer = ROOT_CLIENT.torch.optim.SGD(model.parameters(), lr=1e-1, momentum=0)
    criterion = ROOT_CLIENTtorch.nn.CrossEntropyLoss()
    
    for x, y in dl:
        out = model(x=x) # << use keyword args, not position args
        loss = criterion(out, y)
        loss.backward()
        optimizer.step()
        
    return model

local_model = MyModel()
remote_model = local_model.send(alice_client)
train_ptr = train.send(alice_client)
m_ptr = train_ptr(dl=remote_dl, model=remote_model)
m_get = m_ptr.get()
assert isinstance(m_get, MyModel) # the type of model got back is the class you defined
assert type(m_get.forward).__name__==""method"" # the forward of m_get is a method, not a plan.
```
So, as you can see, the way we define our model is almost the same as in pytorch, except two requirements in forward method:
1. It must have a default value for `x`. This is necessary for us to create plan from the forward method.
2. It must have an argument `torch`, and also give default value to it. This is necessary because we want to replace `torch` by `remote_torch` in plan. With `torch` as an argument, we can replace it simply by passing in `remote_torch` to the `torch` argument.

### How I do that?
#### 1. How to call child modules of a remote model, i.e., `model_pointer.fc1(x)`?
An user defined model class is not pre-defined in our source code, which means we can't add it to AST. So, the `model_pointer` doesn't have attribute named `fc1` when it's created. We need to attach an attribute `fc1` to  `model_pointer`. 
To do that, one way is to send `local_model.fc1` and get a pointer `fc1_pointer`, and then do `remote_model.fc1=fc1_pointer`. But, this means we send `local_model.fc1` two times, one time when we send `local_model`, second time when we send `local_model.fc1`. Doing so, means `remote_model.fc1_pointer` is pointing to a different remote `nn.Linear` object, i.e., not the child module `fc1` of the remote model. Then, when training, the optimizer is updating the parameters of which `fc1`? So, this is a problem. Maybe we can find a solution to this problem. But let's find a better way, where there is no such a problem.
My solution is, we don't need to send `local_model.fc1` to get `fc1_pointer`, we directly copy the pointer `remote_model` to get `fc1_pointer`, and give an attribute `attribute_name=""fc1""` to `fc1_pointer`. With this new attribute `attribute_name=""fc1""`, we can directly access the child module `""fc1""` of the remote model. So, `fc1_pointer` is pointing to the child module of the remote model, not a different `Linear` object.
#### 2. How is the forward plan created?
The forward method of our model is sent as a plan object. So, we create a plan from the forward method. So, we need the forward method to have default value for it's `x` argument. And we need the forward method to have a `torch` argument, which is replaced by `remote_torch` when creating the plan object.
One problem is that when making a plan, it needs a function, not a method. But `forward` is a mothod. How we get a function? It's easy, we can call a method from the class name, `MyModel.forward(self=model, x=x, torch=torch)`, then it acts like a function.
#### 3. When is the forward plan created?
We create the forward plan inside `send` method, i.e., the forward plan is created when you call `my_model.send()`. I think this is the good time to create the plan, because this is the time the plan is needed.
#### 4. The forward plan will not be created multiply times.
It's slow to create a plan object, especially when the function is big. So, we store the plan object once it's created the first time, and re-use it when it's needed later.
```python
local_model = MyModel()
assert not hasattr(local_model, ""_sy_forward_plan"")
remote_model = local_model.send(alice_client) # a plan is created
assert hasattr(local_model, ""_sy_forward_plan"")
remote_model = local_model.send(alice_client) # _sy_forward_plan is used
```
#### 5. How to transform a plan to a function?
When a model is sent, the forward method becomes a plan on remote side. When a remote model is got back, is the forward attribute of the got back model a plan or a method? It's a mothod again.
When a model is sent, we record the class in a global dict named `CUSTOM_MODELS`, which maps a class name to a class. For example, `CUSTOM_MODELS[""MyModel""]=MyModel`.
So, when we get back a remote model, we can get the class of that model from `CUSTOM_MODELS`, because we know the class name from `proto.module_type`. So, we can create exactly a `MyModel` object. And it's forward attribute is a method naturally.

## Affected Dependencies
List any dependencies that are required for this change.

## How has this been tested?
- examples/experimental/tongye/torch_nn_Module.ipynb
- examples/experimental/tongye/MLP Plan.ipynb

## Checklist
- [ ] I have followed the [Contribution Guidelines](https://github.com/OpenMined/.github/blob/master/CONTRIBUTING.md) and [Code of Conduct](https://github.com/OpenMined/.github/blob/master/CODE_OF_CONDUCT.md)
- [ ] I have commented my code following the [OpenMined Styleguide](https://github.com/OpenMined/.github/blob/master/STYLEGUIDE.md)
- [ ] I have labeled this PR with the relevant [Type labels](https://github.com/OpenMined/.github/labels?q=Type%3A)
- [ ] My changes are covered by tests
What is attribute name? Can't we deduce it from `points_to_object_with_path`?Would you mind adding:
* a test with a very dummy model (in can have like an internal FC of [32, 2]) with random data/labels to add a test that the forward pass is not breaking?
* add a few lines of docstrings?As I understand it, they are different. Let's use an example, 
```python
m = nn.Sequential()
m.add_module(""fc1"", nn.Linear(4,2))
m.add_module(""fc2"", nn.Linear(2,1))
m_ptr = m.send(duet)
```
Then, for `m_ptr`, the `points_to_object_with_path` of it would be like `torch.nn.Sequential`. Then, imagine if we want a pointer pointing to `m.fc1`, we can create a Pointer same as `m_ptr` but has `attribute_name=fc1`.sure, will do.Could you help me understand what this is doing?It would be great if this could be 1) documented 2) moved into the `Plan` class so it does not complicate the user facing API. Note that right now it would also not solve the issue when you would create a Plan by hand.Also check if this works if the plan output is a single object (instead of a list)"	1	True	2021-03-26 05:39:30	2021-04-23 09:02:04	2021-04-23 09:02:03
https://github.com/OpenMined/PySyft/pull/5363	[]	Iterator/GC fixes to solve store __delitem__ errors	"Iterator/GC fixes to solve store __delitem__ errors## Description
Fixing a few iterator return types

## Affected Dependencies
List any dependencies that are required for this change.

## How has this been tested?
- Describe the tests that you ran to verify your changes.
- Provide instructions so we can reproduce.
- List any relevant details for your test configuration.

## Checklist
- [ ] I have followed the [Contribution Guidelines](https://github.com/OpenMined/.github/blob/master/CONTRIBUTING.md) and [Code of Conduct](https://github.com/OpenMined/.github/blob/master/CODE_OF_CONDUCT.md)
- [ ] I have commented my code following the [OpenMined Styleguide](https://github.com/OpenMined/.github/blob/master/STYLEGUIDE.md)
- [ ] I have labeled this PR with the relevant [Type labels](https://github.com/OpenMined/.github/labels?q=Type%3A)
- [ ] My changes are covered by tests
Theres some code below that I wrote:
```python
try:
    if hasattr(_obj_ref, ""__len__""):
        max_len = _obj_ref.__len__()
except AttributeError:
    # I am not sure why this happens on some types
    pass
```

I can't remember but I am pretty sure this happens, maybe its on generators which cant give you their length because its not known, or something like that, either way, I think its possible that there is no known `len` sometimes. Should we add some `try` and logging just in case so we can spot it when it blows up?Maybe we should add generators as a separated supported type instead?"	1	True	2021-03-24 11:47:14	2021-03-25 19:40:46	2021-03-25 19:40:46
https://github.com/OpenMined/PySyft/pull/5277	[]	Fixing issue 5167	"Fixing issue 5167## Description
solves issue #5167 
## Affected Dependencies
List any dependencies that are required for this change.

## How has this been tested?
- Describe the tests that you ran to verify your changes.
- Provide instructions so we can reproduce.
- List any relevant details for your test configuration.

## Checklist
- [x] I have followed the [Contribution Guidelines](https://github.com/OpenMined/.github/blob/master/CONTRIBUTING.md) and [Code of Conduct](https://github.com/OpenMined/.github/blob/master/CODE_OF_CONDUCT.md)
- [x] I have commented my code following the [OpenMined Styleguide](https://github.com/OpenMined/.github/blob/master/STYLEGUIDE.md)
- [x] I have labeled this PR with the relevant [Type labels](https://github.com/OpenMined/.github/labels?q=Type%3A)
- [x] My changes are covered by tests"	1	True	2021-03-09 14:22:24	2021-03-19 05:11:22	2021-03-19 05:11:22
https://github.com/OpenMined/PySyft/pull/5266	['documentation ']	Add docstring coverage	"Add docstring coverage## Description
Documentation is a very importante point if we want to see `openmined` used by people. 
This PR adds a docstring coverage workflow where the PR will be:
* Accepted if the docstring coverage is higher or the same
* Denied if the docstring coverage is reduced

This PR is part of `docs_team`. If reviewers think this is nice. The same PR will be done in rest of `openmined` projects.

## Affected Dependencies
None

## How has this been tested?
I have tested adding a dummy `foo.py` with empty docstring, in this case the PR fails, when I delete this dummy file the workflow is ok.

## Checklist
- [x] I have followed the [Contribution Guidelines](https://github.com/OpenMined/.github/blob/master/CONTRIBUTING.md) and [Code of Conduct](https://github.com/OpenMined/.github/blob/master/CODE_OF_CONDUCT.md)
- [ ] I have commented my code following the [OpenMined Styleguide](https://github.com/OpenMined/.github/blob/master/STYLEGUIDE.md)
- [x] I have labeled this PR with the relevant [Type labels](https://github.com/OpenMined/.github/labels?q=Type%3A)
- [ ] My changes are covered by tests"	5	True	2021-03-07 19:38:33	2021-03-10 06:34:50	2021-03-10 06:34:50
https://github.com/OpenMined/PySyft/pull/5250	[]	Torch vision api's added	"Torch vision api's added## Description
Solves issue #5186 
Added list of datasets from https://pytorch.org/vision/stable/datasets.html
Added list of transforms from https://pytorch.org/vision/stable/transforms.html
## Affected Dependencies
None
## How has this been tested?
- Describe the tests that you ran to verify your changes.
- Provide instructions so we can reproduce.
- List any relevant details for your test configuration.

## Checklist
- [x] I have followed the [Contribution Guidelines](https://github.com/OpenMined/.github/blob/master/CONTRIBUTING.md) and [Code of Conduct](https://github.com/OpenMined/.github/blob/master/CODE_OF_CONDUCT.md)
- [x] I have commented my code following the [OpenMined Styleguide](https://github.com/OpenMined/.github/blob/master/STYLEGUIDE.md)
- [ ] I have labeled this PR with the relevant [Type labels](https://github.com/OpenMined/.github/labels?q=Type%3A)
- [x] My changes are covered by tests
Q and NITPICK: Could we leave this as simple ```torch``` or ```th```?Yes, I'll make the changeMoving this down a line looks like a mistake?Shouldnt we match the torchvision capabilities to the torchvision version? Occasionally there is more than 1 torchvision version for a torch version like 0.8.0 and 0.8.1 due to a bug fixes.It might be better to leave this in but commented out so that its easy to spot what needs to be done to fix it.
e.g.

```python
torchvision.transforms.functional.to_pil_image(a)
<PIL.Image.Image image mode=RGBA size=736x700 at 0x11599C908>
```
```
# allowlist[""torchvision.transforms.functional.to_pil_image""] = ""PIL.Image.Image""
```Yeah, I am not sure what caused it, I'll make the changeI tried comparing the Torchvision version but I was facing some issues, I'll re-check@madhavajay `torch.__version__` is commented in `torch/allowlist.py`. Any specific reason why? No reason at all, the functionality to make it work was only recently added so it must have just been forgotten.
```
>>> client.torch.__version__.get()
'1.7.1'
```I uncommented it and it works. üòä"	15	True	2021-03-04 07:05:16	2021-03-19 17:43:14	2021-03-19 06:31:01
https://github.com/OpenMined/PySyft/pull/5245	[]	fix #5208 handler serde error	"fix #5208 handler serde error## Description
lack of @bind_protobuf cause the error below when access duet.requests.hander.
```
TypeError: You tried to deserialize an unsupported type. This can be caused by several reasons. Either you are actively writing Syft code and forgot to create one, or you are trying to deserialize an object which was serialized using a different version of Syft and the object you tried to deserialize is not supported in this version.
```

in util.py:validate_field, ""if(object)"" gets False when ""object"" is an empty list and errors appear.
```
[CRITICAL][logger]][4080] Object <GetAllRequestHandlersResponseMessage: xxxx> has no handlers field set.

PySyft/src/syft/logger.py in traceback_and_raise(e, verbose)
     57     except BaseException as ex:
     58         logger.debug(""failed to print exception"", ex)
---> 59     raise e
     60 
     61 

TypeError: exceptions must derive from BaseException
```


## Affected Dependencies
None.

## How has this been tested?
```
duet.requests.handler
```

## Checklist
- [‚àö] I have followed the [Contribution Guidelines](https://github.com/OpenMined/.github/blob/master/CONTRIBUTING.md) and [Code of Conduct](https://github.com/OpenMined/.github/blob/master/CODE_OF_CONDUCT.md)
- [‚àö] I have commented my code following the [OpenMined Styleguide](https://github.com/OpenMined/.github/blob/master/STYLEGUIDE.md)
- [‚àö] I have labeled this PR with the relevant [Type labels](https://github.com/OpenMined/.github/labels?q=Type%3A)
- [‚àö] My changes are covered by tests"	1	True	2021-03-03 04:24:00	2021-03-04 13:09:20	2021-03-04 13:08:53
https://github.com/OpenMined/PySyft/pull/5228	[]	Added Slice object in syft	"Added Slice object in syft## Description
This PR adds a slice object to syft. It is related to [this issue](https://github.com/OpenMined/PySyft/issues/5082). 

## How has this been tested?
It hasn't been tested yet. I will add tests as soon as I get a review on this PR.

## Checklist
- [x] I have followed the [Contribution Guidelines](https://github.com/OpenMined/.github/blob/master/CONTRIBUTING.md) and [Code of Conduct](https://github.com/OpenMined/.github/blob/master/CODE_OF_CONDUCT.md)
- [x] I have commented my code following the [OpenMined Styleguide](https://github.com/OpenMined/.github/blob/master/STYLEGUIDE.md)
- [ ] I have labeled this PR with the relevant [Type labels](https://github.com/OpenMined/.github/labels?q=Type%3A)
- [x] My changes are covered by tests
Error:
```
src/syft/lib/python/slice.py:151:20: F632 use ==/!= to compare constant literals (str, bytes, int, float, tuple)
```

Change to 
`assert step != 0`I am not sure why you have used `NULL` instead of `None`. Any specific reason? If not replace it with `None` and that should solve following logs 
```
src/syft/lib/python/slice.py:38:21: F821 undefined name 'NULL'
            start = NULL
                    ^
src/syft/lib/python/slice.py:39:20: F821 undefined name 'NULL'
            stop = NULL
                   ^
src/syft/lib/python/slice.py:40:20: F821 undefined name 'NULL'
            step = NULL
```

and some more similar errors, have a lookI see an error because these are not used 
```
src/syft/lib/python/slice.py:23:1: F401 '.util.downcast' imported but unused
from .util import downcast
^
src/syft/lib/python/slice.py:24:1: F401 '.util.upcast' imported but unused
from .util import upcast
```I don't see getitem and iter on the slice Class. Am I missing something?Can't these just be normal `ints`?yes, that won't be a problem but i just thought if it might help with faster computationThe problem would be that we need to convert the ints into syft.lib.python.Ints then to protos and bytes, where as i'm sure the built in protobuf integer type is extremely fast and lightweight.Alright!I still get this error. They are present in the slice Class."	19	True	2021-02-28 12:12:51	2021-03-24 02:49:44	2021-03-24 02:34:37
https://github.com/OpenMined/PySyft/pull/5212	[]	Information Flow	"Information Flow## Description
Please include a summary of the change, the motivation, and any additional context that will help others understand your PR. If it closes one or more open issues, [please tag them as described here](https://help.github.com/en/github/managing-your-work-on-github/linking-a-pull-request-to-an-issue#linking-a-pull-request-to-an-issue-using-a-keyword).

## Affected Dependencies
List any dependencies that are required for this change.

## How has this been tested?
- Describe the tests that you ran to verify your changes.
- Provide instructions so we can reproduce.
- List any relevant details for your test configuration.

## Checklist
- [ ] I have followed the [Contribution Guidelines](https://github.com/OpenMined/.github/blob/master/CONTRIBUTING.md) and [Code of Conduct](https://github.com/OpenMined/.github/blob/master/CODE_OF_CONDUCT.md)
- [ ] I have commented my code following the [OpenMined Styleguide](https://github.com/OpenMined/.github/blob/master/STYLEGUIDE.md)
- [ ] I have labeled this PR with the relevant [Type labels](https://github.com/OpenMined/.github/labels?q=Type%3A)
- [ ] My changes are covered by tests"	1	True	2021-02-23 23:36:42	2021-03-06 16:06:19	2021-03-06 16:06:19
https://github.com/OpenMined/PySyft/pull/5209	[]	splitnn fix	"splitnn fix## Description
Cherry picked this PR: https://github.com/OpenMined/PySyft/pull/5205

## Affected Dependencies
None

## How has this been tested?
Jupyter 

## Checklist
- [x] I have followed the [Contribution Guidelines](https://github.com/OpenMined/.github/blob/master/CONTRIBUTING.md) and [Code of Conduct](https://github.com/OpenMined/.github/blob/master/CODE_OF_CONDUCT.md)
- [x] I have commented my code following the [OpenMined Styleguide](https://github.com/OpenMined/.github/blob/master/STYLEGUIDE.md)
- [x] I have labeled this PR with the relevant [Type labels](https://github.com/OpenMined/.github/labels?q=Type%3A)
- [x] My changes are covered by tests"	1	True	2021-02-23 07:30:06	2021-02-23 07:30:28	2021-02-23 07:30:28
https://github.com/OpenMined/PySyft/pull/5206	['bug ', 'priority: 2 - high :cold_sweat:', 'severity: 3 - medium :unamused:']	Fix/Update PyGrid User Messages	"Fix/Update PyGrid User Messages## Description
Fix/Update PyGrid User Messages due to the changes done on storable objects (add `@bind_protobuf` decorator)


## Checklist
- [X] I have followed the [Contribution Guidelines](https://github.com/OpenMined/.github/blob/master/CONTRIBUTING.md) and [Code of Conduct](https://github.com/OpenMined/.github/blob/master/CODE_OF_CONDUCT.md)
- [X] I have commented my code following the [OpenMined Styleguide](https://github.com/OpenMined/.github/blob/master/STYLEGUIDE.md)
- [X] I have labeled this PR with the relevant [Type labels](https://github.com/OpenMined/.github/labels?q=Type%3A)
- [ ] My changes are covered by tests"	1	True	2021-02-22 07:47:07	2021-02-25 02:37:06	2021-02-25 02:37:05
https://github.com/OpenMined/PySyft/pull/5153	[]	[WIP]Fixing issues which are highlighted by bandit	"[WIP]Fixing issues which are highlighted by bandit## Description
This PR is for #5149. I have removed the assertion code and used python inbuilt module secretes for random number generation. Could you review my work and suggest to me any changes to this, so that I can try to implement the same to fix other issues of bandit too.


## Affected Dependencies
List any dependencies that are required for this change.

## How has this been tested?
- Describe the tests that you ran to verify your changes.
- Provide instructions so we can reproduce.
- List any relevant details for your test configuration.

## Checklist
- [x] I have followed the [Contribution Guidelines](https://github.com/OpenMined/.github/blob/master/CONTRIBUTING.md) and [Code of Conduct](https://github.com/OpenMined/.github/blob/master/CODE_OF_CONDUCT.md)
- [x] I have commented my code following the [OpenMined Styleguide](https://github.com/OpenMined/.github/blob/master/STYLEGUIDE.md)
- [ ] I have labeled this PR with the relevant [Type labels](https://github.com/OpenMined/.github/labels?q=Type%3A)
- [ ] My changes are covered by tests"	2	True	2021-02-13 21:21:53	2021-02-19 07:38:29	2021-02-19 07:30:48
https://github.com/OpenMined/PySyft/pull/5125	[]	Issue 5075 - Investigate pytest warnings	"Issue 5075 - Investigate pytest warnings## Description
Please include a summary of the change, the motivation, and any additional context that will help others understand your PR. If it closes one or more open issues, [please tag them as described here](https://help.github.com/en/github/managing-your-work-on-github/linking-a-pull-request-to-an-issue#linking-a-pull-request-to-an-issue-using-a-keyword).

## Affected Dependencies
List any dependencies that are required for this change.

## How has this been tested?
- Describe the tests that you ran to verify your changes.
- Provide instructions so we can reproduce.
- List any relevant details for your test configuration.

## Checklist
- [x] I have followed the [Contribution Guidelines](https://github.com/OpenMined/.github/blob/master/CONTRIBUTING.md) and [Code of Conduct](https://github.com/OpenMined/.github/blob/master/CODE_OF_CONDUCT.md)
- [ ] I have commented my code following the [OpenMined Styleguide](https://github.com/OpenMined/.github/blob/master/STYLEGUIDE.md)
- [x] I have labeled this PR with the relevant [Type labels](https://github.com/OpenMined/.github/labels?q=Type%3A)
- [x] My changes are covered by tests

## Summary
This time I run: 

`pytest -m 'fast or slow' --no-cov -n auto`

as @madhavajay suggest, and was raised 4116 warnings, with this smalls changes that I made the warnings decreased to 24 warnings.

What I did was to change the direct casting using int(), for using the built-in function __int__().

I'll open issues for this 24 warnings that I couldn't solve.

Closes #5075"	1	True	2021-02-09 01:18:58	2021-02-11 07:12:45	2021-02-11 07:12:45
https://github.com/OpenMined/PySyft/pull/5119	[]	#5075 - Solve warnings on tests and open issues for the unsolved	"#5075 - Solve warnings on tests and open issues for the unsolved## Description
Please include a summary of the change, the motivation, and any additional context that will help others understand your PR. If it closes one or more open issues, [please tag them as described here](https://help.github.com/en/github/managing-your-work-on-github/linking-a-pull-request-to-an-issue#linking-a-pull-request-to-an-issue-using-a-keyword).

## Affected Dependencies
List any dependencies that are required for this change.

## How has this been tested?
- Describe the tests that you ran to verify your changes.
- Provide instructions so we can reproduce.
- List any relevant details for your test configuration.

## Checklist
- [x] I have followed the [Contribution Guidelines](https://github.com/OpenMined/.github/blob/master/CONTRIBUTING.md) and [Code of Conduct](https://github.com/OpenMined/.github/blob/master/CODE_OF_CONDUCT.md)
- [x] I have commented my code following the [OpenMined Styleguide](https://github.com/OpenMined/.github/blob/master/STYLEGUIDE.md)
- [ ] I have labeled this PR with the relevant [Type labels](https://github.com/OpenMined/.github/labels?q=Type%3A)
- [x] My changes are covered by tests

## Summary

Solved some warnings, decreasing from 29 to 23 warnings.
On the solutions, add async for tests that need and change the direct cast for float as float() to .__float()__
the reason for the float changes is that the ability to return an instance of a strict subclass of float is deprecated, and may be removed in a future version of Python.
For the unsolved warnings most of them is for the specific use of asyncio, so  I'll be opening issues for them."	1	True	2021-02-07 01:16:26	2021-02-08 05:03:20	2021-02-08 05:03:19
https://github.com/OpenMined/PySyft/pull/5110	[]	updated pre commits hooks version in .pre-commit	"updated pre commits hooks version in .pre-commit## Description
trying to solve  #5099 by updating packages 



## How has this been tested?
pytest -m fast -n auto comm


## Checklist
- [x] I have followed the [Contribution Guidelines](https://github.com/OpenMined/.github/blob/master/CONTRIBUTING.md) and [Code of Conduct](https://github.com/OpenMined/.github/blob/master/CODE_OF_CONDUCT.md)
- [x] I have commented my code following the [OpenMined Styleguide](https://github.com/OpenMined/.github/blob/master/STYLEGUIDE.md)
- [x] I have labeled this PR with the relevant [Type labels](https://github.com/OpenMined/.github/labels?q=Type%3A)
- [x] My changes are covered by tests"	1	True	2021-02-04 08:50:56	2021-02-05 14:35:00	2021-02-05 05:41:40
https://github.com/OpenMined/PySyft/pull/5095	[]	[wip] Add SyftTensor, FloatTensor, DataTensor, IntegerTensor	"[wip] Add SyftTensor, FloatTensor, DataTensor, IntegerTensor## Description
aims to implement #5046

## Checklist
- [x] I have followed the [Contribution Guidelines](https://github.com/OpenMined/.github/blob/master/CONTRIBUTING.md) and [Code of Conduct](https://github.com/OpenMined/.github/blob/master/CODE_OF_CONDUCT.md)
- [x] I have commented my code following the [OpenMined Styleguide](https://github.com/OpenMined/.github/blob/master/STYLEGUIDE.md)
- [ ] I have labeled this PR with the relevant [Type labels](https://github.com/OpenMined/.github/labels?q=Type%3A)
- [x] My changes are covered by tests
Would `callable` replace isfunc? Also is there any need to some how create a dynamic wrapper for @property or `getset_descriptor` attributes?updatedQ: Why not use?
```
if isinstance(self.child, (FloatTensor, IntegerTensor))
```
In that case there will be only 1 ```if``` statement

Also for the other cases as well.Q: @tudorcebere we should remove the ```syft_decorator```, right?Note that one comparison  is on `self.child`, the other is on `other`Sorry for not giving more information!

I meant this if and the next one.
``` 
if isinstance(self.child, FloatTensor) and isinstance(other, SyftTensor):
  return SyftTensor(child=self.child @ other.child)
if isinstance(self.child, IntegerTensor) and isinstance(other, SyftTensor):
  return SyftTensor(child=self.child @ other.child)
```

Changed to:
``` 
if isinstance(self.child, (FloatTensor, IntegerTensor)) and isinstance(other, SyftTensor):
  return SyftTensor(child=self.child @ other.child)
```

Don't forget about this :DTurns out this isn't possible due to Mypy, I get the error:
```
Both left and right operands are unions
```

I tried creating a Union type but isinstance can't work with ""Typing"" stuff. There could be a way around this but for now I think its okay.I removed all of these. üòä"	1	True	2021-02-02 15:25:31	2021-02-16 08:21:17	2021-02-16 08:21:17
https://github.com/OpenMined/PySyft/pull/4937	[]	Fix all warnings in syft_0.3.0 documentation - first partial implementation	"Fix all warnings in syft_0.3.0 documentation - first partial implementation##  Description 
- Partial fix for #4518
- Warnings due to formatting errors in docstring were fixed

## Affected Dependencies
- none

## How has this been tested?
- Fast tests were run: 1911 passed, 19444 deselected, 3 xfailed, 23 warnings
- Same outcome as on forked dev branch
- No additional tests added or required since only changes in comments

## Checklist
- [x] I have followed the [Contribution Guidelines](https://github.com/OpenMined/.github/blob/master/CONTRIBUTING.md) and [Code of Conduct](https://github.com/OpenMined/.github/blob/master/CODE_OF_CONDUCT.md)
- [x] I have commented my code following the [OpenMined Styleguide](https://github.com/OpenMined/.github/blob/master/STYLEGUIDE.md)
- [ ] I have labeled this PR with the relevant [Type labels](https://github.com/OpenMined/.github/labels?q=Type%3A)
- [ ] My changes are covered by tests"	2	True	2020-12-22 12:37:48	2021-01-22 06:03:36	2021-01-15 01:30:12
https://github.com/OpenMined/PySyft/pull/4926	[]	added location and locations printouts to remote and SMPC-encrypted nn.Module	"added location and locations printouts to remote and SMPC-encrypted nn.Module## Description
This adds a new `__str__()` function to `torch.nn.Module` which adds a location printout to every shared model. In the case of an SMPC-encrypted model it outputs all the different locations. Should serve as a small convenience function.

## Affected Dependencies
None.

## How has this been tested?
- Tested the output of normal tensors, a remote tensor, a SMPC-encrypted tensor, a normal nn.Module, a nn.Module with FixedPrecisionTensor weights, a remote nn.Module and an SMPC-encrypted nn.Module.

## Checklist
- [x] I have followed the [Contribution Guidelines](https://github.com/OpenMined/.github/blob/master/CONTRIBUTING.md) and [Code of Conduct](https://github.com/OpenMined/.github/blob/master/CODE_OF_CONDUCT.md)
- [x] I have commented my code following the [OpenMined Styleguide](https://github.com/OpenMined/.github/blob/master/STYLEGUIDE.md)
- [ ] I have labeled this PR with the relevant [Type labels](https://github.com/OpenMined/.github/labels?q=Type%3A)
- [x] My changes are covered by tests"	2	True	2020-12-17 17:52:29	2020-12-18 08:05:04	2020-12-18 08:04:38
https://github.com/OpenMined/PySyft/pull/4905	[]	add github benchmark-actions support	"add github benchmark-actions support## Description
this PR fixed #4654 

## Affected Dependencies
pytest-benchmark

## How has this been tested?
tested on local though need review for .yml :)

## Checklist
- [ ] I have followed the [Contribution Guidelines](https://github.com/OpenMined/.github/blob/master/CONTRIBUTING.md) and [Code of Conduct](https://github.com/OpenMined/.github/blob/master/CODE_OF_CONDUCT.md)
- [ ] I have commented my code following the [OpenMined Styleguide](https://github.com/OpenMined/.github/blob/master/STYLEGUIDE.md)
- [ ] I have labeled this PR with the relevant [Type labels](https://github.com/OpenMined/.github/labels?q=Type%3A)
- [ ] My changes are covered by tests"	1	True	2020-12-12 09:12:11	2020-12-13 05:19:26	2020-12-13 05:19:26
https://github.com/OpenMined/PySyft/pull/4882	[]	Len and Iter final touch	"Len and Iter final touch## Description
A followup PR that presents the bug on the store.

## Affected Dependencies
List any dependencies that are required for this change.

## How has this been tested?
- Describe the tests that you ran to verify your changes.
- Provide instructions so we can reproduce.
- List any relevant details for your test configuration.

"	1	True	2020-12-01 13:41:22	2020-12-02 12:05:51	2020-12-02 12:05:50
https://github.com/OpenMined/PySyft/pull/4877	['bug ']	Fix issue with logging bool being backwards	"Fix issue with logging bool being backwards## Description
- Fix issue with logging bool being backwards
- Added some comments and included in MNIST to expose to users

## Affected Dependencies
None

## How has this been tested?
Jupyter Notebooks

## Checklist
- [x] I have followed the [Contribution Guidelines](https://github.com/OpenMined/.github/blob/master/CONTRIBUTING.md) and [Code of Conduct](https://github.com/OpenMined/.github/blob/master/CODE_OF_CONDUCT.md)
- [x] I have commented my code following the [OpenMined Styleguide](https://github.com/OpenMined/.github/blob/master/STYLEGUIDE.md)
- [x] I have labeled this PR with the relevant [Type labels](https://github.com/OpenMined/.github/labels?q=Type%3A)
- [ ] My changes are covered by tests"	1	True	2020-12-01 03:21:10	2020-12-02 03:56:20	2020-12-02 03:56:20
https://github.com/OpenMined/PySyft/pull/4838	[]	Fixed PyPI README by adding the complete URL 	"Fixed PyPI README by adding the complete URL ## Description
fixes #4833"	2	True	2020-11-21 05:18:53	2020-11-24 05:54:17	2020-11-24 05:54:17
https://github.com/OpenMined/PySyft/pull/4801	[]	debug pointer.svd (OpenMined#4616)	"debug pointer.svd (OpenMined#4616)## Description
Fixes #4616
When execute `pointer_tensor.svd()`, it returns 4 pointers, while what is expected is 3. And the 3rd one points to nothing. That's issue #4616.
I found that the reason is that there is bug in function `def de_register_obj()`. This function has a line `if hasattr(obj, ""id"")`, which is useless when `obj` is of type TorchTensor. Why it is useless is because a TorchTensor object always has `id` property, as you can see in it's definition. So I change the condition to be checking `has_attr = hasattr(obj, ""_id"") if isinstance(obj, torch.Tensor) else hasattr(obj, ""id"")`.
And why this bug is the key to #4616? Because `hasattr(obj,""id"")` will run `obj.id()`. And in `obj.id()`, an `id` will be created for obj. And that `id` created is the 3rd poiner, which points to nothing.

## Affected Dependencies
List any dependencies that are required for this change.

## How has this been tested?
- Add a test unit `test_remote_svd`

## Checklist
- [x] I have followed the [Contribution Guidelines](https://github.com/OpenMined/.github/blob/master/CONTRIBUTING.md) and [Code of Conduct](https://github.com/OpenMined/.github/blob/master/CODE_OF_CONDUCT.md)
- [x] I have commented my code following the [OpenMined Styleguide](https://github.com/OpenMined/.github/blob/master/STYLEGUIDE.md)
- [x] I have labeled this PR with the relevant [Type labels](https://github.com/OpenMined/.github/labels?q=Type%3A)
- [x] My changes are covered by tests"	1	True	2020-11-10 07:58:00	2020-11-16 09:09:45	2020-11-16 09:09:45
https://github.com/OpenMined/PySyft/pull/4781	[]	Fix the h5py version	"Fix the h5py version## Description
It seems that 5 days ago a [new version of h5py](https://github.com/h5py/h5py/releases) was released.
The test was failing at the following line.
```
if '/' in name:
```
with the error:
```
TypeError: a bytes-like object is required, not 'str'
```

The problem was that ""name"" is a bytes values.
This simply pins the version to the previous one.

## Affected Dependencies
H5Py -  Pythonic interface to the HDF5 binary data format

## How has this been tested?
- The failing tutorial test should pass

## Checklist
- [x] I have followed the [Contribution Guidelines](https://github.com/OpenMined/.github/blob/master/CONTRIBUTING.md) and [Code of Conduct](https://github.com/OpenMined/.github/blob/master/CODE_OF_CONDUCT.md)
- [x] I have commented my code following the [OpenMined Styleguide](https://github.com/OpenMined/.github/blob/master/STYLEGUIDE.md)
- [x] I have labeled this PR with the relevant [Type labels](https://github.com/OpenMined/.github/labels?q=Type%3A)
- [x] My changes are covered by tests"	1	True	2020-11-04 17:38:35	2020-11-05 07:45:57	2020-11-05 07:45:57
https://github.com/OpenMined/PySyft/pull/4773	[]	Add .ndim and .T to Tensor (OpenMined#4617)	"Add .ndim and .T to Tensor (OpenMined#4617)## Description
Fixes #4617 
Add .ndim and .T functionality to FixPrecisionTensor and PointerTensor.

## Affected Dependencies
List any dependencies that are required for this change.

## How has this been tested?
- test units

## Checklist
- [ ] I have followed the [Contribution Guidelines](https://github.com/OpenMined/.github/blob/master/CONTRIBUTING.md) and [Code of Conduct](https://github.com/OpenMined/.github/blob/master/CODE_OF_CONDUCT.md)
- [ ] I have commented my code following the [OpenMined Styleguide](https://github.com/OpenMined/.github/blob/master/STYLEGUIDE.md)
- [ ] I have labeled this PR with the relevant [Type labels](https://github.com/OpenMined/.github/labels?q=Type%3A)
- [ ] My changes are covered by tests
Test the value for transposeHere the same, test ""y"" not the shape of ydone in a new commit, by testing `x.fix_prec().T==x.T.fix_prec()`done in a new commit, by testing `bob_xT.get()==x.T` and `bob_x.get()==x`"	2	True	2020-11-04 07:07:49	2020-11-08 22:26:51	2020-11-08 22:26:51
https://github.com/OpenMined/PySyft/pull/4752	[]	fix comparison between FPT and AST	"fix comparison between FPT and AST## Description
this PR fixes #4705 
comparison function of additive_share.py is modified.

## Affected Dependencies
none

## How has this been tested?
- test cases are added

## Checklist
- [x] I have followed the [Contribution Guidelines](https://github.com/OpenMined/.github/blob/master/CONTRIBUTING.md) and [Code of Conduct](https://github.com/OpenMined/.github/blob/master/CODE_OF_CONDUCT.md)
- [x] I have commented my code following the [OpenMined Styleguide](https://github.com/OpenMined/.github/blob/master/STYLEGUIDE.md)
- [x] I have labeled this PR with the relevant [Type labels](https://github.com/OpenMined/.github/labels?q=Type%3A)
- [x] My changes are covered by tests
Q: Could you move those to another test function? (because this function would be called 2 times - one with protocol = ""fss"" and once with protocol ""snn""). You can also parameterize that function with only ""fss""Done"	1	True	2020-11-01 16:14:26	2020-11-05 13:00:01	2020-11-05 12:59:50
https://github.com/OpenMined/PySyft/pull/4714	[]	Fix Flake8 C408 Error	"Fix Flake8 C408 Error## Description
C408 causes the test to fail in the current CI test. I solved this problem.

## Affected Dependencies
List any dependencies that are required for this change.

## How has this been tested?
- Describe the tests that you ran to verify your changes.
- Provide instructions so we can reproduce.
- List any relevant details for your test configuration.

## Checklist
- [x] I have followed the [Contribution Guidelines](https://github.com/OpenMined/.github/blob/master/CONTRIBUTING.md) and [Code of Conduct](https://github.com/OpenMined/.github/blob/master/CODE_OF_CONDUCT.md)
- [x] I have commented my code following the [OpenMined Styleguide](https://github.com/OpenMined/.github/blob/master/STYLEGUIDE.md)
- [x] I have labeled this PR with the relevant [Type labels](https://github.com/OpenMined/.github/labels?q=Type%3A)
- [x] My changes are covered by tests"	1	True	2020-10-26 12:01:29	2020-10-26 13:48:42	2020-10-26 13:31:40
https://github.com/OpenMined/PySyft/pull/4700	[]	Primitive support: Int, Float, List, Bool	"Primitive support: Int, Float, List, Bool## Description

Tons of changes, finished Int, Float, List, Bool. Pushing now to unblock other people.

To go: Dict, String, Complex. Currently commented out the String changes, as they are failling and in unittest format.
"	1	True	2020-10-23 13:45:29	2020-10-23 19:46:04	2020-10-23 19:46:04
https://github.com/OpenMined/PySyft/pull/4655	[]	changed all asset to if/raise to prevent disable of assert during PYTHONOPTIMISE env	"changed all asset to if/raise to prevent disable of assert during PYTHONOPTIMISE env## Description
Changed all assert blocks to if/raise block. This is important as assert checks can be globally disabled with the -O and -OO flags, as well as the PYTHONOPTIMIZE env var. This PR is against an open issue, [Don't use `assert` for non-debugging data validation](https://github.com/OpenMined/PySyft/issues/3480) 

## Affected Dependencies
For now, commented out the assert blocks and wherever error statement wasn't present, added an error statement based on understanding I could make of it 

## How has this been tested?
- ran the standard `python setup.py test`, which was a success
Q: Could you thorw dirrectly?
```raise RuntimeError(f""Number of results found {len(results}}. Expected 1"")Q: Also hereQ: Could we have 2 ```if``` statements here? one for the input and one for the weightQ: Could you specify here given inputs are not supported for ```nb_channels_in``` - the same for the ones bellowQ: Could you specify here that ```weight```, not ```input```Q: Also here, specify ```nb_channels_in``` (not the value, but the name of the variable)Q: Also hereQ: given tensor shapeQ: Could you rewrite this with an
```if not (padding == 0 and ceil_mode...) <--- it shows that we support only one settingQ: Why not use f-string?sure"	5	True	2020-10-16 04:09:42	2020-10-20 13:14:41	2020-10-20 13:14:41
https://github.com/OpenMined/PySyft/pull/4653	[]	Add remote share for RST	"Add remote share for RST## Description
Add the possiblity to serialize/deserialize the RST

## Affected Dependencies
List any dependencies that are required for this change.

## How has this been tested?
- Added a test to validate the changes

## Checklist
- [x] I have followed the [Contribution Guidelines](https://github.com/OpenMined/.github/blob/master/CONTRIBUTING.md) and [Code of Conduct](https://github.com/OpenMined/.github/blob/master/CODE_OF_CONDUCT.md)
- [x] I have commented my code following the [OpenMined Styleguide](https://github.com/OpenMined/.github/blob/master/STYLEGUIDE.md)
- [x] I have labeled this PR with the relevant [Type labels](https://github.com/OpenMined/.github/labels?q=Type%3A)
- [x] My changes are covered by testsTODO: After [this](https://github.com/OpenMined/syft-proto/pull/1450) gets merged replace itdon't forget the tag & description params (like for AST)I wonder if all shares should not always have the same `garbage_collect_data` ?
If so, you can put the assert all equal test on all the shares attributes```suggestion
        Gradient makes no sense for Replicated Shared Tensor, so we make it clear
        that if someone query .grad on a Replicated Shared Tensor it doesn't error
``````suggestion
        """"""Calling backward on Replicated Shared Tensor doesn't make sense, but sometimes a call
        can be propagated downward the chain to an RST (for example in create_grad_objects), so
```Alternatively you can maybe import AdditiveSharingTensor and just copy the method?
`grad = AdditiveSharingTensor.grad` ?```suggestion
    def simplify(worker: AbstractWorker, tensor: ""ReplicatedSharingTensor"") -> tuple:
        """"""
        This function takes the attributes of a ReplicatedSharingTensor and saves them in a tuple
        Args:
            tensor (ReplicatedSharingTensor): a ReplicatedSharingTensor
        Returns:
            tuple: a tuple holding the unique attributes of the replicated shared tensor
``````suggestion
    def detail(worker: AbstractWorker, tensor_tuple: tuple) -> ""ReplicatedSharingTensor"":
        """"""
            This function reconstructs a ReplicatedSharingTensor given it's attributes in
        form of a tuple.
        Args:
            worker: the worker doing the deserialization
            tensor_tuple: a tuple holding the attributes of the ReplicatedSharingTensor
        Returns:
            ReplicatedSharingTensor: a ReplicatedSharingTensor
```:+1:Hmmm...I am inclined to keep them separated such that each RST is not coupled with the AST (even if the RST is an AST behind)I can put for all the shares to have the same garbage collect data :DDonemay be --> doesn't throw an error also the line ""returns grad and can't be set"" doesn't make much sense Copy pasted it from Additive Sharing Tensor. Fixed it now :D (also in AST)```suggestion
        not throw an error
```Why is copy() needed, I thought copy() wasn't an inplace op?Docstring should only be at the begining of a functionwhy do you set `gc` and not `.garbage_collect_data` ?```suggestion
        not throw an error
```Add `worker`Can you also test call .share before .send if it works? (otherwise just leave it as a TODO)Hmm...isn't it tested at line 275? (I send a pointer and call share on it?)At one point when I send the same ```share[i]``` to 2 workers and it messes up with the garbage collection :\ (from my understanding this is because only one of the pointers should control the garbage collection - but sending it to two workers it means that one has the ```gc``` flag ```on``` and the one ```off```)

With the ```copy``` I make sure there are no changes in the process generated by the ```send``` methodThis is because ```share``` is a wrapper.
And in the ```native``` we have:
```
@gc.setter
def gc(self, flag):
     self.garbage_collection = flag
...
@garbage_collection.setter
def garbage_collection(self, flag):
      if not self.has_child():
          if hasattr(self, ""ptr"") and self.ptr is not None:
              self.child = self.ptr
      self.child.garbage_collect_data = flag
```
Basically we would do. ```share.child.garbage_collect_data = flag```Removed :DAh ok that's nice! Thanks :) I was saying call .share() and then call .send()Ok this is weird indeed!"	2	True	2020-10-14 23:12:53	2020-11-11 07:03:09	2020-11-11 07:03:09
https://github.com/OpenMined/PySyft/pull/4640	[]	Updated simplify and detail for dflclient	"Updated simplify and detail for dflclient## Description
Corrected DataCentricFLClient serialization. the method, the previous method has bugs and didn't serialise it correctly.
More specifically running the below code raises an error and connection breaks but the method in this PR will solves that
```
x = torch.tensor([1,2,3,4,5]) 
x = x.send(bob) 
x = x.share(bob,alice)
```
This comes after testing and discussion from @IonesioJunior and me.

## Affected Dependencies
List any dependencies that are required for this change.


## Checklist
- [x] I have followed the [Contribution Guidelines](https://github.com/OpenMined/.github/blob/master/CONTRIBUTING.md) and [Code of Conduct](https://github.com/OpenMined/.github/blob/master/CODE_OF_CONDUCT.md)
- [x] I have commented my code following the [OpenMined Styleguide](https://github.com/OpenMined/.github/blob/master/STYLEGUIDE.md)
- [x] I have labeled this PR with the relevant [Type labels](https://github.com/OpenMined/.github/labels?q=Type%3A)
- [ ] My changes are covered by tests"	1	True	2020-10-12 15:32:05	2020-10-13 03:03:35	2020-10-13 03:03:35
https://github.com/OpenMined/PySyft/pull/4612	[]	Bandit fix	"Bandit fix## Description
Fixes failing security check on 0.0.0.0 interface binding in demo network.py

## Affected Dependencies
None

## How has this been tested?
Locally

## Checklist
- [x] I have followed the [Contribution Guidelines](https://github.com/OpenMined/.github/blob/master/CONTRIBUTING.md) and [Code of Conduct](https://github.com/OpenMined/.github/blob/master/CODE_OF_CONDUCT.md)
- [x] I have commented my code following the [OpenMined Styleguide](https://github.com/OpenMined/.github/blob/master/STYLEGUIDE.md)
- [x] I have labeled this PR with the relevant [Type labels](https://github.com/OpenMined/.github/labels?q=Type%3A)
- [ ] My changes are covered by tests"	1	True	2020-09-27 15:17:07	2020-09-27 16:52:17	2020-09-27 16:52:14
https://github.com/OpenMined/PySyft/pull/4539	[]	Add a new tutorial	"Add a new tutorial## Description
This is a new tutorial and provides appropriate changes to make it run

## Affected Dependencies
List any dependencies that are required for this change.

## How has this been tested?
- Describe the tests that you ran to verify your changes.
- Provide instructions so we can reproduce.
- List any relevant details for your test configuration.

## Checklist
- [ ] I have followed the [Contribution Guidelines](https://github.com/OpenMined/.github/blob/master/CONTRIBUTING.md) and [Code of Conduct](https://github.com/OpenMined/.github/blob/master/CODE_OF_CONDUCT.md)
- [ ] I have commented my code following the [OpenMined Styleguide](https://github.com/OpenMined/.github/blob/master/STYLEGUIDE.md)
- [ ] I have labeled this PR with the relevant [Type labels](https://github.com/OpenMined/.github/labels?q=Type%3A)
- [ ] My changes are covered by tests
NITPICK: I know it should not matter in computational speed, but could we use ```{...}``` for ```set```MAYBE: Keep another variable, ```protocol_lower``` and do only once ```protocol_lower = protocol.lower()```MAYBE: We have this in ```precision.py```
```
def reciprocal(self, method=""NR"", nr_iters=10):

Args:
             method:
             'NR' : `Newton-Raphson`_ method computes the reciprocal using iterations
                     of :math:`x_{i+1} = (2x_i - self * x_i^2)` and uses
                     :math:`3*exp(-(x-.5)) + 0.003` as an initial guess by default
         
             nr_iters:
                 Number of iterations for `Newton-Raphson`
         Returns:
             Reciprocal of `self`
         """"""
 
         if method.lower() == ""nr"":
             new_self = self.modulus()
             result = 3 * (0.5 - new_self).exp() + 0.003
             for i in range(nr_iters):
                 result = 2 * result - result * result * new_self
             return result * self.signum()
```

Are the results better/computed faster if you use this?Interesting, I should compare!
But the key the fast computtaion here is caching the result, for batchnorm at inference that's always the inverse you're trying to do :) <ul><li>Where a shared input [[x]] is applied on a public function --&gt; I think it should be the other way around</li><li>alpha is called a random mask (when I hear mask I always tend to consider it like an ""index-value"" selector)? - maybe a random number?</li><li>x = y + 1 shouldn't continue on the previous line?</li><li>[[f_alpha]]_j (maybe specify that j is in {0, 1}) or explicitly specify [[f_alpha]]_0 and [[f_alpha]]_1 (also, thinking of it, those function shares, can be owned by some other workers, right?)</li><li>Maybe: moving the ""function shares [[f_alpha]] is also shared between Alice and Bob"" where you give the example</li></ul>
<br/>

 _Reply via <a href='https://app.reviewnb.com/OpenMined/PySyft/pull/4539/discussion/'>ReviewNB</a>_ <div id='ReviewNBCommentContext-DoNotDelete' style='display:none' data-state='OPEN' data-cellIndex='1'/><p>Q: Should we add a comment why we do <code></code><code>torch.set_num_threads(1)</code><code></code></p>
<br/>

 _Reply via <a href='https://app.reviewnb.com/OpenMined/PySyft/pull/4539/discussion/'>ReviewNB</a>_ <div id='ReviewNBCommentContext-DoNotDelete' style='display:none' data-state='RESOLVED' data-cellIndex='3'/><p>TYPO: Wan't --? Do you want? or simply Want?</p>
<br/>

 _Reply via <a href='https://app.reviewnb.com/OpenMined/PySyft/pull/4539/discussion/'>ReviewNB</a>_ <div id='ReviewNBCommentContext-DoNotDelete' style='display:none' data-state='RESOLVED' data-cellIndex='7'/><p>TYPO: here --&gt; from here</p>
<br/>

 _Reply via <a href='https://app.reviewnb.com/OpenMined/PySyft/pull/4539/discussion/'>ReviewNB</a>_ <div id='ReviewNBCommentContext-DoNotDelete' style='display:none' data-state='RESOLVED' data-cellIndex='10'/><p>TYPO: consecuting -&gt; consecutive?</p>
<br/>

 _Reply via <a href='https://app.reviewnb.com/OpenMined/PySyft/pull/4539/discussion/'>ReviewNB</a>_ <div id='ReviewNBCommentContext-DoNotDelete' style='display:none' data-state='RESOLVED' data-cellIndex='11'/><p>Q: This seems counter-intuitive? right?</p>
<br/>

 _Reply via <a href='https://app.reviewnb.com/OpenMined/PySyft/pull/4539/discussion/'>ReviewNB</a>_ <div id='ReviewNBCommentContext-DoNotDelete' style='display:none' data-state='RESOLVED' data-cellIndex='14'/><p>TYPO: the data and the model would already be located on the workers</p>
<br/>

 _Reply via <a href='https://app.reviewnb.com/OpenMined/PySyft/pull/4539/discussion/'>ReviewNB</a>_ <div id='ReviewNBCommentContext-DoNotDelete' style='display:none' data-state='RESOLVED' data-cellIndex='15'/><p>Q: Maybe it is worth to show how encrypted_data and encrypted_model look?</p>
<br/>

 _Reply via <a href='https://app.reviewnb.com/OpenMined/PySyft/pull/4539/discussion/'>ReviewNB</a>_ <div id='ReviewNBCommentContext-DoNotDelete' style='display:none' data-state='OPEN' data-cellIndex='21'/><p>Q: Do you want to leave the path from your computer?</p>
<br/>

 _Reply via <a href='https://app.reviewnb.com/OpenMined/PySyft/pull/4539/discussion/'>ReviewNB</a>_ <div id='ReviewNBCommentContext-DoNotDelete' style='display:none' data-state='OPEN' data-cellIndex='23'/><p>TYPO: I might be wrong. one by tab -&gt; one per tab</p><p>There is also a ModelCentricFLClient (if you change the model_owner with that...it might still work?) &lt;-- I think it gives a better representation on what client has what data</p>
<br/>

 _Reply via <a href='https://app.reviewnb.com/OpenMined/PySyft/pull/4539/discussion/'>ReviewNB</a>_ <div id='ReviewNBCommentContext-DoNotDelete' style='display:none' data-state='OPEN' data-cellIndex='27'/><p>I think we should remove the errors</p>
<br/>

 _Reply via <a href='https://app.reviewnb.com/OpenMined/PySyft/pull/4539/discussion/'>ReviewNB</a>_ <div id='ReviewNBCommentContext-DoNotDelete' style='display:none' data-state='RESOLVED' data-cellIndex='1'/><p>I think we should remove the errors</p>
<br/>

 _Reply via <a href='https://app.reviewnb.com/OpenMined/PySyft/pull/4539/discussion/'>ReviewNB</a>_ <div id='ReviewNBCommentContext-DoNotDelete' style='display:none' data-state='RESOLVED' data-cellIndex='1'/>Sure!<p>Thx!</p><p>Thx!</p><p>thx!</p><p>Ok I will expand a bit on it</p><p>Thx!</p><p>I didn't want to explain in depth fixed precision and secret sharing for people who just want to ""encrypt"" (and don't want to read section 1), so I didn't want to both by printing the stuff</p><p>Lol yeah that's a good point! Not sure if I can remove the warning though</p><p>Isn't the ModelCentricFLClient really different fomr the DataCentric? It used to be the StaticFL worker right?</p><p>I sh*t this file should go away</p><p>I sh*t this file should go away</p><p>OK I 've tried to improve!</p><p> </p><ul><li>Where a shared input [[x]] is applied on a public function --&gt; I think it should be the other way around. --&gt; I wouldn keep this for secureNN because they both to the same ""public"" protocol to evaluate the function, and have a secret shared input</li></ul><p> </p>Hmmm..I am not sure @cereallarceny might know more :DHmm...you can delete the message (manually) or what I did for Crypten tutorials was to simply edit the path and add ""intentionally_changed_path"" (or something like this :D)Might be worth checking the following:
* if changing the initial guess gives better results? (like the difference between the logits would be smaller)
* if removing the ```if...else``` changes the speed -- sometimes computers do this ```branch prediction``` thing.
CPUs are using a pipeline for fetching data/fetching instructions/etc and they might run code before it needed to be run (predict that you might take the ""if"" or ""else"" branch). If the prediction is correct you get ""full speed"" ahead, but the problem comes in when that prediction is bad, in which case they need to evict all the results from the pipeline (and if this is the case) it might introduce some latency.

I do not know all the ""internals"" of python to know what it does with the ```if....else```, but it might be worth a shot removing the ```if...else``` and check if it speeds things up

**PS**: Sorry for the long post OK I'll do it!Integrated :) 
I'll keep the if else statement for the moment because this function isn't called so many times
I could improve the initiatal guess indeed for my method, i'll investigate this separateely I thinkYes, ModelCentricFLClient is related with static FLThanks! :)"	4	True	2020-09-07 20:57:25	2020-09-11 16:37:58	2020-09-11 16:37:54
https://github.com/OpenMined/PySyft/pull/4469	[]	Fix syft-proto version	"Fix syft-proto version## Description
Keep track of the syft-proto version and not the commit.


## How has this been tested?
- There are no error messages when sending stuff to workers.

## Checklist
- [X] I have followed the [Contribution Guidelines](https://github.com/OpenMined/.github/blob/master/CONTRIBUTING.md) and [Code of Conduct](https://github.com/OpenMined/.github/blob/master/CODE_OF_CONDUCT.md)
- [X] I have commented my code following the [OpenMined Styleguide](https://github.com/OpenMined/.github/blob/master/STYLEGUIDE.md)
- [X] I have labeled this PR with the relevant [Type labels](https://github.com/OpenMined/.github/labels?q=Type%3A)
- [X] My changes are covered by tests"	1	True	2020-08-24 15:12:03	2020-08-24 21:18:35	2020-08-24 21:18:35
https://github.com/OpenMined/PySyft/pull/4465	[]	Add benchmark graph and script for tanh function approximation methods	"Add benchmark graph and script for tanh function approximation methods## Description
Following https://github.com/OpenMined/PySyft/pull/4031, this PR includes:

- Scripts for plotting benchmark graph for tanh function approximations.
- Benchmark graph as suggested in issue https://github.com/OpenMined/PySyft/issues/3999

Closes: https://github.com/OpenMined/PySyft/issues/3999

## How has this been tested?
- Same as https://github.com/OpenMined/PySyft/pull/4031, no tests are including for benchmarking.

## Checklist
- [x] I have followed the [Contribution Guidelines](https://github.com/OpenMined/.github/blob/master/CONTRIBUTING.md) and [Code of Conduct](https://github.com/OpenMined/.github/blob/master/CODE_OF_CONDUCT.md)
- [x] I have commented my code following the [OpenMined Styleguide](https://github.com/OpenMined/.github/blob/master/STYLEGUIDE.md)
- [x] I have labeled this PR with the relevant [Type labels](https://github.com/OpenMined/.github/labels?q=Type%3A)
- [x] My changes are covered by tests

```suggestion
data format: list[('method_name', precision value),]
```Incorrect doc-strings :stuck_out_tongue: Ah! You're right! Fixed this now.Ok :) changed."	5	True	2020-08-23 16:39:21	2020-08-24 10:55:30	2020-08-24 10:55:30
https://github.com/OpenMined/PySyft/pull/4065	[]	Added support for negative numbers in reciprocal method #4048	"Added support for negative numbers in reciprocal method #4048## Description
This PR fixes #4048
Added support for negative numbers when use different methods in Reciprocal.
Uses a signum function to achieve this
Suggestions are welcome! 

## Affected Dependencies
- None

## How has this been tested?
-  No additional tests are needed. Changed the default value in test_reciprocal(): function to include negative numbers too
-  Ran pytest test/torch/tensors/test_precision.py without issue
## Checklist
- [x] I have followed the [Contribution Guidelines](https://github.com/OpenMined/.github/blob/master/CONTRIBUTING.md) and [Code of Conduct](https://github.com/OpenMined/.github/blob/master/CODE_OF_CONDUCT.md)
- [x] I have commented my code following the [OpenMined Styleguide](https://github.com/OpenMined/.github/blob/master/STYLEGUIDE.md)
- [x] I have labeled this PR with the relevant [Type labels](https://github.com/OpenMined/.github/labels?q=Type%3A)
- [ ] My changes are covered by tests
In general, `NR` is much faster than `division`. Is there a reason for changing this? :smile: 
This part duplicates many parts with `NR`. Can you remove this duplication? üòé Yes will do that!! 
https://github.com/OpenMined/PySyft/issues/4036#issuecomment-675880294...  I saw this and made a change. I think now keeping it as NR should not be a problem.```suggestion
        sgn = (self > 0) - (self < 0)
```

Seems a lot more intuitive, straightforward this way to me```suggestion
        """"""
```
You don't need this unless you are using special notations/math in the docstrings```suggestion
        """"""
```

Here too:heart: agreed! lesser code this wayokay!okay"	3	True	2020-08-22 13:44:20	2020-08-23 10:50:12	2020-08-23 10:50:12
https://github.com/OpenMined/PySyft/pull/4064	[]	Added scripts, graphs for benchmarking AST operations	"Added scripts, graphs for benchmarking AST operations## Description
Scripts and Graphs are added for benchmarking AST operation based on two currently available protocols (fss, snn).
currently added scripts and graphs are added for:-

- [x] share_get

- [x] max_pool2d

- [x] avg_pool2d

- [x] batch_norm

Improvement suggestions are welcomed :) 

This PR Partially fixes #4000 

## Affected Dependencies
None

## How has this been tested?
- This addition doest requires an additional test but an average of 10 timestamps have been computed to get an accurate result.
- Benchmark graphs may be different for different system specifications on which the scripts are run though they should show a similar trend. 
## Checklist
- [x] I have followed the [Contribution Guidelines](https://github.com/OpenMined/.github/blob/master/CONTRIBUTING.md) and [Code of Conduct](https://github.com/OpenMined/.github/blob/master/CODE_OF_CONDUCT.md)
- [x] I have commented my code following the [OpenMined Styleguide](https://github.com/OpenMined/.github/blob/master/STYLEGUIDE.md)
- [x] I have labeled this PR with the relevant [Type labels](https://github.com/OpenMined/.github/labels?q=Type%3A)
- [x] My changes are covered by tests"	6	True	2020-08-22 10:56:20	2020-08-25 12:14:00	2020-08-25 12:13:59
https://github.com/OpenMined/PySyft/pull/4038	[]	Pointer docs	"Pointer docs## Description
Adding documentation and syft decorator on pointers in syft 0.3.0.Q: Can't we add this at the top? or dependency resolution conflict?let's include the actual .request_access() method name here. Possibly with an exxample code snippet!... ""for more information on how subclasses of pointer are automatically generated..., please see <ast module discussing automatic generation... probably st.klass>""

This notion that ""this Pointer class is never directly use but is subclassed"" should probably be added to the story at the top.let's include an example code snippet here.It's a circular dependency issue at the moment - but it should hopefully be a fixable one.PR welcome - but be wared - here be dragons"	1	True	2020-08-18 22:18:28	2020-08-20 18:10:58	2020-08-20 18:10:58
https://github.com/OpenMined/PySyft/pull/4035	[]	FIX Return invalid dtype when MPC is applied	"FIX Return invalid dtype when MPC is applied## Description
**Issue:**
this was the original issue #3982  raised there was a mismatch in dtype after using the share()

![](https://user-images.githubusercontent.com/39186433/89849067-a9f89380-dbc2-11ea-84aa-6bf791a46b78.png)

**Reason:**
The create_wrapper class which was used to create the wrapper was returning tensor with a dtype torch.float32.

**Fix**
sending the `type=self.dtype` as a parameter in `shared_tensor.wrap()` from the `share()` solves the issue.
`wrap()` function calls another function `sy.framework.hook.create_wrapper(type, **kwargs)` which is appended below
![Screenshot 2020-08-20 at 4 42 36 PM](https://user-images.githubusercontent.com/28955148/90763352-2ba79a00-e304-11ea-93df-132d956a6fd4.png)
in `create_wrapper(cls, wrapper_type)` function if wrapper_type is None we get` torch.Tensor()` in return which is by default of dtype `torch.float32` (which is our issue). This was easily fixed by sending the dtype from the `share()` fucntion which ultimatly reaches to` create_wrapper(cls, wrapper_type)` and sets the dtype.


This pull request closes #3982

## Affected Dependencies
None

## How has this been tested?
one new test case has been added in` test_share_get()` function of the `test_additive_shared.py` file.

## Checklist
- [x] I have followed the [Contribution Guidelines](https://github.com/OpenMined/.github/blob/master/CONTRIBUTING.md) and [Code of Conduct](https://github.com/OpenMined/.github/blob/master/CODE_OF_CONDUCT.md)
- [x] I have commented my code following the [OpenMined Styleguide](https://github.com/OpenMined/.github/blob/master/STYLEGUIDE.md)
- [x] I have labeled this PR with the relevant [Type labels](https://github.com/OpenMined/.github/labels?q=Type%3A)
- [x] My changes are covered by tests"	1	True	2020-08-18 12:19:03	2020-08-22 05:34:34	2020-08-22 05:34:34
https://github.com/OpenMined/PySyft/pull/4031	[]	Add Benchmark Graph, Scripts for Sigmoid Approx. Methods	"Add Benchmark Graph, Scripts for Sigmoid Approx. Methods## Description

- Added scripts for plotting benchmark graph for sigmoid function approximations.
- Added a benchmark graph as suggested in issue #3998 
- Added files for organizing all the benchmark data in the same file.
This pull request closes #3998 

## Affected Dependencies
matplotlib

## How has this been tested?
- This issue does not require a test script although the average of the 10 iterations has to taken to get the best benchmarks.

## Checklist
- [x] I have followed the [Contribution Guidelines](https://github.com/OpenMined/.github/blob/master/CONTRIBUTING.md) and [Code of Conduct](https://github.com/OpenMined/.github/blob/master/CODE_OF_CONDUCT.md)
- [x] I have commented my code following the [OpenMined Styleguide](https://github.com/OpenMined/.github/blob/master/STYLEGUIDE.md)
- [x] I have labeled this PR with the relevant [Type labels](https://github.com/OpenMined/.github/labels?q=Type%3A)
- [x] My changes are covered by tests
I think all these need to be rewritten as literals, since the [tests are failing](https://github.com/OpenMined/PySyft/pull/4031/checks?check_run_id=994680515).  Are you using the [pre-commit package](https://github.com/OpenMined/PySyft/blob/master/CONTRIBUTING.md#setting-up-pre-commit-hook)?done! Thanks :)Could you also add the time? (probably it is in ms)
Like: ```Execution Time (ms)```> Could you also add the time? (probably it is in ms)
> Like: `Execution Time (ms)`

Sure :)"	7	True	2020-08-17 17:05:25	2020-08-22 10:33:06	2020-08-19 19:50:53
https://github.com/OpenMined/PySyft/pull/4021	[]	Fast FixedPrecisonTensor Reciprocal Method (150x faster)	"Fast FixedPrecisonTensor Reciprocal Method (150x faster)## Description

issue: https://github.com/OpenMined/PySyft/issues/3993

We can use reciprocal 150 times faster on average. Implementing division of AST with reciprocal can make existing very slow division much faster. In addition, many slow operations can be made very quickly.

This implementation referred to the implementation of CrypTen.

https://github.com/facebookresearch/CrypTen/blob/3c4e53aa4910117e4e136691cb09ea7a7e001029/crypten/mpc/mpc.py#L1029

```python
x = torch.tensor([1., 2., 3.]).fix_prec().share(bob, alice, crypto_provider=theo)

# Existing method (using division)
x.reciprocal().get().float_prec() # 27 seconds
# tensor([1.0000, 0.5000, 0.3330])

# New Method (using NR)
x.reciprocal(method=""nr"").get().float_prec() # 0.18 seconds
# tensor([1.0000, 0.5000, 0.3330])

# New Method (using LOG) / Approximation
x.reciprocal(method=""log"").get().float_prec() # 0.31 seconds
#  tensor([1.0000, 0.4650, 0.3530])
```

## Affected Dependencies
List any dependencies that are required for this change.

## How has this been tested?
- Describe the tests that you ran to verify your changes.
- Provide instructions so we can reproduce.
- List any relevant details for your test configuration.

## Checklist
- [x] I have followed the [Contribution Guidelines](https://github.com/OpenMined/.github/blob/master/CONTRIBUTING.md) and [Code of Conduct](https://github.com/OpenMined/.github/blob/master/CODE_OF_CONDUCT.md)
- [x] I have commented my code following the [OpenMined Styleguide](https://github.com/OpenMined/.github/blob/master/STYLEGUIDE.md)
- [x] I have labeled this PR with the relevant [Type labels](https://github.com/OpenMined/.github/labels?q=Type%3A)
- [x] My changes are covered by tests
MAYBE: Use 
```
tensor = torch.tensor([1.0, 2.0, 3.0])
x = tensor.fix_prec()

result = x.reciprocal().float_prec()
assert (result == tensor.reciprocal()).all()
```Because the torch tensor uses the Floating Point, the original method of using division also has an error. That's why you can't use this method. üòÑ 

```python
tensor = torch.tensor([1.0, 2.0, 3.0])
x = tensor.fix_prec()

result = x.reciprocal().float_prec()
assert (result == tensor.reciprocal()).all() # -> tensor([True, True, False])
# tensor([1.0000, 0.5000, 0.3333]) == tensor([1.0000, 0.5000, 0.3333]) == 
```
Ahh...don't use equal, use: [```torch.isclose```](https://pytorch.org/docs/stable/generated/torch.isclose.html)I applied this change request and added a docstring üòÑ"	10	True	2020-08-15 16:09:10	2020-08-18 07:57:19	2020-08-18 07:29:01
https://github.com/OpenMined/PySyft/pull/4020	['bug ', 'priority: 2 - high :cold_sweat:', 'status: review needed :raising_hand:', 'severity: 2 - high :cold_sweat:', 'status: in progress :star2:', 'status: investigating :mag:']	Grid clients serialisation correction	"Grid clients serialisation correction## Description
Register `DataCentricFLClient` in serde for serialization.

## Affected Dependencies
`DataCentricFLClient` cannot be serialised currently, as it's not registered in serde.
which causes error while doing SMPC as sharing of tensor raises the error during serialization.
Code : 
`x = torch.tensor([1,2,3,4,5])
x = x.send(bob)
x = x.share(bob,alice)`

Error:
```
---------------------------------------------------------------------------
TypeError                                 Traceback (most recent call last)
<ipython-input-3-66c2dc1e8ea9> in <module>
      3 
      4 x = x.send(bob)
----> 5 x = x.share(bob,alice)

~/anaconda3/envs/pysyft/lib/python3.8/site-packages/syft/frameworks/torch/tensors/interpreters/native.py in share(self, protocol, field, dtype, crypto_provider, requires_grad, no_wrap, *owners)
    916                 {""requires_grad"": requires_grad} if isinstance(chain, syft.PointerTensor) else {}
    917             )
--> 918             shared_tensor = chain.share(
    919                 *owners,
    920                 protocol=protocol,

~/anaconda3/envs/pysyft/lib/python3.8/site-packages/syft/generic/pointers/pointer_tensor.py in share(self, *args, **kwargs)
    382             raise RuntimeError(""Error, share must have > 1 arguments all of type syft.workers"")
    383 
--> 384         response = self.owner.send_command(self.location, ""share"", self, args, kwargs)
    385         return response
    386 

~/anaconda3/envs/pysyft/lib/python3.8/site-packages/syft/workers/base.py in send_command(self, recipient, cmd_name, target, args_, kwargs_, return_ids, return_value)
    514                 cmd_name, target, args_, kwargs_, return_ids, return_value
    515             )
--> 516             ret_val = self.send_msg(message, location=recipient)
    517         except ResponseSignatureError as e:
    518             ret_val = None

~/anaconda3/envs/pysyft/lib/python3.8/site-packages/syft/workers/base.py in send_msg(self, message, location)
    312 
    313         # Step 1: serialize the message to a binary
--> 314         bin_message = sy.serde.serialize(message, worker=self)
    315 
    316         # Step 2: send the message and wait for a response

~/anaconda3/envs/pysyft/lib/python3.8/site-packages/syft/serde/serde.py in serialize(obj, worker, simplified, force_full_simplification, strategy)
     43         strategy = serialize
     44 
---> 45     return strategy(obj, worker, simplified, force_full_simplification)
     46 
     47 

~/anaconda3/envs/pysyft/lib/python3.8/site-packages/syft/serde/msgpack/serde.py in serialize(obj, worker, simplified, force_full_simplification)
    335 
    336     simple_objects = _serialize_msgpack_simple(obj, worker, simplified, force_full_simplification)
--> 337     return _serialize_msgpack_binary(simple_objects)
    338 
    339 

~/anaconda3/envs/pysyft/lib/python3.8/site-packages/syft/serde/msgpack/serde.py in _serialize_msgpack_binary(simple_objects, worker, simplified, force_full_simplification)
    289     # 2) Serialize
    290     # serialize into a binary
--> 291     binary = msgpack_lib.dumps(simple_objects)
    292 
    293     # 3) Compress

~/anaconda3/envs/pysyft/lib/python3.8/site-packages/msgpack/__init__.py in packb(o, **kwargs)
     33     See :class:`Packer` for options.
     34     """"""
---> 35     return Packer(**kwargs).pack(o)
     36 
     37 

msgpack/_packer.pyx in msgpack._cmsgpack.Packer.pack()

msgpack/_packer.pyx in msgpack._cmsgpack.Packer.pack()

msgpack/_packer.pyx in msgpack._cmsgpack.Packer.pack()

msgpack/_packer.pyx in msgpack._cmsgpack.Packer._pack()

msgpack/_packer.pyx in msgpack._cmsgpack.Packer._pack()

msgpack/_packer.pyx in msgpack._cmsgpack.Packer._pack()

msgpack/_packer.pyx in msgpack._cmsgpack.Packer._pack()

msgpack/_packer.pyx in msgpack._cmsgpack.Packer._pack()

msgpack/_packer.pyx in msgpack._cmsgpack.Packer._pack()

msgpack/_packer.pyx in msgpack._cmsgpack.Packer._pack()

TypeError: can not serialize 'DataCentricFLClient' object
```








Q: This is ok?this was not changed by me,  actually, i only changed two files, probably some error while I rebased my PySyft repo, I changed serde.py and grid.clients.datacentric files I will update this.Q: Shouldn't we have a ```syft-proto``` for this?Q: if we reach here doesn't mean we already are hooked?yup we have created but I am not sure how to access that hook from here, also creating a new one should not raise any issue. I will add the code in syft-proto, but for now, this would work also it's easier to use this function if add any new class which need to be serialised, we don't need to wait fr adding it to syft-proto. Could you create an issue in ```PySyft``` with good first issue regarding this.I think you can access it from the worker.The problem is that `detail` is called by a gridnode on the simplified objects it receives over the network from client(so we don't have control from client side over the behaviour of the function.). 
and you cant pass the hook to it, (unless I serialise the hook instance in `simplify ` function which we will mean we are essentially sending hook over the network which is not required. okayand it's a class method which takes simplified input as arguments.It can't be accessed using ```syft.local_worker.hook```?@Nilanshrajput I think that @gmuraru is right. Please make this modification before merging.got it, updatedMAYBE: uncomment thisyup,i commented while local testing forgot to remove it"	11	True	2020-08-15 09:11:28	2020-08-20 20:14:33	2020-08-20 20:14:33
https://github.com/OpenMined/PySyft/pull/3990	[]	Remote addition using pointers on Duet	"Remote addition using pointers on Duet## Description
In this PR - I have finished the serde requirements (and fixed a few bugs) necessary to perform remote addition on a duet node."	2	True	2020-08-11 22:24:40	2020-08-12 16:53:49	2020-08-11 22:32:37
https://github.com/OpenMined/PySyft/pull/3989	[]	tensor.send(duet) and ptr.get() both work with duet (with tests)	"tensor.send(duet) and ptr.get() both work with duet (with tests)## Description
In this PR I fixed a small bug which was preventing .get() serde to work correctly.
"	1	True	2020-08-11 19:48:52	2020-08-11 21:50:43	2020-08-11 20:09:51
https://github.com/OpenMined/PySyft/pull/3960	[]	Overload mod operator for the fixed precision tensor	"Overload mod operator for the fixed precision tensorAs pointed out in https://github.com/OpenMined/PySyft/issues/3958 modular operations over fixed precision tensors are broken. This PR overloads the mod operation over fixed precision tensors in [`syft/frameworks/torch/tensors/interpreters/precision.py`](https://github.com/arturomf94/PySyft/blob/d75a2ba0d4542faf1e5d019c00a9d77868f4d723/syft/frameworks/torch/tensors/interpreters/precision.py#L76) and adds a corresponding test in [`test/torch/tensors/test_precision.py`](https://github.com/arturomf94/PySyft/blob/d75a2ba0d4542faf1e5d019c00a9d77868f4d723/test/torch/tensors/test_precision.py#L40)

Closes: https://github.com/OpenMined/PySyft/issues/3958would you just change ""other"" to ""devisor"" for readabilityis there a reason why you decided to copy the object and not modify the self.child directly and return self? I expect that this modification will break the same functionality if the devisor was another FPT or torch.Tensor
please test the case of 
x = torch.tensor([1, 2, 3]).fix_prec()
y =  torch.tensor([3]).fix_prec()
z= (x%y).float_prec()
assert (z == torch.tensor([1.0, 2.0, 0.0])).all()
That's a good shout. Will add that test too. For inmutability of `x` in `x % y`. Would you say it's best to return `x`?I've added a test for this now.calling a function on a tensor is supposed to modify the child without explicitly mentioning it, for instance, ""result %= divisor"" should do the same, and it's more readable. no, it would be better to init a new instance :) Agree. I'll change that. Actually, `result %= divisor` ends up being an infinite recursion. So I left it as it was: working with the `.child`. If there's a better way to avoid the recursion without referencing the child please let me know.hmm.. makes sense, let's keep it that way Q: Can we do it with how we have the ```add```, ```sub``` operator?
Use @overloaded.methodQ: Could you also add tests if the operators are ```AST``` and ```FPT```?I tried this, but the tests fail and I don't know how to do a mod operation where AST is the dividend and FTP the divisor... Does this work when both the dividend and the divisor are ASTs?I think `%` doesn't even work for AST and scalars! For instance, consider the following: 

```python
x = torch.tensor([1, 2, 3]).share(bob, alice, crypto_provider=james)
(x % 3).get() 
```

This turns out to be `tensor([1, 2, 3])`, which is not right üòï ‚ùó ‚ùì

In fact, it's inconsistent: sometimes I get something like `tensor([4, 2, 3])`. What does this mean? üò± Lol - never mind. I forgot to use fixed precision I think...I saw the tests [here](https://github.com/OpenMined/PySyft/blob/aafa70d096acf22d7754da8b7b0037f74d12313a/test/torch/tensors/test_additive_shared.py#L1045) for the mod operation on ASTs and tried to replicate it somehow. Let me know what you think."	1	True	2020-08-08 01:04:08	2020-08-11 15:18:14	2020-08-11 13:55:48
https://github.com/OpenMined/PySyft/pull/3959	['bug ', 'improvement ']	Update PyGrid URLs and cleanup Model-Centric notebooks a bit	"Update PyGrid URLs and cleanup Model-Centric notebooks a bit## Description
PyGrid model-centric API URLs were updated from `model_centric` to `model-centric`.
This PR makes the change to FL client.
Also URLs are fixed in Model-centric notebooks and they made more up-to-date (e.g. pygrid gateway -> pygrid node).

## Affected Dependencies
n/a

## How has this been tested?
Executed model-centric notebooks with the latest PyGrid.

## Checklist
- [x] I have followed the [Contribution Guidelines](https://github.com/OpenMined/.github/blob/master/CONTRIBUTING.md) and [Code of Conduct](https://github.com/OpenMined/.github/blob/master/CODE_OF_CONDUCT.md)
- [x] I have commented my code following the [OpenMined Styleguide](https://github.com/OpenMined/.github/blob/master/STYLEGUIDE.md)
- [x] I have labeled this PR with the relevant [Type labels](https://github.com/OpenMined/.github/labels?q=Type%3A)
- [ ] My changes are covered by tests"	2	True	2020-08-07 11:11:15	2020-08-07 18:50:27	2020-08-07 18:50:15
https://github.com/OpenMined/PySyft/pull/3955	[]	The `__repr__` on the `Network` class must return a `repr_str`	"The `__repr__` on the `Network` class must return a `repr_str`## Description

The `__repr__` method only generated a string and did not return it. I fixed it üòÑ 

Thank You!

## Affected Dependencies
List any dependencies that are required for this change.

## How has this been tested?
- Describe the tests that you ran to verify your changes.
- Provide instructions so we can reproduce.
- List any relevant details for your test configuration.

## Checklist
- [x] I have followed the [Contribution Guidelines](https://github.com/OpenMined/.github/blob/master/CONTRIBUTING.md) and [Code of Conduct](https://github.com/OpenMined/.github/blob/master/CODE_OF_CONDUCT.md)
- [x] I have commented my code following the [OpenMined Styleguide](https://github.com/OpenMined/.github/blob/master/STYLEGUIDE.md)
- [x] I have labeled this PR with the relevant [Type labels](https://github.com/OpenMined/.github/labels?q=Type%3A)
- [x] My changes are covered by tests"	1	True	2020-08-06 16:05:06	2020-08-07 14:01:19	2020-08-07 12:38:09
https://github.com/OpenMined/PySyft/pull/3945	[]	quick fixes on types	"quick fixes on typesBug fix. Bug causes code to fail to initialize a node as it doesn't find the ""self.id"" property.
Also, some address types inclusion.

## Affected Dependencies
List any dependencies that are required for this change.

## How has this been tested?
- Describe the tests that you ran to verify your changes.
- Provide instructions so we can reproduce.
- List any relevant details for your test configuration.

## Checklist
- [ ] I have followed the [Contribution Guidelines](https://github.com/OpenMined/.github/blob/master/CONTRIBUTING.md) and [Code of Conduct](https://github.com/OpenMined/.github/blob/master/CODE_OF_CONDUCT.md)
- [ ] I have commented my code following the [OpenMined Styleguide](https://github.com/OpenMined/.github/blob/master/STYLEGUIDE.md)
- [ ] I have labeled this PR with the relevant [Type labels](https://github.com/OpenMined/.github/labels?q=Type%3A)
- [ ] My changes are covered by tests"	1	True	2020-08-05 14:50:19	2020-08-05 15:06:10	2020-08-05 15:06:10
https://github.com/OpenMined/PySyft/pull/3941	[]	black src; black tests	black src; black testsFix linting errors.	1	True	2020-08-05 13:55:07	2020-08-05 13:55:32	2020-08-05 13:55:28
https://github.com/OpenMined/PySyft/pull/3904	[]	fix for copy	"fix for copy## Description
This is a partial solution for #3845. I was able to reproduce the issue for `copy` using: 
```
import torch
import torch.nn as nn
import syft as sy

hook = sy.TorchHook(torch)
bob = sy.VirtualWorker(hook, id=""bob"")

model = nn.Linear(2, 1)
model_ptr = model.send(bob)
model_copy_ptr = model_ptr.copy()
```
The suggested fix solves it. 

However, I was not been able to reproduce the error for calling `clone()` on pointer.  It seems like a different bug. 
## Affected Dependencies
For this fix to work `import torch` is required in pointer_tensor.py

## How has this been tested?
There is not much testing required. I checked the above code works and nothing else in the library is broken. 

## Checklist
- [x] I have followed the [Contribution Guidelines](https://github.com/OpenMined/.github/blob/master/CONTRIBUTING.md) and [Code of Conduct](https://github.com/OpenMined/.github/blob/master/CODE_OF_CONDUCT.md)
- [x] I have commented my code following the [OpenMined Styleguide](https://github.com/OpenMined/.github/blob/master/STYLEGUIDE.md)
- [x] I have labeled this PR with the relevant [Type labels](https://github.com/OpenMined/.github/labels?q=Type%3A)
- [x] My changes are covered by tests
```suggestion
    model_bob.get()
    pred_remote = model_bob_copy(data_bob)
    pred_remote = pred_remote.get()
```The suggested change introduces an error. I investigated and this is what I think is happening: 
1) There is no straightforward way to copy a model in torch. 
2) Upon trying to copy a model in syft, under the hood you actually call clone. 
3) The difference is that (from the code): Clone should keep ids unchanged, contrary to copy.
4) Therefore we are actually creating two pointers to the same location. Once we ""get"" the object, it releases the other pointer as well.
5) Tensor on the other hand, do allow copy(). This code will work as expected:   
```
t = torch.tensor([3, 1.0, 2])
p1 = t.send(alice)
p2 = p1.copy()
p1.get()
p2.get()
```
6) In the example from 5 If we replace the `copy()` with `clone()` the same error will occur since p2 will have the same id as p1."	3	True	2020-07-27 23:39:34	2020-07-29 12:10:32	2020-07-29 12:10:31
https://github.com/OpenMined/PySyft/pull/3894	[]	Crypten Merge to Master	"Crypten Merge to Master## Description
Merge the CrypTen branch into Master
**THIS WILL DROP SUPPORT FOR PYTHON3.6**

## Affected Dependencies
List any dependencies that are required for this change.

## How has this been tested?
 - Unit tests for CrypTen

## Checklist
- [x] I have followed the [Contribution Guidelines](https://github.com/OpenMined/.github/blob/master/CONTRIBUTING.md) and [Code of Conduct](https://github.com/OpenMined/.github/blob/master/CODE_OF_CONDUCT.md)
- [x] I have commented my code following the [OpenMined Styleguide](https://github.com/OpenMined/.github/blob/master/STYLEGUIDE.md)
- [x] I have labeled this PR with the relevant [Type labels](https://github.com/OpenMined/.github/labels?q=Type%3A)
- [x] My changes are covered by tests
can we add a version?Can you fix a commit maybe?AddedSorry I meant should we add a commit number for the crypten master branch?
Ahh..sorry - meant to comment to the dill"	2	True	2020-07-23 12:30:12	2020-07-26 21:14:58	2020-07-26 21:14:53
https://github.com/OpenMined/PySyft/pull/3860	[]	test: Add RNN Plan example	"test: Add RNN Plan example## Description
I created a language model in a Plan. I was trying to mix the Creating a Plan tutorial and a word based language model from https://github.com/pytorch/examples/tree/master/word_language_model

This was tricky to get working because:
* I wanted to make it work like in the PyTorch Word Language Model example, using 3D tensors (sequence length x batch size x dims) but PySyft's autograd features did not work well with 3D tensors. Many classes assume that tensors are 2D when doing transpose e.g. `MatmulBackward`, `SumBackward`, `TBackward`.
* So I gave up on using 3D tensors and decided to only use the final result from the RNN (and not each output in the sequence). `GRU` from syft/frameworks/torch/nn/rnn.py won't work in a Plan because it uses `torch.sigmoid(z)` and maybe also because of chunking. Instead I made a custom GRU class that does `z.sigmoid()`.
  * I had other issues with PySyft's `rnn.py` in `_init_hidden` (making assumptions on the type of the input) and `_apply_time_step` (uses `stack` which seems like autograd doesn't support).
* Values were getting set to `None` by low-level PySyft operations.  E.g. `param.grad` was `None` after backprop. Sometimes this is expected like when using `nn.Embedding` but usually this was because of a bug somewhere. It was really hard to track these down. It seems like many operations in PySyft default to setting the result to `None` when something unexpected happen. This made something later error.
  * (corrected in another PR) Another example of this was `output += bias` (PyTorch's functional.py) was changing output to `None` when output and bias were `AutogradTensor`s.

## Affected Dependencies
(only required for translating the Plan to Tensorflow.js) An unreleased version of 3p0 with my translations for `select` and `__rsub__` is required to translate the Plan to Tensorflow.js. The example is lenient and will not fail if these translations are missing.

## How has this been tested?
I ran the file I submitted with pytest.

## Checklist
- [x] I have followed the [Contribution Guidelines](https://github.com/OpenMined/.github/blob/master/CONTRIBUTING.md) and [Code of Conduct](https://github.com/OpenMined/.github/blob/master/CODE_OF_CONDUCT.md)
- [x] I have commented my code following the [OpenMined Styleguide](https://github.com/OpenMined/.github/blob/master/STYLEGUIDE.md)
- [x] I have labeled this PR with the relevant [Type labels](https://github.com/OpenMined/.github/labels?q=Type%3A)
- [x] My changes are covered by tests"	4	True	2020-07-15 03:22:57	2020-07-24 19:07:28	2020-07-24 19:06:23
https://github.com/OpenMined/PySyft/pull/3850	[]	Fix wording in Part 2 notebook	"Fix wording in Part 2 notebook## Description
Please include a summary of the change, the motivation, and any additionl context that will help others understand your PR. If it closes one or more open issues, [please tag them as described here](https://help.github.com/en/github/managing-your-work-on-github/linking-a-pull-request-to-an-issue#linking-a-pull-request-to-an-issue-using-a-keyword).

## Affected Dependencies
List any dependencies that are required for this change.

## How has this been tested?
- Describe the tests that you ran to verify your changes.
- Provide instructions so we can reproduce.
- List any relevant details for your test configuration.

## Checklist
- [ ] I have followed the [Contribution Guidelines](https://github.com/OpenMined/.github/blob/master/CONTRIBUTING.md) and [Code of Conduct](https://github.com/OpenMined/.github/blob/master/CODE_OF_CONDUCT.md)
- [ ] I have commented my code following the [OpenMined Styleguide](https://github.com/OpenMined/.github/blob/master/STYLEGUIDE.md)
- [ ] I have labeled this PR with the relevant [Type labels](https://github.com/OpenMined/.github/labels?q=Type%3A)
- [ ] My changes are covered by tests"	1	True	2020-07-10 13:32:31	2020-07-10 13:39:52	2020-07-10 13:39:48
https://github.com/OpenMined/PySyft/pull/3843	[]	New Fixes CrypTen branch	"New Fixes CrypTen branch## Description
Add the BCELoss (used in the benchmarks) and delete the plan at the end of the CrypTen computation.

## Affected Dependencies
List any dependencies that are required for this change.

## How has this been tested?
- Describe the tests that you ran to verify your changes.
- Provide instructions so we can reproduce.
- List any relevant details for your test configuration.

## Checklist
- [x] I have followed the [Contribution Guidelines](https://github.com/OpenMined/.github/blob/master/CONTRIBUTING.md) and [Code of Conduct](https://github.com/OpenMined/.github/blob/master/CODE_OF_CONDUCT.md)
- [x] I have commented my code following the [OpenMined Styleguide](https://github.com/OpenMined/.github/blob/master/STYLEGUIDE.md)
- [x] I have labeled this PR with the relevant [Type labels](https://github.com/OpenMined/.github/labels?q=Type%3A)
- [x] My changes are covered by tests"	2	True	2020-07-09 16:27:32	2020-07-13 04:20:42	2020-07-13 04:20:42
https://github.com/OpenMined/PySyft/pull/3842	['documentation ']	Update Static FL Notebooks	"Update Static FL Notebooks## Description


Update static fl notebooks to match with recent changes on PyGrid.

Also:

- fixed speed test method for upload/download
- fixed authentication method

## Affected Dependencies
List any dependencies that are required for this change.

## How has this been tested?
- running notebooks w/ pygrid

## Checklist
- [x] I have followed the [Contribution Guidelines](https://github.com/OpenMined/.github/blob/master/CONTRIBUTING.md) and [Code of Conduct](https://github.com/OpenMined/.github/blob/master/CODE_OF_CONDUCT.md)
- [x] I have commented my code following the [OpenMined Styleguide](https://github.com/OpenMined/.github/blob/master/STYLEGUIDE.md)
- [x] I have labeled this PR with the relevant [Type labels](https://github.com/OpenMined/.github/labels?q=Type%3A)
- [x] My changes are covered by tests"	2	True	2020-07-09 16:13:03	2020-07-10 13:20:53	2020-07-10 13:20:41
https://github.com/OpenMined/PySyft/pull/3822	[]	CrypTen Plan Inference 	"CrypTen Plan Inference ## Description
Demo on how to run inference on data that is not found on the local machine + the model is not known.

## Attention
This PR must be merged after [this one](https://github.com/OpenMined/PySyft/pull/3817) and [this one](https://github.com/OpenMined/PySyft/pull/3692)


## Checklist
- [x] I have followed the [Contribution Guidelines](https://github.com/OpenMined/.github/blob/master/CONTRIBUTING.md) and [Code of Conduct](https://github.com/OpenMined/.github/blob/master/CODE_OF_CONDUCT.md)
- [x] I have commented my code following the [OpenMined Styleguide](https://github.com/OpenMined/.github/blob/master/STYLEGUIDE.md)
- [x] I have labeled this PR with the relevant [Type labels](https://github.com/OpenMined/.github/labels?q=Type%3A)
- [x] My changes are covered by tests
<p>typo: ""... The workers that know ...""</p>
<br/>

 _Reply via <a href='https://app.reviewnb.com/OpenMined/PySyft/pull/3822/discussion/'>ReviewNB</a>_ <div id='ReviewNBCommentContext-DoNotDelete' style='display:none' data-state='OPEN' data-cellIndex='0'/><p>typo: ""...3001..."" an additional zero in the bash command and in the description</p>
<br/>

 _Reply via <a href='https://app.reviewnb.com/OpenMined/PySyft/pull/3822/discussion/'>ReviewNB</a>_ <div id='ReviewNBCommentContext-DoNotDelete' style='display:none' data-state='OPEN' data-cellIndex='1'/><p>typo ""... where each worker has a subset of the features we need for the training...""</p>
<br/>

 _Reply via <a href='https://app.reviewnb.com/OpenMined/PySyft/pull/3822/discussion/'>ReviewNB</a>_ <div id='ReviewNBCommentContext-DoNotDelete' style='display:none' data-state='OPEN' data-cellIndex='0'/><p>port 30001 -&gt; 3001</p>
<br/>

 _Reply via <a href='https://app.reviewnb.com/OpenMined/PySyft/pull/3822/discussion/'>ReviewNB</a>_ <div id='ReviewNBCommentContext-DoNotDelete' style='display:none' data-state='OPEN' data-cellIndex='2'/>DoneDone"	2	True	2020-07-05 23:06:18	2020-07-08 18:50:00	2020-07-08 18:50:00
https://github.com/OpenMined/PySyft/pull/3821	[]	Quick Fix CrypTen Demo Jails	"Quick Fix CrypTen Demo Jails## Description
Small fix needed because of this [PR](https://github.com/facebookresearch/CrypTen/pull/121)


## Checklist
- [x] I have followed the [Contribution Guidelines](https://github.com/OpenMined/.github/blob/master/CONTRIBUTING.md) and [Code of Conduct](https://github.com/OpenMined/.github/blob/master/CODE_OF_CONDUCT.md)
- [x] I have commented my code following the [OpenMined Styleguide](https://github.com/OpenMined/.github/blob/master/STYLEGUIDE.md)
- [x] I have labeled this PR with the relevant [Type labels](https://github.com/OpenMined/.github/labels?q=Type%3A)
- [x] My changes are covered by tests"	5	True	2020-07-05 20:01:23	2020-07-07 06:55:33	2020-07-07 06:55:33
https://github.com/OpenMined/PySyft/pull/3817	[]	Use OnnxModels for private inference	"Use OnnxModels for private inference## Description
Define and use ```OnnxModels``` serialized models.
The parties know the model architecture and one of the parties has data that should be run through the model.
The local party does not have any idea about the architecture or the data.

The local party would only receive the result for the inference step.


## Affected Dependencies
List any dependencies that are required for this change.

## How has this been tested?
- Added test to check the functionality

## Checklist
- [x] I have followed the [Contribution Guidelines](https://github.com/OpenMined/.github/blob/master/CONTRIBUTING.md) and [Code of Conduct](https://github.com/OpenMined/.github/blob/master/CODE_OF_CONDUCT.md)
- [x] I have commented my code following the [OpenMined Styleguide](https://github.com/OpenMined/.github/blob/master/STYLEGUIDE.md)
- [x] I have labeled this PR with the relevant [Type labels](https://github.com/OpenMined/.github/labels?q=Type%3A)
- [x] My changes are covered by tests
This needs to be merged first.
```OnnxModel``` has protobuf + serde support.Test ProtobufTest MsgPackShouldn't we also store the model's weights as discussed in #3776 ?Merged to syft-proto you can update the requirement to master :) ```suggestion
    This method should disappear once CrypTen has support to load models
``````suggestion
    WARNING: All the workers that are part of the CrypTen computation
```Should this TODO info be at this place in the code?```suggestion
    This model will be known by a single party and when the party will call
    the crypten.load function it will deserialize the model to a PyTorch one
    and share it with the other parties.

    In this scenario, the worker that started the computation will not know about the
    instrinsics of the architecture and *only one* worker can have knowledge about the
    model
``````suggestion
from syft.frameworks.crypten import utils
from syft.generic.pointers.object_pointer import ObjectPointer
from syft.generic.abstract.sendable import AbstractSendable
from syft.workers.abstract import AbstractWorker
from syft.workers.base import BaseWorker
```The model here compared to the previous test could be private (ie hidden) to the local worker?
If so you can add a line to explain the difference with the previous test!Based on our discussion, I will create another PR for doing that -- will link it to #3776 when doing thatI think it is best to be in the ```OnnxModel.py``` file. Moving it.v0.4.10 of syft proto has been released with ONNX supportDone -- waiting for testsDone"	2	True	2020-07-04 20:04:20	2020-07-07 12:10:17	2020-07-07 12:10:17
https://github.com/OpenMined/PySyft/pull/3807	['bug ']	Fix issues in handle_func_command in syft tensors	"Fix issues in handle_func_command in syft tensors## Description
This cleans code in handle_func_command and fix bugs due to variable overwriting for syft tensors, and to overloading functions in native.py

PICKY Stuff: Here the comment should be removed, right? Since we look for ```native_{cmd}```haha no it's good to be picky. here the module `native_torch` defined in native.py overwrites native torch functions... Yeah it's a bit strange, I really had to modify a torch function (aka torch.roll) to behave slightly differently"	3	True	2020-07-01 12:05:57	2020-07-14 08:47:59	2020-07-07 21:57:51
https://github.com/OpenMined/PySyft/pull/3803	[]	Add linter/bandit and tests stubs	"Add linter/bandit and tests stubs## Description
- [x] Add tests stubs
- [x] Add linter and bandit as blockers
- [x] Add ```@final``` decorator to classes that should not be inherited anymore

## Affected Dependencies
List any dependencies that are required for this change.

## How has this been tested?
- Describe the tests that you ran to verify your changes.
- Provide instructions so we can reproduce.
- List any relevant details for your test configuration.

## Checklist
- [x] I have followed the [Contribution Guidelines](https://github.com/OpenMined/.github/blob/master/CONTRIBUTING.md) and [Code of Conduct](https://github.com/OpenMined/.github/blob/master/CODE_OF_CONDUCT.md)
- [x] I have commented my code following the [OpenMined Styleguide](https://github.com/OpenMined/.github/blob/master/STYLEGUIDE.md)
- [x] I have labeled this PR with the relevant [Type labels](https://github.com/OpenMined/.github/labels?q=Type%3A)
- [x] My changes are covered by tests
@iamtrask @tudorcebere what do you think?
This says that this class should not be inherited anymore

Also, it could be applied to methods. More info, [here](https://www.python.org/dev/peps/pep-0591/)"	1	True	2020-06-30 19:40:44	2020-07-06 20:48:43	2020-07-06 20:48:43
https://github.com/OpenMined/PySyft/pull/3798	['bug ', 'improvement ', 'status: review needed :raising_hand:']	Fix Plan trace for inplace ops, add Role actions pruning	"Fix Plan trace for inplace ops, add Role actions pruning## Description
Changes:
1. Inplace operations like `X +=1` were traced as `var1 = X.__iadd__(1)` where `var1` is redundant variable that also hides the fact that the result of operation is `X` itself. Hook method is updated to return self as result for inplace operations.
2. Add Role actions pruning, e.g. if some operations/placeholders are not connected to Plan outputs or inputs (via side-effect), these are removed.

## Affected Dependencies
n/a

## How has this been tested?
Unit tests

## Checklist
- [x] I have followed the [Contribution Guidelines](https://github.com/OpenMined/.github/blob/master/CONTRIBUTING.md) and [Code of Conduct](https://github.com/OpenMined/.github/blob/master/CODE_OF_CONDUCT.md)
- [x] I have commented my code following the [OpenMined Styleguide](https://github.com/OpenMined/.github/blob/master/STYLEGUIDE.md)
- [x] I have labeled this PR with the relevant [Type labels](https://github.com/OpenMined/.github/labels?q=Type%3A)
- [x] My changes are covered by tests
This is very nested and is not optimal for readability
```suggestion
            return_ids = set()
            if action.return_ids is not None:
                for ph in action.return_ids:
                    if isinstance(ph, PlaceholderId):
                        return_ids.add(ph.value)
```
Could you add a line to explain why we don't use action_rev_idx (as we use action_idx below) ? (I guess, because we did a reverse enumerate)Can you add a line to explain why you need to reverse?I'm surprised that it implicitely provides `output_connected_placeholder_ids` but why not!"	1	True	2020-06-30 07:05:01	2020-07-05 12:41:33	2020-07-05 12:41:28
https://github.com/OpenMined/PySyft/pull/3789	[]	Fixed bug in set_model_params() in test_translation.py	"Fixed bug in set_model_params() in test_translation.py## Description
Fixed bug in implementation of `set_model_params()` in `test/exection/test_translation.py`. See #3780 

## Checklist
- [x] I have followed the [Contribution Guidelines](https://github.com/OpenMined/.github/blob/master/CONTRIBUTING.md) and [Code of Conduct](https://github.com/OpenMined/.github/blob/master/CODE_OF_CONDUCT.md)
- [ ] I have commented my code following the [OpenMined Styleguide](https://github.com/OpenMined/.github/blob/master/STYLEGUIDE.md)
- [x] I have labeled this PR with the relevant [Type labels](https://github.com/OpenMined/.github/labels?q=Type%3A)
- [ ] My changes are covered by tests"	1	True	2020-06-25 18:42:19	2020-06-29 21:23:59	2020-06-29 21:23:54
https://github.com/OpenMined/PySyft/pull/3781	['bug ', 'status: review needed :raising_hand:', 'severity: 2 - high :cold_sweat:']	Fixed bug in set_model_params() in Create Plan	"Fixed bug in set_model_params() in Create Plan## Description
Fixes #3780 

```python
def set_model_params(module, params_list, start_param_idx=0):
    """""" Set params list into model recursively
    """"""
    param_idx = start_param_idx

    for name, param in module._parameters.items():
        print('\t','name:', name, '\tparam_idx:', param_idx)
        module._parameters[name] = params_list[param_idx]
        param_idx += 1

    for name, child in module._modules.items():
        print(child, param_idx)
        if child is not None:
            param_idx = set_model_params(child, params_list, param_idx)

    return param_idx

class Net(nn.Module):
    def __init__(self):
        super(Net, self).__init__()
        self.fc1 = nn.Linear(784, 392)
        self.fc2 = nn.Linear(392, 64)
        self.fc3 = nn.Linear(64, 10)

    def forward(self, x):
        x = nn.functional.relu(self.fc1(x))
        x = nn.functional.relu(self.fc2(x))
        x = self.fc3(x)
        return x

model = Net()
model_params = list(model.parameters())
set_model_params(model, model_params)
```
### Output
```bash
Linear(in_features=784, out_features=392, bias=True) 0
	 name: weight 	param_idx: 0
	 name: bias 	param_idx: 1
Linear(in_features=392, out_features=64, bias=True) 2
	 name: weight 	param_idx: 2
	 name: bias 	param_idx: 3
Linear(in_features=64, out_features=10, bias=True) 4
	 name: weight 	param_idx: 4
	 name: bias 	param_idx: 5
```

## Checklist
- [x] I have followed the [Contribution Guidelines](https://github.com/OpenMined/.github/blob/master/CONTRIBUTING.md) and [Code of Conduct](https://github.com/OpenMined/.github/blob/master/CODE_OF_CONDUCT.md)
- [ ] I have commented my code following the [OpenMined Styleguide](https://github.com/OpenMined/.github/blob/master/STYLEGUIDE.md)
- [x] I have labeled this PR with the relevant [Type labels](https://github.com/OpenMined/.github/labels?q=Type%3A)
- [ ] My changes are covered by tests"	1	True	2020-06-25 07:35:44	2020-06-25 11:18:16	2020-06-25 11:18:10
https://github.com/OpenMined/PySyft/pull/3705	['bug ', 'priority: 2 - high :cold_sweat:']	Detecting duplicate worker IDs in crypten computation	"Detecting duplicate worker IDs in crypten computation## Description
To refer to crypten parties running on specific workers, we can do whether with the rank (int) of the party or the id (str) of the worker running the party, thus we needed a kind of translation mechanism between worker id and rank, but when workers involved in the computation happen to have duplicate ids, ranks get translated badly and the computation will fail badly. This PR raise an error when a computation is about to start with duplicates ids.

## Checklist
- [x] I have followed the [Contribution Guidelines](https://github.com/OpenMined/.github/blob/master/CONTRIBUTING.md) and [Code of Conduct](https://github.com/OpenMined/.github/blob/master/CODE_OF_CONDUCT.md)
- [x] I have commented my code following the [OpenMined Styleguide](https://github.com/OpenMined/.github/blob/master/STYLEGUIDE.md)
- [x] I have labeled this PR with the relevant [Type labels](https://github.com/OpenMined/.github/labels?q=Type%3A)
- [x] My changes are covered by tests"	1	True	2020-06-14 11:14:51	2020-06-14 12:37:54	2020-06-14 12:37:49
https://github.com/OpenMined/PySyft/pull/3690	[]	Update test_fv.py	Update test_fv.pyHotfix: somehow I messed up with the values of tests and the tests failed after merged into master. A quick fix for the result values.	1	True	2020-06-11 07:05:55	2020-06-11 08:53:37	2020-06-11 08:53:31
https://github.com/OpenMined/PySyft/pull/3685	['bug ', 'priority: 1 - immediate :fire:', 'severity: 1 - critical :fire:']	Removed `wrap()` on non-tensor pointers in `respond_to_search()`	"Removed `wrap()` on non-tensor pointers in `respond_to_search()`## Description

in `syft/workers/message_handlers:respond_to_search()`, all pointers are wrapped before being returned. This should be the case only on `PointerTensor` objects, not only all pointers.

This causes a fail in SyferText where we need to exchange object pointers that are not tensors.

## Affected Dependencies
None

## How has this been tested?
All existing tests

## Checklist
- [x] I have followed the [Contribution Guidelines](https://github.com/OpenMined/.github/blob/master/CONTRIBUTING.md) and [Code of Conduct](https://github.com/OpenMined/.github/blob/master/CODE_OF_CONDUCT.md)
- [x] I have commented my code following the [OpenMined Styleguide](https://github.com/OpenMined/.github/blob/master/STYLEGUIDE.md)
- [x] I have labeled this PR with the relevant [Type labels](https://github.com/OpenMined/.github/labels?q=Type%3A)
- [x] My changes are covered by tests
Q: if you remove this if completely are the tests failing?Just pushed that to testYeah...it is failling :(, it was ok before :+1: I reverted my changes and it still giving an error :O@AlanAboudib it seemed to be an intermittent and was not the result of your change.It was happening because of timeout when waiting for an async response. I re-ran the tests and all tests passed. You can make your change and then we can debug further if the issue happens again.Thank you @shubham3121, I will push the changes thenI think @shubham3121 referred to the changes with
```
    # Wrap only if the pointer points to a tensor.
            # If it points to a generic object, do not wrap.
            if isinstance(obj, PointerTensor):
                ptr.wrap()
```I was trying your idea of just remove `.wrap()` without adding my code. I just push my changes back now@AlanAboudib , Ques: You want to wrap Tensor objects (not necessarily PointerTensors objects) and not non Tensor objects, is that the behaviour you're looking for ?? 
If so, then the check should be `isinstance(obj, torch.Tensor)`. Because the currently the test is failing because the obj is an Tensor instance and not a PointerTensor object, as a result we are not wrapping it and hence results in error on calling `.shape`.Oh, my bad, I actually wanted to type:

```
if isinstance(ptr, PointerTensor):
```
Your solution works too. I will do

Thank you so much@AlanAboudib `ptr.wrap()` should ` prt = ptr.wrap()` as it is not an inline operation."	1	True	2020-06-09 12:30:06	2020-06-14 19:02:43	2020-06-14 19:02:39
https://github.com/OpenMined/PySyft/pull/3684	[]	Update polynomial operations	"Update polynomial operations## Description
Closes #3683
Non-same size polynomials are shifted so that the Numpy can perform operations correctly. 

## How has this been tested?
Added tests with operations on non same size polynomials.

## Checklist
- [x] I have followed the [Contribution Guidelines](https://github.com/OpenMined/.github/blob/master/CONTRIBUTING.md) and [Code of Conduct](https://github.com/OpenMined/.github/blob/master/CODE_OF_CONDUCT.md)
- [x] I have commented my code following the [OpenMined Styleguide](https://github.com/OpenMined/.github/blob/master/STYLEGUIDE.md)
- [x] I have labeled this PR with the relevant [Type labels](https://github.com/OpenMined/.github/labels?q=Type%3A)
- [x] My changes are covered by tests
This block is only for Plaintext-Plaintext addition. The encryption-decryption process does not require this as the size of the polynomial are fixed and equal in that case"	1	True	2020-06-08 16:52:16	2020-06-09 05:37:12	2020-06-09 05:16:51
https://github.com/OpenMined/PySyft/pull/3682	[]	Add mean and var methods for AST	"Add mean and var methods for AST## Description
Add mean and var methods for AST

We can maybe having the  `m` and `sum_value` initialization to just happen just once, why include it in the loop?

```suggestion
        sum_value = share.sum(**kwargs)
        m = next(iter(shares.values())).numel() // sum_value.numel()
        for worker, share in shares.items():
```Can you provide some more info on this :smile: :+1: 

This seems to be the correct way of ""variance""
What does torch do different?By default pytorch mean is unbiased, which is useful for some stats estimations
https://pytorch.org/docs/master/generated/torch.var.html
I've added support of both biased and unbiased :) This biased, they do it unbiased by default"	1	True	2020-06-07 21:24:53	2020-07-14 08:48:54	2020-06-10 15:17:07
https://github.com/OpenMined/PySyft/pull/3680	[]	Fix decorator issues for FSS in AST	"Fix decorator issues for FSS in AST## Description
Small fixes to better use comp operators and relu with function secret sharing
"	1	True	2020-06-07 21:17:24	2020-07-14 08:49:17	2020-06-19 20:22:51
https://github.com/OpenMined/PySyft/pull/3679	[]	Fix dtype issues in AST	"Fix dtype issues in AST## Description
Fix severe dtype issues "	1	True	2020-06-07 21:14:01	2020-07-14 08:49:26	2020-06-18 15:35:32
https://github.com/OpenMined/PySyft/pull/3675	['bug ']	Change `whitelist` to `allow_list`	"Change `whitelist` to `allow_list`## Description
Swaps out `whitelist` for a better term.

## Checklist
- [X] I have followed the [Contribution Guidelines](https://github.com/OpenMined/.github/blob/master/CONTRIBUTING.md) and [Code of Conduct](https://github.com/OpenMined/.github/blob/master/CODE_OF_CONDUCT.md)
- [X] I have commented my code following the [OpenMined Styleguide](https://github.com/OpenMined/.github/blob/master/STYLEGUIDE.md)
- [X] I have labeled this PR with the relevant [Type labels](https://github.com/OpenMined/.github/labels?q=Type%3A)"	1	True	2020-06-06 16:38:27	2020-06-07 18:55:41	2020-06-07 18:55:36
https://github.com/OpenMined/PySyft/pull/3673	[]	Plans wrapped frameworks fix	"Plans wrapped frameworks fix## Description
Fix issue with wrapped frameworks from plans

## Affected Dependencies
List any dependencies that are required for this change.

## How has this been tested?
- Describe the tests that you ran to verify your changes.
- Provide instructions so we can reproduce.
- List any relevant details for your test configuration.

## Checklist
- [x] I have followed the [Contribution Guidelines](https://github.com/OpenMined/.github/blob/master/CONTRIBUTING.md) and [Code of Conduct](https://github.com/OpenMined/.github/blob/master/CODE_OF_CONDUCT.md)
- [x] I have commented my code following the [OpenMined Styleguide](https://github.com/OpenMined/.github/blob/master/STYLEGUIDE.md)
- [x] I have labeled this PR with the relevant [Type labels](https://github.com/OpenMined/.github/labels?q=Type%3A)
- [x] My changes are covered by tests"	1	True	2020-06-05 21:19:25	2020-06-06 17:18:11	2020-06-06 17:18:11
https://github.com/OpenMined/PySyft/pull/3666	['improvement ', 'documentation ']	Simplify encrypted aggregation in the tutorials	"Simplify encrypted aggregation in the tutorials# Pull Request

## Description
In [Part 10 - Federated Learning with Secure Aggregation.ipynb](https://github.com/OpenMined/PySyft/blob/master/examples/tutorials/Part%2010%20-%20Federated%20Learning%20with%20Secure%20Aggregation.ipynb), the first step of ""encrypted aggregation"" is that copying the selected parameter.
Since the **Fixed Precision** and **Encrypt** are not in-place operations.
Without copying the parameters, we can still keep the plain parameters in the local.
Therefore, in my opinion, this step can be omitted.

## Affected Dependencies
No

## Type of Change
Please mark options that are relevant.

- [ ] Bug fix (non-breaking change which fixes an issue)
- [ ] Documentation (non-breaking change which adds documentation)
- [x] Improvement (non-breaking change that improves the performance or reliability of existing functionality)
- [ ] New feature (non-breaking change which adds functionality)
- [ ] Breaking change (fix or feature that would cause existing functionality to not work as expected)

## How has this been tested?
- Describe the tests that you ran to verify your changes.
- Provide instructions so we can reproduce.
- List any relevant details for your test configuration.

## Checklist
- [x] I did follow the [Contribution Guidelines](https://github.com/OpenMined/.github/blob/master/CONTRIBUTING.md)
- [x] I did follow the [Code of Conduct](https://github.com/OpenMined/.github/blob/master/CODE_OF_CONDUCT.md)
- [ ] I have commented my code following the [OpenMined Styleguide](https://github.com/OpenMined/.github/blob/master/STYLEGUIDE.md)
- [ ] I have added tests for my changes

## Additional Context
No"	1	True	2020-06-03 16:43:38	2020-06-04 12:22:51	2020-06-04 10:41:18
https://github.com/OpenMined/PySyft/pull/3657	[]	Update `syft-proto` to 0.4.7	"Update `syft-proto` to 0.4.7## Description
Update to pull in Protobuf support for `BaseDataset`, `FixedPrecisionTensor`, and a fix for integer `Action` arguments.

## Checklist
- [X] I did follow the [Contribution Guidelines](https://github.com/OpenMined/.github/blob/master/CONTRIBUTING.md)
- [X] I did follow the [Code of Conduct](https://github.com/OpenMined/.github/blob/master/CODE_OF_CONDUCT.md)
- [ ] I have commented my code following the [OpenMined Styleguide](https://github.com/OpenMined/.github/blob/master/STYLEGUIDE.md)
- [ ] I have added tests for my changes"	1	True	2020-06-01 17:50:39	2020-06-01 18:50:52	2020-06-01 18:50:48
https://github.com/OpenMined/PySyft/pull/3617	[]	Support serialization of lists in Arg	"Support serialization of lists in Arg# Pull Request

## Description
This PR extends protobuf serde to be able to serialize Arg of ""list"" type.
This is required for Actions that have arguments of ""list"" type.

## Affected Dependencies
https://github.com/OpenMined/syft-proto/pull/120
Note: requirements is modified to use https://github.com/OpenMined/syft-proto/pull/120 branch as dependency.

## Type of Change
Please mark options that are relevant.

- [ ] Bug fix (non-breaking change which fixes an issue)
- [ ] Documentation (non-breaking change which adds documentation)
- [ ] Improvement (non-breaking change that improves the performance or reliability of existing functionality)
- [x] New feature (non-breaking change which adds functionality)
- [ ] Breaking change (fix or feature that would cause existing functionality to not work as expected)

## How has this been tested?
- Describe the tests that you ran to verify your changes.
- Provide instructions so we can reproduce.
- List any relevant details for your test configuration.

## Checklist
- [x] I did follow the [Contribution Guidelines](https://github.com/OpenMined/.github/blob/master/CONTRIBUTING.md)
- [x] I did follow the [Code of Conduct](https://github.com/OpenMined/.github/blob/master/CODE_OF_CONDUCT.md)
- [ ] I have commented my code following the [OpenMined Styleguide](https://github.com/OpenMined/.github/blob/master/STYLEGUIDE.md)
- [x] I have added tests for my changes

## Additional Context
Needed for FL MNIST example."	1	True	2020-05-26 21:43:42	2020-05-29 00:34:46	2020-05-29 00:34:42
https://github.com/OpenMined/PySyft/pull/3614	['bug ']	Fix federated_avg side effect	"Fix federated_avg side effect# Pull Request

## Description
This PR aims to fix `federated_avg` side effects. Instead of copying the model, create a new instance of the model object and copy all the `__dict__` from the model that the instance was created.

## Affected Dependencies
List any dependencies that are required for this change.

## Type of Change
Please mark options that are relevant.

- [x] Bug fix (non-breaking change which fixes an issue)
- [ ] Documentation (non-breaking change which adds documentation)
- [ ] Improvement (non-breaking change that improves the performance or reliability of existing functionality)
- [ ] New feature (non-breaking change which adds functionality)
- [ ] Breaking change (fix or feature that would cause existing functionality to not work as expected)

## How has this been tested?
- Running the steps described in #3613  

## Checklist
- [x] I did follow the [Contribution Guidelines](https://github.com/OpenMined/.github/blob/master/CONTRIBUTING.md)
- [x] I did follow the [Code of Conduct](https://github.com/OpenMined/.github/blob/master/CODE_OF_CONDUCT.md)
- [ ] I have commented my code following the [OpenMined Styleguide](https://github.com/OpenMined/.github/blob/master/STYLEGUIDE.md)
- [x] I have added tests for my changes"	2	True	2020-05-26 17:46:51	2020-05-27 13:32:46	2020-05-27 13:32:45
https://github.com/OpenMined/PySyft/pull/3599	[]	Remove protocol parameter in decrypt	"Remove protocol parameter in decrypt## Description

The PR remove the need to a `protocol` parameter in `decrypt` and warn the user to not use it, without raising an error.

Resolves #3329 


## Checklist:
* [x] My changes are covered by tests.
* [x] I have run [the pre-commit hooks](https://github.com/OpenMined/PySyft/blob/master/CONTRIBUTING.md#setting-up-pre-commit-hook) to format and check my code for style issues.
* [x] I have commented my code following [Google style](https://sphinxcontrib-napoleon.readthedocs.io/en/latest/example_google.html).

(See the [the contribution guidelines](https://github.com/OpenMined/PySyft/blob/master/CONTRIBUTING.md) for additional tips.)
Beware of the case where we have an AutogradTensorI thought that passing tests meant it's working fine, but yeah there was no tests for decrypting an AutogradTensor. Fixed that and added test for decrypting with/without grad"	1	True	2020-05-23 13:07:44	2020-05-28 15:41:18	2020-05-28 15:41:14
https://github.com/OpenMined/PySyft/pull/3593	[]	Handle with grid unexpected errors properly	"Handle with grid unexpected errors properly## Description
Add a proper way to handle unexpected exceptions/errors.
- Handle with unexpected exceptions during syft.grid.register function.
- Handle with unexpected behavior due to notebook async constraints.
""to handle"" -> ""handling"""	1	True	2020-05-22 06:41:15	2020-07-21 18:40:12	2020-05-22 14:00:29
https://github.com/OpenMined/PySyft/pull/3591	[]	Avoids multiple peers registration in the same grid environment.	"Avoids multiple peers registration in the same grid environment.## Description

I just added a `_registered_peer` variable to hold the very first grid peer registration. So, any register made later, within the same runtime, the same instance is returned.

Resolves #3576 


## Checklist:
* [ ] My changes are covered by tests.
* [x] I have run [the pre-commit hooks](https://github.com/OpenMined/PySyft/blob/master/CONTRIBUTING.md#setting-up-pre-commit-hook) to format and check my code for style issues.
* [x] I have commented my code following [Google style](https://sphinxcontrib-napoleon.readthedocs.io/en/latest/example_google.html).

(See the [the contribution guidelines](https://github.com/OpenMined/PySyft/blob/master/CONTRIBUTING.md) for additional tips.)
I was wondering if there is a need to throw an warning/error in the user's face if he tries to register multiple times. I think just returning the registered peer for the first time would be okay.  What do you think?Yep, I think we can return the registered peer instance created by the first call. But we probably need to print a warning (not an exception or error message) to clarify to the user that they already have a registered peer."	1	True	2020-05-21 22:46:57	2020-07-21 18:40:12	2020-05-22 15:14:18
https://github.com/OpenMined/PySyft/pull/3589	[]	Print useful information on syft.grid.register()	"Print useful information on syft.grid.register()## Description

Print useful information during `syft.grid.register` execution.

If your pull request closes a GitHub issue, then set its number below.

Resolves #3573"	1	True	2020-05-21 18:58:16	2020-07-21 18:40:12	2020-05-22 01:19:12
https://github.com/OpenMined/PySyft/pull/3565	[]	Full Demo: Training an Encrypted Neural Network across Workers using Crypten (with jails)	"Full Demo: Training an Encrypted Neural Network across Workers using Crypten (with jails)## Description

This PR add an experimental notebook showing how to train an encrypted neural network using crypten, it's based on [Tutorial7 of CrypTen](https://github.com/facebookresearch/CrypTen/blob/master/tutorials/Tutorial_7_Training_an_Encrypted_Neural_Network.ipynb).

Two issues were also solved to implement the demo correctly. First an issue regarding how the crypten computation is initiated in the syft context, and a second regarding how virtual workers are used.

### First issue

CrypTen computation is started from a master worker that will be responsible of running the master party which needs to bind and listen to a port for synchronizing between distributed parties, our initial design start a party (rank 0) on the local worker to be the master that will do the previous job, this introduced some complication with the API as users will list workers in the `run_multiworker` decorator and doesn't expect an additional party to be running on the local worker. We solved this by removing the need to start a local party, but the ip address and port referred on the decorator would be the one used by the first worker in the list (more work on this need to be done).

### Second issue

Using virtual workers doesn't parallelize the computation as calling send will just call recv and the execution of the commands sent to the VirtualWorker will just run sequentially on the main thread. Using threads to call operations on VirtualWorker (which was our case) doesn't solve the issue as well as most computation is cpu-bound, and python doesn't support threads as expected because of the Global Interpreter Lock. So we switched to using processes instead, this introduces some extra cost for creating these processes, but this shouldn't be a big deal if the memory is shared using copy-on-write, a deeper analysis of this may be required only if this start popping up issues.

### Results
With the previous changes, we were able to reproduce the same training as in the CrypTen tutorial with little changes, the running time is almost the same even for VirtualWorker due to the parallelism using processes.


## Checklist:
* [x] My changes are covered by tests.
* [x] I have run [the pre-commit hooks](https://github.com/OpenMined/PySyft/blob/master/CONTRIBUTING.md#setting-up-pre-commit-hook) to format and check my code for style issues.
* [x] I have commented my code following [Google style](https://sphinxcontrib-napoleon.readthedocs.io/en/latest/example_google.html).

(See the [the contribution guidelines](https://github.com/OpenMined/PySyft/blob/master/CONTRIBUTING.md) for additional tips.)
Q: It would be a good idea to also add a title and an author (you :P)?Maybe also add some ""comments"" (I think you can do this in a follow up PR) regarding what is happening in each cell?"	4	True	2020-05-20 21:19:54	2020-06-04 08:41:48	2020-06-04 08:41:42
https://github.com/OpenMined/PySyft/pull/3563	[]	Solve webrtc notebook async calls	"Solve webrtc notebook async calls## Description

Apparently, the jupyter notebook has some limitations for running code asynchronously using the asyncio lib _(more details below)_. This PR aims to replace `asyncio.run()` calls to solve event loop issues during async calls inside of a notebook environment.

Issue details:
_""Unlike terminal IPython, all code runs on asyncio eventloop, so creating a loop by hand will not work, including with magics like %run or other frameworks that create the eventloop themselves.""_ , [IPython Docs](https://ipython.readthedocs.io/en/stable/interactive/autoawait.html?highlight=nest#using-autoawait-in-a-notebook-ipykernel)

Related issues on jupyter notebook repository:
[Can't invoke asyncio event_loop after tornado 5.0 update](https://github.com/jupyter/notebook/issues/3397)
[asyncio.run() fails in the notebook](https://github.com/jupyter/notebook/issues/3397)"	1	True	2020-05-20 17:26:26	2020-05-20 22:32:34	2020-05-20 22:32:34
https://github.com/OpenMined/PySyft/pull/3560	[]	Fix webrtc submodule path issues	"Fix webrtc submodule path issues## Description

The webrtc sub-module cannot be found if the python environment starts from a different root path. This PR aims to fix that problem.

"	1	True	2020-05-20 14:14:57	2020-05-20 15:15:24	2020-05-20 15:15:24
https://github.com/OpenMined/PySyft/pull/3525	['bug ', 'priority: 2 - high :cold_sweat:']	Fix stray objects from FSS `Worker/Plan` initialization	"Fix stray objects from FSS `Worker/Plan` initialization## Description

The extra objects initialized on every worker for FSS cause weird behavior in tests and very non-obvious object counts in unrelated parts of the code.

Resolves #3464

## Checklist:
* [X] My changes are covered by tests.
* [X] I have run [the pre-commit hooks](https://github.com/OpenMined/PySyft/blob/master/CONTRIBUTING.md#setting-up-pre-commit-hook) to format and check my code for style issues.
* [X] I have commented my code following [Google style](https://sphinxcontrib-napoleon.readthedocs.io/en/latest/example_google.html).

(See the [the contribution guidelines](https://github.com/OpenMined/PySyft/blob/master/CONTRIBUTING.md) for additional tips.)
```suggestion
        for worker in workers.values():
``````suggestion
        for worker in workers.values():
``````suggestion
        for worker in workers.values():
``````suggestion
        for worker in workers.values():
```"	5	True	2020-05-13 21:58:36	2020-05-14 16:03:08	2020-05-14 16:03:08
https://github.com/OpenMined/PySyft/pull/3511	['bug ']	Add a missing `NodeClient` import to `AbstractGrid`	"Add a missing `NodeClient` import to `AbstractGrid`## Description

This shows up as a `flake` linting error on several PRs after recent changes to the linting rules.

## Type of change

Please mark the options that are relevant.

- [ ] Added/Modified tutorials
- [X] Bug fix (non-breaking change which fixes an issue)
- [ ] New feature (non-breaking change which adds functionality)
- [ ] Breaking change (fix or feature that would cause existing functionality to not work as expected)

## Checklist:

* [ ] I have added tests for my changes
* [ ] I did follow the [contribution guidelines](https://github.com/OpenMined/PySyft/blob/master/CONTRIBUTING.md)
* [ ] I have commented my code following [Google style](https://sphinxcontrib-napoleon.readthedocs.io/en/latest/example_google.html).
"	1	True	2020-05-12 14:55:54	2020-05-12 15:55:39	2020-05-12 15:55:38
https://github.com/OpenMined/PySyft/pull/3506	[]	Updated PR Template	"Updated PR Template## Updated PR Template 

The PR template contained a bunch of check-boxes that never got checked, which made open PRs appear unfinished.  

Update: 1)  Removed type of change checklist as it is supposed to be identified with a label.
              2)  Included few of the tasks from contribution in checklist.

Fixes #3489

## Type of change

Please mark the options that are relevant.

- [ ] Added/Modified tutorials
- [x] Bug fix (non-breaking change which fixes an issue)
- [ ] New feature (non-breaking change which adds functionality)
- [ ] Breaking change (fix or feature that would cause existing functionality to not work as expected)

## Checklist:

* [ ] I have added tests for my changes
* [x] I did follow the [contribution guidelines](https://github.com/OpenMined/PySyft/blob/master/CONTRIBUTING.md)
* [ ] I have commented my code following [Google style](https://sphinxcontrib-napoleon.readthedocs.io/en/latest/example_google.html).
I think we should remove those checks.
This check should already be done by ```flake8``` or ```black```, right?

I think those stuff should already be caught if we merge [this PR](https://github.com/OpenMined/PySyft/pull/3434)This doesn't seem necessary for all PRsAlso, could you remove this :DDone sir ! Q: Could you also remove this.
Since there are changes which might not require this thing :DSure !"	1	True	2020-05-12 05:07:28	2020-05-12 19:07:28	2020-05-12 18:44:48
https://github.com/OpenMined/PySyft/pull/3500	[]	Update Part 13c - Secure Classification with Syft Keras and TFE - Pri‚Ä¶	"Update Part 13c - Secure Classification with Syft Keras and TFE - Pri‚Ä¶‚Ä¶vate Prediction Client.ipynb

## Description

Thank you for your contribution to the PySyft repository.
Please include a summary of the change and which issue is fixed. Please also include relevant motivation and context.

I have reviewed the bengali translation of this tutorial and fixed some major bugs and incoherence in language. 
If your pull request closes a GitHub issue, then set its number below.

Fixes # (issue)

## Type of change

Please mark the options that are relevant.

- [x] Added/Modified tutorials
- [x] Bug fix (non-breaking change which fixes an issue)
- [ ] New feature (non-breaking change which adds functionality)
- [ ] Breaking change (fix or feature that would cause existing functionality to not work as expected)

## Checklist:

* [] I have added tests for my changes
* [x] I did follow the [contribution guidelines](https://github.com/OpenMined/PySyft/blob/master/CONTRIBUTING.md)
* [ ] I have commented my code following [Google style](https://sphinxcontrib-napoleon.readthedocs.io/en/latest/example_google.html)."	1	True	2020-05-11 02:59:47	2020-06-01 11:26:45	2020-05-11 14:35:44
https://github.com/OpenMined/PySyft/pull/3483	[]	Added support for notebooks in Autoscale	"Added support for notebooks in Autoscale## Description

Added support for autoscale on notebooks, previously it could only be run using a python script.
Now it can be run using both script (.py) and notebook(.ipynb).

@hericlesme 
#3099(issue)
## Type of change

Please mark the options that are relevant.

- [ ] Added/Modified tutorials
- [ ] Bug fix (non-breaking change which fixes an issue)
- [x] New feature (non-breaking change which adds functionality)
- [ ] Breaking change (fix or feature that would cause existing functionality to not work as expected)

## Checklist:

* [x] I have added tests for my changes
* [x] I did follow the [contribution guidelines](https://github.com/OpenMined/PySyft/blob/master/CONTRIBUTING.md)
* [x] I have commented my code following [Google style](https://sphinxcontrib-napoleon.readthedocs.io/en/latest/example_google.html).`gclouds` -> `gcloud`Changed `gclouds` -> `gcloud`"	2	True	2020-05-09 17:16:06	2020-05-16 17:09:40	2020-05-16 17:09:39
https://github.com/OpenMined/PySyft/pull/3473	['bug ', 'testing ']	Store the message log in `BaseWorker` in an unserialized format	"Store the message log in `BaseWorker` in an unserialized format## Description

This bypasses some issues where serialization/deserialization changes
the state or type of the objects passed to the serdes. That also needs
to be fixed, but this is a smaller and still sensible change in the mean
time.

## Type of change

Please mark the options that are relevant.

- [ ] Added/Modified tutorials
- [X] Bug fix (non-breaking change which fixes an issue)
- [ ] New feature (non-breaking change which adds functionality)
- [ ] Breaking change (fix or feature that would cause existing functionality to not work as expected)

## Checklist:

* [ ] I have added tests for my changes
* [ ] I did follow the [contribution guidelines](https://github.com/OpenMined/PySyft/blob/master/CONTRIBUTING.md)
* [ ] I have commented my code following [Google style](https://sphinxcontrib-napoleon.readthedocs.io/en/latest/example_google.html).
nit: can you put the comment one line above so that it looks better? :)"	1	True	2020-05-08 15:08:00	2020-05-10 17:04:56	2020-05-08 16:33:58
https://github.com/OpenMined/PySyft/pull/3466	[]	Update Part 13b - Secure Classification with Syft Keras and TFE - Sec‚Ä¶	"Update Part 13b - Secure Classification with Syft Keras and TFE - Sec‚Ä¶‚Ä¶ure Model Serving.ipynb

## Description

Thank you for your contribution to the PySyft repository.
Please include a summary of the change and which issue is fixed. Please also include relevant motivation and context.

I have reviewed the bengali translation of this tutorial and fixed some major bugs and incoherence in language.

If your pull request closes a GitHub issue, then set its number below.

Fixes # (issue)

## Type of change

Please mark the options that are relevant.

- [x] Added/Modified tutorials
- [x] Bug fix (non-breaking change which fixes an issue)
- [ ] New feature (non-breaking change which adds functionality)
- [ ] Breaking change (fix or feature that would cause existing functionality to not work as expected)

## Checklist:

* [ ] I have added tests for my changes
* [x] I did follow the [contribution guidelines](https://github.com/OpenMined/PySyft/blob/master/CONTRIBUTING.md)
* [ ] I have commented my code following [Google style](https://sphinxcontrib-napoleon.readthedocs.io/en/latest/example_google.html)."	1	True	2020-05-08 05:10:45	2020-06-01 11:26:45	2020-05-08 12:33:01
https://github.com/OpenMined/PySyft/pull/3462	[]	Add a check for docstring coverage to the Github Action tests	"Add a check for docstring coverage to the Github Action tests## Description

Check that docstring coverage hasn't decreased below the current level on each PR.

## Type of change

Please mark the options that are relevant.

- [ ] Added/Modified tutorials
- [ ] Bug fix (non-breaking change which fixes an issue)
- [X] New feature (non-breaking change which adds functionality)
- [ ] Breaking change (fix or feature that would cause existing functionality to not work as expected)

## Checklist:

* [ ] I have added tests for my changes
* [ ] I did follow the [contribution guidelines](https://github.com/OpenMined/PySyft/blob/master/CONTRIBUTING.md)
* [ ] I have commented my code following [Google style](https://sphinxcontrib-napoleon.readthedocs.io/en/latest/example_google.html).
"	1	True	2020-05-07 15:29:39	2020-05-10 17:04:48	2020-05-07 15:59:13
https://github.com/OpenMined/PySyft/pull/3454	[]	Add async send_command to websocket client	"Add async send_command to websocket client**:warning: Is needed for https://github.com/OpenMined/PySyft/pull/3337**

## Description

Improves async support for grid nodes, by allowing to send async commands simultaneously to several remote servers.

Waiting for a global strategy to add tests, as tests require setting up a grid network.


## How to use it


```python
import asyncio
import syft as sy
import torch as th
from syft.workers.node_client import NodeClient

hook = sy.TorchHook(th)

alice = NodeClient(hook, ""ws://localhost:7600"")
bob = NodeClient(hook, ""ws://localhost:7601"")
charlie = NodeClient(hook, ""ws://localhost:7602"")
crypto_provider = charlie

me = sy.local_worker

my_grid = sy.PrivateGridNetwork(alice,bob,charlie)

x = th.tensor([-1., 2])
p_alice = x.send(alice)
p_bob = x.send(bob)

# async send command
p = asyncio.run(
    alice.async_send_command(
        message=('abs', p_alice.child, (), {})
    )
)
print(p)
p.get()

# async dispatch to several workers
results = asyncio.run(
    charlie.async_dispatch(
        [alice, bob],
        [('abs', p_alice.child, (), {}),
         ('abs', p_bob.child, (), {})]
    )
)
```Why a `*args` for each of these methods?```suggestion
        Note: Is subclassed by the node client when you use the GridNode
```

Typo :grin: Can we have this printed only on when a `verbose` flag is set?:+1: `type(ret_val) == bytes`
When does this condition take place? (just curious... :thinking: )I would really love to see this in practice. I've had problems in achieving async comms over websockets before. Oh, good question! Will rm and see if it's ok:+1:So it should not be bytes, but if I rm step 4 in  `async_send_msg` I'll get a ""None"" as bytes. We had this in the past, so I kept it like in worker/ base.pyI have wanted to make this change for so long. üíØ"	2	True	2020-05-06 08:43:33	2020-05-08 20:49:40	2020-05-08 20:49:39
https://github.com/OpenMined/PySyft/pull/3452	[]	Send models with @run_multiworkers	"Send models with @run_multiworkers## Description

After introducing Jails and the mechanisms for sending Crypten models across workers, we needed a way to send those models while initializing a Crypten computation using our `@run_multiworkers` decorator. 

With this PR, a function decorated with `@run_multiworkers([ALICE, BOB], master_addr=""127.0.0.1"", model=model, dummy_input=dummy_input)` where `model` is a `torch.nn.Module` and dummy input is a `torch.Tensor` that can be evaluated using the `model`, every party running on different workers will have access to the `model` inside their functions, which then should be an equivalent Crypten model.

## Type of change

Please mark the options that are relevant.

- [ ] Added/Modified tutorials
- [ ] Bug fix (non-breaking change which fixes an issue)
- [x] New feature (non-breaking change which adds functionality)
- [ ] Breaking change (fix or feature that would cause existing functionality to not work as expected)

## Checklist:

* [ ] I have added tests for my changes
* [x] I did follow the [contribution guidelines](https://github.com/OpenMined/PySyft/blob/master/CONTRIBUTING.md)
* [x] I have commented my code following [Google style](https://sphinxcontrib-napoleon.readthedocs.io/en/latest/example_google.html)."	1	True	2020-05-05 19:01:27	2020-05-09 10:39:35	2020-05-09 10:39:34
https://github.com/OpenMined/PySyft/pull/3451	[]	Bump version to `v0.2.5`	"Bump version to `v0.2.5`## Description

Thank you for your contribution to the PySyft repository.
Please include a summary of the change and which issue is fixed. Please also include relevant motivation and context.

If your pull request closes a GitHub issue, then set its number below.

Fixes # (issue)

## Type of change

Please mark the options that are relevant.

- [ ] Added/Modified tutorials
- [ ] Bug fix (non-breaking change which fixes an issue)
- [ ] New feature (non-breaking change which adds functionality)
- [ ] Breaking change (fix or feature that would cause existing functionality to not work as expected)

## Checklist:

* [ ] I have added tests for my changes
* [ ] I did follow the [contribution guidelines](https://github.com/OpenMined/PySyft/blob/master/CONTRIBUTING.md)
* [ ] I have commented my code following [Google style](https://sphinxcontrib-napoleon.readthedocs.io/en/latest/example_google.html)."	1	True	2020-05-05 18:06:00	2020-05-06 05:47:02	2020-05-05 18:35:44
https://github.com/OpenMined/PySyft/pull/3449	[]	Update Part 13a - Secure Classification with Syft Keras and TFE - Pub‚Ä¶	"Update Part 13a - Secure Classification with Syft Keras and TFE - Pub‚Ä¶‚Ä¶lic Training.ipynb

## Description

Thank you for your contribution to the PySyft repository.
Please include a summary of the change and which issue is fixed. Please also include relevant motivation and context.

I have reviewed the bengali translation of this tutorial and fixed some major bugs and language incoherence. 

If your pull request closes a GitHub issue, then set its number below.

Fixes # (issue)

## Type of change

Please mark the options that are relevant.

- [x] Added/Modified tutorials
- [x] Bug fix (non-breaking change which fixes an issue)
- [ ] New feature (non-breaking change which adds functionality)
- [ ] Breaking change (fix or feature that would cause existing functionality to not work as expected)

## Checklist:

* [ ] I have added tests for my changes
* [x] I did follow the [contribution guidelines](https://github.com/OpenMined/PySyft/blob/master/CONTRIBUTING.md)
* [ ] I have commented my code following [Google style](https://sphinxcontrib-napoleon.readthedocs.io/en/latest/example_google.html)."	1	True	2020-05-05 05:01:50	2020-06-01 11:26:45	2020-05-08 12:32:00
https://github.com/OpenMined/PySyft/pull/3445	[]	Update Part 12 - Train an Encrypted Neural Network on Encrypted Data.‚Ä¶	"Update Part 12 - Train an Encrypted Neural Network on Encrypted Data.‚Ä¶‚Ä¶ipynb

## Description

Thank you for your contribution to the PySyft repository.
Please include a summary of the change and which issue is fixed. Please also include relevant motivation and context.

I have reviewed the bengali translation of this tutorial and fixed some major errors and incoherence in language.

If your pull request closes a GitHub issue, then set its number below.

Fixes # (issue)

## Type of change

Please mark the options that are relevant.

- [x] Added/Modified tutorials
- [x] Bug fix (non-breaking change which fixes an issue)
- [ ] New feature (non-breaking change which adds functionality)
- [ ] Breaking change (fix or feature that would cause existing functionality to not work as expected)

## Checklist:

* [ ] I have added tests for my changes
* [x] I did follow the [contribution guidelines](https://github.com/OpenMined/PySyft/blob/master/CONTRIBUTING.md)
* [ ] I have commented my code following [Google style](https://sphinxcontrib-napoleon.readthedocs.io/en/latest/example_google.html)."	1	True	2020-05-04 05:37:35	2020-06-01 11:26:45	2020-05-08 12:30:25
https://github.com/OpenMined/PySyft/pull/3444	[]	Update Part 11 - Secure Deep Learning Classification.ipynb	"Update Part 11 - Secure Deep Learning Classification.ipynb## Description

Thank you for your contribution to the PySyft repository.
Please include a summary of the change and which issue is fixed. Please also include relevant motivation and context.

I have reviewed the Bengali Translation of the tutorial which had some major errors and incoherence. 

If your pull request closes a GitHub issue, then set its number below.

Fixes # (issue)

## Type of change

Please mark the options that are relevant.

- [x] Added/Modified tutorials
- [x] Bug fix (non-breaking change which fixes an issue)
- [ ] New feature (non-breaking change which adds functionality)
- [ ] Breaking change (fix or feature that would cause existing functionality to not work as expected)

## Checklist:

* [ ] I have added tests for my changes
* [x] I did follow the [contribution guidelines](https://github.com/OpenMined/PySyft/blob/master/CONTRIBUTING.md)
* [ ] I have commented my code following [Google style](https://sphinxcontrib-napoleon.readthedocs.io/en/latest/example_google.html)."	3	True	2020-05-03 23:17:17	2020-06-01 11:26:45	2020-05-30 01:24:42
https://github.com/OpenMined/PySyft/pull/3442	['bug ']	Fix `move` PT to its own location	"Fix `move` PT to its own location## Description

> the move() method intended to throw an error, when trying to move an object to a virtual worker that already possesses the object

Fixes #3435 

## Type of change

Please mark the options that are relevant.

- [ ] Added/Modified tutorials
- [x] Bug fix (non-breaking change which fixes an issue)
- [ ] New feature (non-breaking change which adds functionality)
- [ ] Breaking change (fix or feature that would cause existing functionality to not work as expected)

## Checklist:

* [x] I have added tests for my changes
* [x] I did follow the [contribution guidelines](https://github.com/OpenMined/PySyft/blob/master/CONTRIBUTING.md)
* [x] I have commented my code following [Google style](https://sphinxcontrib-napoleon.readthedocs.io/en/latest/example_google.html).
I think this should be handle at a lower level, maybe on the reception of a Communication Message.
Otherwise, we may need this kind of check at several places (for different methods doing doing stuff with pointers). What do you think?There's a similar check in the de-serialization, but I don't think it's sufficient to resolve this issue. Not sure where the right place for this is. I suppose we could add a decorator that wraps the function with this check and the one above? Not sure how else to avoid duplication.I don't think it should be done in serde, it's too late at this point.
I think it should be done on the worker side, when a worker receives the order to send a tensor (basically all the communication action will resume to that at the end, right?) it should check the source and destination of the communication and do things accordingly to that.
But it's just how I see it, maybe there's better?I think this is even before a message gets sent; it's checking whether the worker has been asked to move a tensor to itself and bypassing sending a message to itself in that case. I can't think of a better place to do this yet, but I'm guessing we'll figure it out as we rework the communication methods for `Protocols`. ü§∑"	1	True	2020-05-03 16:01:05	2020-05-12 14:51:11	2020-05-12 14:51:11
https://github.com/OpenMined/PySyft/pull/3428	[]	Fix double tracing bug	"Fix double tracing bug## Description

There was a bug that actions were duplicated when tracing a torch function on Placeholders.

## Type of change

Please mark the options that are relevant.

- [ ] Added/Modified tutorials
- [x] Bug fix (non-breaking change which fixes an issue)
- [ ] New feature (non-breaking change which adds functionality)
- [ ] Breaking change (fix or feature that would cause existing functionality to not work as expected)

## Checklist:

* [x] I have added tests for my changes
* [ ] I did follow the [contribution guidelines](https://github.com/OpenMined/PySyft/blob/master/CONTRIBUTING.md)
* [ ] I have commented my code following [Google style](https://sphinxcontrib-napoleon.readthedocs.io/en/latest/example_google.html).
Q: This is needed such that the local worker will run the plan using the actions? (not calling the function directly)Yes, just a pseudo hack to really use the actions traced and not the forward function"	1	True	2020-04-30 07:50:30	2020-04-30 13:12:01	2020-04-30 13:12:00
https://github.com/OpenMined/PySyft/pull/3427	['bug ', 'testing ']	Increase sigmoid exp tol	"Increase sigmoid exp tol## Description
The ```sigmoid_exp``` test is failing (sometimes).
This PR increases the tolerance such that the test will pass.

Fixes #3345

## Type of change

Please mark the options that are relevant.

- [ ] Added/Modified tutorials
- [x] Bug fix (non-breaking change which fixes an issue)
- [ ] New feature (non-breaking change which adds functionality)
- [ ] Breaking change (fix or feature that would cause existing functionality to not work as expected)

## Checklist:

* [x] I have added tests for my changes (already there)
* [x] I did follow the [contribution guidelines](https://github.com/OpenMined/PySyft/blob/master/CONTRIBUTING.md)
* [x] I have commented my code following [Google style](https://sphinxcontrib-napoleon.readthedocs.io/en/latest/example_google.html).

## Extra:

* Have seen this failure [here](https://github.com/OpenMined/PySyft/pull/3422/checks?check_run_id=632038986)

* Tested with the values from the issue and from the above test run:
* 0.0605 / (0.065 * 0.9885) = 0.94 (bellow threshold) (how it failed in the PR)
* 0.0605 / (0.065 * 0.9890) = 0.94 (bellow threshold) (how it failed in the issue description)"	1	True	2020-04-30 05:21:58	2020-04-30 11:29:04	2020-04-30 11:29:04
https://github.com/OpenMined/PySyft/pull/3418	[]	Remove unused method .value()	"Remove unused method .value()## Description

Thank you for your contribution to the PySyft repository.
Please include a summary of the change and which issue is fixed. Please also include relevant motivation and context.

If your pull request closes a GitHub issue, then set its number below.

Fixes # (issue)

## Type of change

Please mark options that are relevant.

- [ ] Added/Modified tutorials
- [ ] Bug fix (non-breaking change which fixes an issue)
- [ ] New feature (non-breaking change which adds functionality)
- [ ] Breaking change (fix or feature that would cause existing functionality to not work as expected)

## Checklist:

* [ ] I have added tests for my changes
* [ ] I did follow the [contribution guidelines](https://github.com/OpenMined/PySyft/blob/master/CONTRIBUTING.md)
* [ ] I have commented my code following [Google style](https://sphinxcontrib-napoleon.readthedocs.io/en/latest/example_google.html)."	1	True	2020-04-28 19:27:54	2020-04-28 19:56:53	2020-04-28 19:56:53
https://github.com/OpenMined/PySyft/pull/3415	[]	Modify Bengali translated notebooks	"Modify Bengali translated notebooks## Description
I worked on the modification of Bengali translated notebooks[From Part 01 to Part 10(except 3,4 and 5)] 

Fixes # (issue)
The issue was closed.
- issue [#3042](https://github.com/OpenMined/PySyft/issues/3042). 

## Type of change

Please mark options that are relevant.

- [x] Added/Modified tutorials
- [ ] Bug fix (non-breaking change which fixes an issue)
- [ ] New feature (non-breaking change which adds functionality)
- [ ] Breaking change (fix or feature that would cause existing functionality to not work as expected)

## Checklist:

* [ ] I have added tests for my changes
* [x] I did follow the [contribution guidelines](https://github.com/OpenMined/PySyft/blob/master/CONTRIBUTING.md)
* [ ] I have commented my code following [Google style](https://sphinxcontrib-napoleon.readthedocs.io/en/latest/example_google.html)."	7	True	2020-04-28 17:09:30	2020-06-01 11:26:45	2020-05-08 04:58:25
https://github.com/OpenMined/PySyft/pull/3406	[]	Crypten hook logic shifted to hook_crypten.py	"Crypten hook logic shifted to hook_crypten.pyFixes #3385
Refractor (code shifted to new file)

Please mark options that are relevant.

- [ ] Added/Modified tutorials
- [ ] Bug fix (non-breaking change which fixes an issue)
- [ ] New feature (non-breaking change which adds functionality)
- [ ] Breaking change (fix or feature that would cause existing functionality to not work as expected)

## Checklist:

* [ ] I have added tests for my changes
* [x] I did follow the [contribution guidelines](https://github.com/OpenMined/PySyft/blob/master/CONTRIBUTING.md)
* [ ] I have commented my code following [Google style](https://sphinxcontrib-napoleon.readthedocs.io/en/latest/example_google.html).Here we should have those lines, only that we should call the ```hook_crypten_module``` that is defined in the other file.

Also, in this file, we should remove the ```_hook_crypten``` and ```_hook_crypten_module``` methods@IamRavikantSingh sorry...This is needed (my bad :( ). You can move it where @youben11 suggsted. We use another load function syft than what it is used in CrypTen because we use the tags to properly load the necessary data."	3	True	2020-04-25 18:51:40	2020-05-13 05:15:30	2020-05-13 05:15:29
https://github.com/OpenMined/PySyft/pull/3405	[]	Auto-register Plan Torchscript translator	"Auto-register Plan Torchscript translator## Description

In #3360 torchscript translator is auto-registered on Plan inside `syft.execution.translation.torchscript`.
This was relying on the fact that `PlanTranslatorTorchscript` is imported somewhere in `__init__.py` files when Syft is imported. 
At some point `PlanTranslatorTorchscript` import was removed. 
This change registers `PlanTranslatorTorchscript` inside `syft.execution.plan`.

Additionally, it fixes FL Training Plan experimental notebooks to use `sy.make_hook` instead of `sy.hook`.

## Type of change

Please mark options that are relevant.

- [ ] Added/Modified tutorials
- [x] Bug fix (non-breaking change which fixes an issue)
- [ ] New feature (non-breaking change which adds functionality)
- [ ] Breaking change (fix or feature that would cause existing functionality to not work as expected)

## Checklist:

* [ ] I have added tests for my changes
* [x] I did follow the [contribution guidelines](https://github.com/OpenMined/PySyft/blob/master/CONTRIBUTING.md)
* [ ] I have commented my code following [Google style](https://sphinxcontrib-napoleon.readthedocs.io/en/latest/example_google.html)."	3	True	2020-04-25 02:26:54	2020-04-26 17:44:05	2020-04-26 17:44:04
https://github.com/OpenMined/PySyft/pull/3403	['bug ', 'priority: 2 - high :cold_sweat:']	Garbage Collection in `execute_computation_action`, Fix Inplace-Operation Identification	"Garbage Collection in `execute_computation_action`, Fix Inplace-Operation Identification## Description

Fixes #3397 
Fixes #3398 

~Currently breaks inplace computations. WIP üößüöß~
- [x] GC
- [x] Fix inplace operations

## Type of change

Please mark options that are relevant.

- [ ] Added/Modified tutorials
- [x] Bug fix (non-breaking change which fixes an issue)
- [ ] New feature (non-breaking change which adds functionality)
- [ ] Breaking change (fix or feature that would cause existing functionality to not work as expected)

## Checklist:

* [x] I have added tests for my changes
* [x] I did follow the [contribution guidelines](https://github.com/OpenMined/PySyft/blob/master/CONTRIBUTING.md)
* [x] I have commented my code following [Google style](https://sphinxcontrib-napoleon.readthedocs.io/en/latest/example_google.html).Does this inherently require copying because operations later in this function are in-place? Could it be avoided by changing the lines below that read something like `values = values.some_op()`?Could you add a test for this regex?What causes the original PT not to get GC'd? Unclear from this comment.If there's work left to be done, better to create an issue than a TODO.Removed (it was addressed)Updated :smile: Done :+1: Removed (redundant operation)üëç"	2	True	2020-04-24 17:18:22	2020-04-28 15:09:39	2020-04-28 15:09:39
https://github.com/OpenMined/PySyft/pull/3399	[]	Avg & Maxpooling with SMPC	"Avg & Maxpooling with SMPC## Description
resolves issue #2573 
overloading torch.nn.F.max_pool2d and avg_pool2d in order to use it in architectures like ResNet

## Type of change

- [ ] Added/Modified tutorials
- [ ] Bug fix (non-breaking change which fixes an issue)
- [x] New feature (non-breaking change which adds functionality)
- [ ] Breaking change (fix or feature that would cause existing functionality to not work as expected)

## Checklist:

* [x] I have added tests for my changes
* [x] I did follow the [contribution guidelines](https://github.com/OpenMined/PySyft/blob/master/CONTRIBUTING.md)
* [x] I have commented my code following [Google style](https://sphinxcontrib-napoleon.readthedocs.io/en/latest/example_google.html).```suggestion
from syft.frameworks.torch.nn.functional import conv2d
from syft.frameworks.torch.nn.functional import maxpool2d
from syft.frameworks.torch.nn.functional import avgpool2d
```
Just to be consistent with `__init__.py` files eveywhereIt be good if the `else` captures just the `mean` arg with other modes leading to raising Exceptions`torch.nn.functional.max_pool2d` currently supports both 3D and 4D tensors. So might be good to add compatibility for 3D tensors too. üëçüëçthat's an initial version to get it to work then we'll iterate on it why do you think that's necessary? is there a use case that benefits from that?well spotted! I actually thought about that but I made it that way to avoid writing a test case for the expectation üòÇ will do it next commitDoesn't change the functionality in anyway. It's just conventional to do so üòÑYou can use a more precise type of Error, ValueError might be appropriateCan we have this done before we merge? I guess it might be work if we have something like 
```python
if len(tensor.shape) == 3:
    return squeeze(pool2d(unsqueeze(tensor))
```
or something like that??"	3	True	2020-04-23 22:07:04	2020-04-26 20:12:19	2020-04-26 20:12:19
https://github.com/OpenMined/PySyft/pull/3396	[]	Fix bug with AST.dtype serde	"Fix bug with AST.dtype serde## Description

Thank you for your contribution to the PySyft repository.
Please include a summary of the change and which issue is fixed. Please also include relevant motivation and context.

If your pull request closes a GitHub issue, then set its number below.

Fixes # (issue)

## Type of change

Please mark options that are relevant.

- [ ] Added/Modified tutorials
- [x] Bug fix (non-breaking change which fixes an issue)
- [ ] New feature (non-breaking change which adds functionality)
- [ ] Breaking change (fix or feature that would cause existing functionality to not work as expected)

## Checklist:

* [ ] I have added tests for my changes
* [ ] I did follow the [contribution guidelines](https://github.com/OpenMined/PySyft/blob/master/CONTRIBUTING.md)
* [ ] I have commented my code following [Google style](https://sphinxcontrib-napoleon.readthedocs.io/en/latest/example_google.html)."	1	True	2020-04-23 16:44:54	2020-04-23 17:57:08	2020-04-23 17:40:39
https://github.com/OpenMined/PySyft/pull/3392	[]	Drop `custom` support in SecureNN, Flexibility over dtype in ASTs	"Drop `custom` support in SecureNN, Flexibility over dtype in ASTs## Description
Fixes #3389 

- [x] Assert SecureNN dtype is not `custom`
- [x] Flexibility over dtype in ASTs

## Type of change

Please mark options that are relevant.

- [ ] Added/Modified tutorials
- [ ] Bug fix (non-breaking change which fixes an issue)
- [x] New feature (non-breaking change which adds functionality)
- [ ] Breaking change (fix or feature that would cause existing functionality to not work as expected)

## Checklist:

* [ ] I have added tests for my changes
* [x] I did follow the [contribution guidelines](https://github.com/OpenMined/PySyft/blob/master/CONTRIBUTING.md)
* [x] I have commented my code following [Google style](https://sphinxcontrib-napoleon.readthedocs.io/en/latest/example_google.html).Can we also support int32, int64 and the associated torch dtypes? https://pytorch.org/docs/stable/tensor_attributes.html#torch.torch.dtypeTo be more flexible for new users```suggestion
    assert (
        alpha_sh.dtype == x_sh.dtype == y_sh.dtype != ""custom""
    ), ""`custom` dtype shares are unsupported in SecureNN, use dtype = `long` or `int` instead""

``````suggestion
    assert (
        x_sh.dtype == y_sh.dtype != ""custom""
    ), ""`custom` dtype shares are unsupported in SecureNN, use dtype = `long` or `int` instead""
```"	5	True	2020-04-23 08:24:26	2020-05-03 15:28:36	2020-05-03 15:28:36
https://github.com/OpenMined/PySyft/pull/3386	[]	Adding a Protobuf/Msgpack Serializable Interface	"Adding a Protobuf/Msgpack Serializable Interface## Description

Currently, if you want to enrol a type into a protobuf schema, you have to edit syft/serde/protobuf files, which is not very natural and might not scale in time. This solution generates those structures at runtime by checking which class is implementing the interface.

~placed the interface in syft/interfaces, placing it in syft/serde will create some awkward cyclic 
dependency import problem.~ Solved this one by removing AbstractWorker from syft/serde/serde.py and making the msgpack import local.

~currently, I'm exploiting the fact that in __subclasses__ we find only the classes that directly inherits the interface. By doing this, I can be sure on the fact that the class won't rely on the implementation from its parent class and implement it's own. (so we won't have to deal with the inheritance chain at unbufferize). This idea could be bad, because of having to inherit every time ProtobufInterface. Any feedback would be great.~ Thanks @gmuraru + @karlhigley  for the cool tips! :)

* merged the two interfaces into one.

* removed global code might rely on runtime variables, wrote init functions for global variables in serde/probuf/serde.py, serde/protobuf/proto.py and serde/msgpack/serde.py. 

## Type of change

Please mark options that are relevant.

- [ ] Added/Modified tutorials
- [ ] Bug fix (non-breaking change which fixes an issue)
- [x] New feature (non-breaking change which adds functionality)
- [ ] Breaking change (fix or feature that would cause existing functionality to not work as expected)

## Checklist:

* [ ] I have added tests for my changes
* [ ] I did follow the [contribution guidelines](https://github.com/OpenMined/PySyft/blob/master/CONTRIBUTING.md)
* [ ] I have commented my code following [Google style](https://sphinxcontrib-napoleon.readthedocs.io/en/latest/example_google.html).üëç 

Can we apply this same class to msgpack serialization with `simplify`/`detail` and call it something like `Serializable`?Sure! I could add a wrapper for libraries as well to have similar behaviour.Libraries?Instead of keeping a list with those objects from libraries (torch, numpy) we can use in msgpack/protobuf, it might be useful to have a wrapper with the same behaviour as this interface? Might be overkill.These should probably live in the `serde` package with the other serialization code.We have an outstanding TODO to vaporize `TrainConfig`, which is definitely out of scope for this PR, but I'd avoid importing it here just so we don't give the impression that people should be using it.For the sake of brevity, could we combine these interfaces and call the resulting class `SyftSerializable` or something like that?üöÄ üé∏ üöÄ üé∏ üëç Good catch!I could to that, but it will generate the horror named cyclic dependency, I could hack it with a try and catch, I saw it in a few places around the codebase. (or we want to get rid of such hacks?).Will do, the only problem is that because of global code usage in serde.py, the usage of that interface requires that all of the classes that uses the interfaces are loaded before the global code execution (by adding this import I forced those classes to be loaded for sure, I cand add that file in a more nested `__init__` one). I'll think of some workaround on it or maybe we want to remove the global code at the expense of some performance? (or maybe at least do some caching, like, we wait for actual execution and afterwards we store the result globally)I have no idea why I haven't done this in the first place. Nice one.This seems correct, given the focus of this PR. I think what's going to happen soon (due to work with `Protocols`) is that `Role` will become an `AbstractObject`. Anyway, üëç I think this is already covered, since `AbstractObject` is `SyftSerializable`.‚ù§Ô∏è I think this is already covered too. üéâ Could we call this function when the `msgpack` module is loaded? Laziness kinda makes sense, but it means we have to call this function in a bunch of different places.This looks a lot better. üëç Good catch! I think this has been the source of a lot of circular dependencies we've encountered. üëç Same thing here as with `msgpack`; thinking it would be better to call this function when the module is loaded so we can call it once and not to have to invoke it in all the serialization methods.üíØ If it won't block this PR, we could create an issue and kick this part over to the Crypto team.It looks like this changes the call signature of the serialization strategies, but I'm not sure I saw a change to the strategies themselves. Do these still match up?Yes, I wanted to detach the AbstractWorker import from the file to prevent the circular import, I'll think for a way to bring this back.This makes us rely on order of initialization and could create really awkard and hard to find bugs, for example, let's say that when we are loading the first time syft, syft/serde/msgpack/serde.py should be the last one to be loaded (so that all the classes should be loaded to actually get themselves enroled in the interface). I enjoy this lazy init because: 1. forces everybody to use the public API, not the global variables, 2. 100% safe, we are generating those global variables when syft is fully loaded and the interface has all it's subclasses enrolled. The other way would be to mess around in `__init__.py` files, I think it may be better to leave those alone.Makes sense re: avoiding a circular import. I just want to make sure these type annotations are correct(-ish). Maybe it could be `Callable[[object, object], bin]` for now?Do you think this should be an abstract class and its methods abstract methods?Is this here to avoid some kind of circular imports?I'd also prefer if it was done in an __init__.py file but if you think it's too complex, I'm ok with leaving it for now These are all good points! What if the global was an object with a getter that did the lazy initialization inside? Then we wouldn't have to call the `init_global_vars` function in so many places, because it would be built in to the getter.Oh, good catch. Yeah, this should never be instantiated directly. What do abstract methods look like in comparison to raising `NotImplementedError`?I think you just have to declare the method with an `abstractmethod` decorator and do nothing in it.
A difference is that an error will be raised as soon as you create an instance of a class inheriting from the abstract one if it doesn't implement all the abstract methods.
At least, that's what I remember from abstract classes in Python ^^That sounds good. üëç (The three of us write some pretty decent Python together.) üòÜ I'll create an issue after the merge.This will generate some headache on method resolution order (MRO), for example:

```
SyftSerializable(ABC)
AbstractWorker(ABC, SyftSerializable)
```

We should drop the ABC from AbstractWorker by doing this (and all the ABCs around the codebase that implements SyftSerializable). Might be a cool idea, not sure if we want it, not sure how it will behave when somethings like this happens, I need to make a few experiments: (here we can't drop Interface2 from the inheritance chain of Interface3)

```
Interface1(ABC)
Interface2(Interface1)
Interface3(Interface2, SyftSerializable).
```@karlhigley  any thoughts about this?Yes, as a temporary solution, we'll leave it here and figure out a solution to break those circular changes in a more elegant way.My problem is here:
```
from syft.serde.syft_serializable import SyftSerializable, get_protobuf_subclasses

print(len(get_protobuf_subclasses(SyftSerializable))) #12

class Example(SyftSerializable):
    @staticmethod
    def simplify(worker, obj):
        pass

    @staticmethod
    def detail(worker, obj):
        pass

    @staticmethod
    def bufferize(worker, obj):
        pass

    @staticmethod
    def unbufferize(worker, obj):
        pass

    @staticmethod
    def get_protobuf_schema():
        pass

print(len(get_protobuf_subclasses(SyftSerializable))) #13
```
If those globals were generated and a new class is added, the globals will not reflect this, but I figured a way to do this properly I think without having inits everywhere/checks/performance impact. (currently, i'm solving this only if the classes are a part of syft, but in time that might not be the case).What happens if we switch the order of the parent classes?
```
AbstractWorker(SyftSerializable, ABC)
```
Seems like MRO should work out in that case?"	1	True	2020-04-21 20:33:43	2020-05-11 19:44:29	2020-05-11 19:44:29
https://github.com/OpenMined/PySyft/pull/3380	[]	Add Syft version checking	"Add Syft version checking## Description

One of the most common errors reported by PyGrid users is the Syft version mismatch between the grid nodes and the user environment. The purpose of this PR is to provide a debugging mechanism for this error.

## Type of change

Please mark the options that are relevant.

- [ ] Added/Modified tutorials
- [ ] Bug fix (non-breaking change which fixes an issue)
- [X] New feature (non-breaking change which adds functionality)
- [ ] Breaking change (fix or feature that would cause existing functionality to not work as expected)

## Checklist:

* [ ] I have added tests for my changes
* [ ] I did follow the [contribution guidelines](https://github.com/OpenMined/PySyft/blob/master/CONTRIBUTING.md)
* [ ] I have commented my code following [Google style](https://sphinxcontrib-napoleon.readthedocs.io/en/latest/example_google.html)."	1	True	2020-04-20 15:10:55	2020-04-21 15:00:30	2020-04-21 15:00:30
https://github.com/OpenMined/PySyft/pull/3377	[]	Add Crypten changes to master	"Add Crypten changes to master## Description
Update master with the core changes made on the crypten branch

## Type of change

Please mark options that are relevant.

- [ ] Added/Modified tutorials
- [x] Bug fix (non-breaking change which fixes an issue)
- [ ] New feature (non-breaking change which adds functionality)
- [ ] Breaking change (fix or feature that would cause existing functionality to not work as expected)

## Checklist:

* [x] I have added tests for my changes -- the already existing tests should pass
* [x] I did follow the [contribution guidelines](https://github.com/OpenMined/PySyft/blob/master/CONTRIBUTING.md)
* [x] I have commented my code following [Google style](https://sphinxcontrib-napoleon.readthedocs.io/en/latest/example_google.html).When was this happening?Remind me what this was for? IIRC, it was proposed as a way to do tracing, but maybe it has other uses too. ü§î This one is for accessing methods that are necessary in the AbstractTensor class (the PlaceHolder is a child of that class).
In case we have ```PlaceHolder > CrypTensor```, we might call methods from CrypTensor that are not necessary for PlaceHolder.
Another way to do this is to hook all methods from CrypTensor (this to be done in the crypten branch), but in that scenario, we might have methods that might not be generic -- like ```get_plain_text``` (this is implemented only in CrypTensor)Copy pasted from the Crypten branch merge :3 
The trace for the error was this:
```

    @pytest.fixture(scope=""session"", autouse=True)
    def hook():
>       hook = TorchHook(torch)

test/conftest.py:130: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _
syft/frameworks/torch/hook/hook.py:145: in __init__
    self._hook_native_tensor(crypten.mpc.MPCTensor, TorchTensor)
syft/frameworks/torch/hook/hook.py:277: in _hook_native_tensor
    self._hook_native_methods(tensor_type)
syft/generic/frameworks/hook/hook.py:102: in _hook_native_methods
    native_method = getattr(tensor_type, attr)
../../../miniconda3/envs/pysyft/lib/python3.7/site-packages/crypten/cryptensor.py:39: in __getattribute__
    dummy = cls(None)
../../../miniconda3/envs/pysyft/lib/python3.7/site-packages/crypten/mpc/mpc.py:73: in __init__
    super().__init__(requires_grad=requires_grad)
../../../miniconda3/envs/pysyft/lib/python3.7/site-packages/crypten/cryptensor.py:132: in __init__
    self._reset_gradients()
```

What (I think is happening) -- when we hook we use the ```getattr```  -- but that method is changed in the CrypTensorMetaclass (metaclass for the MPCTensor). The problem is when we hook a method and that method is called in the ```getattr``` (in getattr we call an already hooked method and we do not have the syft.hook initialized -- syft.hook is initialized at the end of the TorchHook init method)It is not necessarily a bug, but it might cause a name collision when import hook from syft (in case we do not have the hook initialized syft.hook will be a function)Medium-term plan for `Placeholder` is to make it a plain wrapper that no longer inherits from `AbstractTensor` and uses roughly this approach to forwarding method calls, so I'm not opposed in general. Just wondering why we need it in `master` if it's currently only used for Crypten, which couldn't be merged into `master` last I knew.I was thinking it is a good idea to sync with master the changes that affect the plans, roles or core functionalities (such that the master will have those changes as fast as possible).

Those changes are some (possible) solutions to some problems we faced when merging some PRs.
I was thinking it might be a good idea to have those changes (that affect the syft core) into the master branch."	2	True	2020-04-20 12:39:43	2020-04-24 12:36:19	2020-04-24 12:36:19
https://github.com/OpenMined/PySyft/pull/3376	[]	Rework `PlanTranslatorTorchscript` so it doesn't strip `Parameters`	"Rework `PlanTranslatorTorchscript` so it doesn't strip `Parameters`Resolve Conficts, merge with master
>It turns out `jit.trace()` strips `Parameters` out of the tensor chain,
which causes issues with `fix_precision`. Don't fully understand why
`jit.trace()` does that, but operating on a copy of the original Plan
avoid mutating the original State tensors, which fixes the issue.
@karlhigley #3375"	2	True	2020-04-19 18:20:42	2020-04-19 19:31:10	2020-04-19 19:31:10
https://github.com/OpenMined/PySyft/pull/3372	['bug ', 'testing ']	Skip the privacy attack notebooks during notebook tests	"Skip the privacy attack notebooks during notebook testsThe black box model inversion notebook is downloading EMNIST and using
up all the space in the automated test environments."	2	True	2020-04-17 15:31:52	2020-04-17 16:18:38	2020-04-17 16:18:38
https://github.com/OpenMined/PySyft/pull/3370	['bug ']	Don't assume `self` is in `known_workers` in `BaseWorker.serializer`	"Don't assume `self` is in `known_workers` in `BaseWorker.serializer`That assumption makes it possible to have a case where `known_workers`
is empty, which leads `len(frameworks) == 1` to be `False`, which
defaults to the wrong serialization strategy when `self.framework` is
`torch`.

Fixes #3359"	3	True	2020-04-17 14:46:59	2020-04-17 16:20:02	2020-04-17 16:20:02
https://github.com/OpenMined/PySyft/pull/3364	[]	Add method to add/remove operations from base worker	"Add method to add/remove operations from base workerFixes #3363 

Some initial changes to add the mechanism to add/remove methods from a base worker such that it will be able to support the implemented CrypTen operations.

Currently, there is added only CrypTen support, but I choose to implement it in this way (is only an initial draft) such that we could easily add more frameworks in the future.

WIP: Need to add tests to make sure the add/remove mechanism work as intended.

Probably here the import could be globalUse your `supported_frameworks` dict :) maybe don't re-add it if it's already thereDoneWhat exactly is involved in 'Adding crypten support?"" Why would it not be supported by default?There was a discussion [here](https://github.com/OpenMined/PySyft/pull/3254).
Also, added screenshots - I hope I did not miss any information
[ss1](http://swarm.cs.pub.ro/~gmuraru/OpenMined/pic1.png)
[ss2](http://swarm.cs.pub.ro/~gmuraru/OpenMined/pic2.png)

**TL;DR:** We discussed that maybe the framework information might not be contained in the ```BaseWorker``` and we should have a mechanism to register those ""specific framework methods"". If this is not wanted, I can switch to something else  :smile: (Pinged @LaRiffle @karlhigley  in case I missed something)I left it into the method, because making it global it would create an import error.

```worker_support.py``` needs BaseWorker which is not defined :\This should be removed after merging the [Fix plan](https://github.com/OpenMined/PySyft/pull/3422) changesI wonder if we should remove crypten support?.search has changed and now no longer returns pointers right?it's request_search which doesWhat is the role of `types.MethodType` ?Ah ok :) https://stackoverflow.com/questions/37455426/advantages-of-using-methodtype-in-pythonI'm not sure this scales: maybe you could replace the list [add_support_to_worker, remove_support_from_worker] by a dict with ""standard"" keys, so that if you need to has more on them you don't mess up with indicesDoneDoneHmmm...```request_search``` is used if you want to take a plan from the worker that built the plan, right?

In this scenario, the plan is already sent after it was built (to each worker) and the worker will simply search for the plan in the objects they have.We can go for the 0.4.1 which got released after this oneQ: I didn't get why you always change ports George :pWhat about adding the framework name in these functions?

```suggestion
from syft.frameworks.crypten.worker_support import add_support_to_worker as add_crypten_support, remove_support_from_worker as remove_crypten_support


supported_frameworks = {}

if dependency_check.crypten_available:
    supported_frameworks[""crypten""] = {
        ""add_support"": add_crypten_support,
        ""remove_support"": remove_crypten_support,
    }
```Ahh...Because while testing I get the error ""port already in use"" (if the tests fail...I can change it back)Hmm, first I want to merge this [branch](https://github.com/OpenMined/PySyft/pull/3453) and then this should be fixed :DSo you suggest the following:
If we want to run with a plan/jail we add the support to workers and this support should not be removed, until explicitly the user requests thatDoneAh, that's because you have processes still running in the background. I have a script in my workspace that I call if processes keeps running, it's a single command script, might be helpful:

```bash
#!/bin/bash

kill -9 `ps |grep python | awk '{$1=$1};1' |cut -f1 -d ' '`
```### TODO: Don't remove this.Will change this back since the current PR does not have some changes required for tests to be able to pass -- will bump the version in a future PRAll good!"	4	True	2020-04-15 13:05:40	2020-05-13 16:59:16	2020-05-13 16:59:16
https://github.com/OpenMined/PySyft/pull/3358	[]	Adjust comparison thresholds in `test_instantiate_tfe_layer`	"Adjust comparison thresholds in `test_instantiate_tfe_layer`This test has a known issue with sampling from a normal distribution
that might land close to zero, making small absolute errors result in
large relative errors. This bumps the relative tolerance and adds an
absolute tolerance to prevent the test from accepting large absolute
errors on large values that result in small relative errors.

More on this in [Issue #3344](https://github.com/OpenMined/PySyft/issues/3344#issuecomment-612652546)."	1	True	2020-04-14 17:47:21	2020-04-14 18:09:21	2020-04-14 18:09:21
https://github.com/OpenMined/PySyft/pull/3356	['bug ', 'testing ']	Fix flakiness in `test_local_remote_gradient_clipping`	"Fix flakiness in `test_local_remote_gradient_clipping`This test was implicitly relying on `torch.Tensor's` approximate `eq`
when comparing a tensor with a float. Instead, let's compare floats
directly, which makes this test always fail."	1	True	2020-04-14 15:27:29	2020-04-14 17:32:10	2020-04-14 17:32:10
https://github.com/OpenMined/PySyft/pull/3351	[]	Changed costumer to customer	Changed costumer to customerFixed a minor spelling error.	1	True	2020-04-14 00:55:51	2020-04-14 14:37:21	2020-04-14 14:37:21
https://github.com/OpenMined/PySyft/pull/3346	[]	Fix missing `device` param in `test_federated_client.py::test_fit`	"Fix missing `device` param in `test_federated_client.py::test_fit`This test was failing unexpectedly in the automated test suite, which
appears to be due to randomization sometimes leading the `loss` to
increase instead of decrease. In that circumstance, the test would try
to train the model further until the loss decreased, but the line that
trains the model again was missing the `device` param, causing the test
to fail intermittently."	1	True	2020-04-12 16:25:26	2020-04-12 17:05:46	2020-04-12 17:05:46
https://github.com/OpenMined/PySyft/pull/3343	['bug ']	Fix Memory Leak in AST Operations	"Fix Memory Leak in AST OperationsFixes #3316 

## Current progress
- [x] Worker 1
- [x] Worker 2
- [x] Crypto Provider
- [x] Multi Party
- [x] Clean-Up
- [x] Tests


## The Change in Behaviour

<details>
  <summary>Code Used to Test</summary>
  
```python
import torch as th
import syft as sy

hook = sy.TorchHook(th)
alice = sy.VirtualWorker(hook, id=""alice"")
bob = sy.VirtualWorker(hook, id=""bob"")
crypto_provider = sy.VirtualWorker(hook, id=""james"")

torch = th
syft = sy


class Classifier(torch.nn.Module):
    def __init__(self, in_features, out_features):
        super(Classifier, self).__init__()
        self.fc = torch.nn.Linear(in_features, out_features)

    def forward(self, x):
        logits = self.fc(x)
        return logits


def mul(a, b):
    c = a * b
    return c


def add(a, b):
    c = a + b
    return c


alice.clear_objects()
bob.clear_objects()

a = torch.ones(1, 5)
b = torch.ones(1, 5)

a = a.encrypt(workers=[alice, bob], crypto_provider=crypto_provider)
b = b.encrypt(workers=[alice, bob], crypto_provider=crypto_provider)


classifier = Classifier(in_features=5, out_features=2)
classifier = classifier.fix_prec().share(bob, alice, crypto_provider=crypto_provider)


for i in range(3):
    print(""-"" * 20)
    print(f""Alice: {len(alice._objects)}"")
    print(f""Bob: {len(bob._objects)}"")
    print(f""Crypto Provider: {len(crypto_provider._objects)}"")

    c = classifier(b)  # <<<<< Just Toggle Between Operations
    # c = mul(a, b)
    # c = add(a, b)

    print(f""Alice: {len(alice._objects)}"")
    print(f""Bob: {len(bob._objects)}"")
    print(f""crypto_provider: {len(crypto_provider._objects)}"")

```
</details>

![Test](https://i.imgur.com/noAPMr5.png)

<details>
<summary>Same Table in MD</summary>

#### Sorry for the Ugly Table üòÖ
(\<br>'s don't go well in GitHub)
<table>
    <tr>
        <th>Operation</th>
        <th>Current Behaviour</th>
        <th>After Merge</th>
    </tr>
    <tr>
        <td>Addition</td>
        <td>
            <code>==========Iter1==========<br>
            Alice: 4<br>
            Bob: 4<br>
            Crypto Provider: 0<br>
            !!OPERATION!!<br>
            Alice: 5<br>
            Bob: 5<br>
            crypto_provider: 0<br>
            ==========Iter2==========<br>
            Alice: 5<br>
            Bob: 5<br>
            Crypto Provider: 0<br>
            !!OPERATION!!<br>
            Alice: 5<br>
            Bob: 5<br>
            crypto_provider: 0<br>
            ==========Iter3==========<br>
            Alice: 5<br>
            Bob: 5<br>
            Crypto Provider: 0<br>
            !!OPERATION!!<br>
            Alice: 5<br>
            Bob: 5<br>
            crypto_provider: 0</code>
        </td>
        <td>
            <code>==========Iter1==========<br>
            Alice: 4<br>
            Bob: 4<br>
            Crypto Provider: 0<br>
            !!OPERATION!!<br>
            Alice: 5<br>
            Bob: 5<br>
            crypto_provider: 0<br>
            ==========Iter2==========<br>
            Alice: 5<br>
            Bob: 5<br>
            Crypto Provider: 0<br>
            !!OPERATION!!<br>
            Alice: 5<br>
            Bob: 5<br>
            crypto_provider: 0<br>
            ==========Iter3==========<br>
            Alice: 5<br>
            Bob: 5<br>
            Crypto Provider: 0<br>
            !!OPERATION!!<br>
            Alice: 5<br>
            Bob: 5<br>
            crypto_provider: 0
            </code>
        </td>
    </tr>
        <tr>
        <td>Multiplication</td>
        <td>
            <code>==========Iter1==========<br>
                Alice: 4<br>
                Bob: 4<br>
                Crypto Provider: 0<br>
                !!OPERATION!!<br>
                Alice: 12<br>
                Bob: 6<br>
                crypto_provider: 1<br>
                ==========Iter2==========<br>
                Alice: 12<br>
                Bob: 6<br>
                Crypto Provider: 1<br>
                !!OPERATION!!<br>
                Alice: 19<br>
                Bob: 7<br>
                crypto_provider: 2<br>
                ==========Iter3==========<br>
                Alice: 19<br>
                Bob: 7<br>
                Crypto Provider: 2<br>
                !!OPERATION!!<br>
                Alice: 26<br>
                Bob: 8<br>
                crypto_provider: 3            
            </code>
        </td>
        <td>
            <code>==========Iter1==========<br>
            Alice: 4<br>
            Bob: 4<br>
            Crypto Provider: 0<br>
            !!OPERATION!!<br>
            Alice: 5<br>
            Bob: 5<br>
            crypto_provider: 0<br>
            ==========Iter2==========<br>
            Alice: 5<br>
            Bob: 5<br>
            Crypto Provider: 0<br>
            !!OPERATION!!<br>
            Alice: 5<br>
            Bob: 5<br>
            crypto_provider: 0<br>
            ==========Iter3==========<br>
            Alice: 5<br>
            Bob: 5<br>
            Crypto Provider: 0<br>
            !!OPERATION!!<br>
            Alice: 5<br>
            Bob: 5<br>
            crypto_provider: 0
            </code>
        </td>
    </tr>
    <tr>
        <td>nn.Linear</td>
        <td>
            <code>==========Iter1==========<br>
            Alice: 4<br>
            Bob: 4<br>
            Crypto Provider: 0<br>
            !!OPERATION!!<br>
            Alice: 9<br>
            Bob: 9<br>
            crypto_provider: 1<br>
            ==========Iter2==========<br>
            Alice: 9<br>
            Bob: 9<br>
            Crypto Provider: 1<br>
            !!OPERATION!!<br>
            Alice: 13<br>
            Bob: 13<br>
            crypto_provider: 2<br>
            ==========Iter3==========<br>
            Alice: 13<br>
            Bob: 13<br>
            Crypto Provider: 2<br>
            !!OPERATION!!<br>
            Alice: 17<br>
            Bob: 17<br>
            crypto_provider: 3
            </code>
        </td>
        <td>
            <code>
            ==========Iter1==========<br>
            Alice: 4<br>
            Bob: 4<br>
            Crypto Provider: 0<br>
            !!OPERATION!!<br>
            Alice: 5<br>
            Bob: 5<br>
            crypto_provider: 0<br>
            ==========Iter2==========<br>
            Alice: 5<br>
            Bob: 5<br>
            Crypto Provider: 0<br>
            !!OPERATION!!<br>
            Alice: 5<br>
            Bob: 5<br>
            crypto_provider: 0<br>
            ==========Iter3==========<br>
            Alice: 5<br>
            Bob: 5<br>
            Crypto Provider: 0<br>
            !!OPERATION!!<br>
            Alice: 5<br>
            Bob: 5<br>
            crypto_provider: 0
            </code>
        </td>
    </tr>
</table>
</details>Is this needed?Here I guess nothing has changedAs well herewhy do we need copy here?That's not needed finally?Yes. Works without it.
Removed it as it was breaking the inplace operations such as ```__iadd__```, etcDestroys the original share in the due to ```.remote_get()``` (next line) If it's not needed, let's remove it.I don't follow why `requires_grad` controls whether or not we register the response. What's the rationale for that? Can we make it clearer in this code?If these assertions are no longer passing with the changes in this PR, can we flip them around to `assert x.id_at_location not in bob._objects`? Seems like that would reflect the intuitive semantics of `move()`.‚ù§Ô∏è the new garbage collection tests!üëç üëç### If a tensor requires grad, it mustn't get destroyed till the `loss.backward()` is invoked. 
Basically, we shouldn't delete the tensor when `requires_grad` is `True`, but always when its `None` or `False`. So, for it to be preserved till backprop, the tensor has to be registered. Hmm. Well, maybe we could add a comment that conveys that part?

It would probably be clearer if the flag was called `backprop`, but that change would extend beyond the scope of this PR.Currently there is another PR in the happening that fixes some GC issues with the backprop and involves this part of the codebase. I will address your comment in them. üëç@karlhigley Done@karlhigley Done"	2	True	2020-04-12 13:37:35	2020-04-20 11:47:33	2020-04-19 19:54:42
https://github.com/OpenMined/PySyft/pull/3342	[]	Fix Part 3 - Grid applied to Smart Cities and Smart Homes	Fix Part 3 - Grid applied to Smart Cities and Smart HomesUpdate the notebook code snippet connecting the remote grid nodes between each other to aggregate the energy consumption value.	1	True	2020-04-11 20:30:42	2020-04-20 01:08:14	2020-04-20 01:08:13
https://github.com/OpenMined/PySyft/pull/3327	['bug ', 'testing ']	Gradient clipping - add tolerance	"Gradient clipping - add toleranceThis PR is opened as a result of making the tests more robust.

There was a problem with one [test](https://github.com/OpenMined/PySyft/pull/3317) and this PR tries to solve the problemChange such that both return tensors"	2	True	2020-04-08 14:42:20	2020-04-17 16:02:57	2020-04-17 16:02:57
https://github.com/OpenMined/PySyft/pull/3322	[]	Remove unnecessary name off tutorials	Remove unnecessary name off tutorialsThis PR is requested by @H4LL in #3166, just fix my previous mistakes. Ready to be merged directly.	1	True	2020-04-07 22:36:14	2020-04-17 16:12:22	2020-04-17 16:12:22
https://github.com/OpenMined/PySyft/pull/3288	[]	Target correct notebook version	"Target correct notebook versionError coming up:
``` ERROR: syft 0.2.4 has requirement tornado==4.5.3, but you'll have tornado 5.1.1 which is incompatible.```"	1	True	2020-04-01 17:15:35	2020-04-01 17:58:29	2020-04-01 17:58:29
https://github.com/OpenMined/PySyft/pull/3276	[]	FV homomorphic encryption scheme	"FV homomorphic encryption scheme#3097 Implementation of FV (Fan-Vercauteren) Homomorphic Encryption scheme.

Implemented:
- [x] Modulus (PolyModulus, CoeffModulus, PlainModulus)
- [x] IntegerEncoder
- [x] KeyGeneration
- [x] Encrypter
- [x] Decrypter 

@youben11 What's the purpose of the context class if it's only holding the parameters?

This should be with the other comments I think the parameters should be prefixed with a `_` here

```suggestion
        self._poly_modulus_degree = 2
```This is checking for a multiple of two and not a power of twoShouldn't this ValueError be raised after the power of two check?You can use [enumeration](https://docs.python.org/3/library/enum.html) classes hereHow can we benefit from existing implementations like `Crypto.Util.number.getPrime` here?This class will store more attributes in future as the work progress.Thank you for pointing it out.
Actually it is just a suggestion that it should be a power of 2 and in SEAL there is no checking for it. I have changed the section like this.
```
if value >= 2:
    self.__poly_modulus_degree = value
else:
    raise ValueError(""poly_modulus_degree must be at least 2"")
```https://github.com/OpenMined/PySyft/pull/3276#discussion_r401992509
I am not sure about how can we use `Crypto.Util.number.getPrime` because in the current implementation we need to generate primes with the difference of multiple of (2*polymodulus_degree)If you are following the SEAL architecture, then they require a power of two, you can't set the poly_modulus_degree to a value other than powers of two.I updated it for checking the value to be a power of 2.Can't we have the init function take keyword arguments to set the attributes on instantiation?It would be great if the secret_key is a special object and isn't just wrapped around a Plaintext.It would be great if the public_key is a special object and isn't just wrapped around a CipherText.Ok, I will create a new class for itOk, I will create a new class for itWhat's the purpose of round here?I was using a different way of finding random numbers earlier which requires round. I changed the way but forgot that round there üòÅüòÖAre these properties because you want them to be gettable but not settable?This should probably be a docstring.Are these methods functionally private? If so, should probably be prefixed with an underscore.(Matters because docstring coverage can be set to ignore private methods.)This pattern shows up way more in this PR than I've seen anywhere else in the code base. What's the intended purpose?Should be a docstringdocstringdocstringit is just a wrapper class. I am using for making the data(list) more meaningful. I am using the constructor for setting values.Actually, an instance of context object should not change its value once assigned.I like the wrapper class. üëç As I understand, the ciphertext is represented as two (and maybe more when multiplication happens) polynomials c0 and c1, can the documentation reflects that more?Q: why are we holding q_i/t and not q_i?What if the ciphertext has 3 elements? (it is a result of a ct x ct), shouldn't the decryption circuit be [c0 + c1 * sk + c2 * sk ^ 2]_q ?Shouldn't this be polynomial operations? Why is it implemented using element-wise operations?Encryptor maybe?Decryptor maybe?I think we don't need those ones, right? We can always check against Nonesame here, would be helpful  to know how data is organizedsame heresame hereq_i is available in encryption_param. I was holding it earlier but now I removed it and wherever needed I use by accessing from param.You are right. this should be c0 + c1*sk + c2 * sk^2...
Actually I was once thinking when ciphertext can go above 2 in size and for encryption-decryption with just 2, works fine so I just fixed it to 2

I will update itüëç""""""A wrapper class for representing plaintext elements.

    Attributes:
        data: A list of coefficient values of plaintext polynomial.
    
    Typical format:
    [c0, c1, c2...] where ci represents the coefficient of the polynomial.
    """"""""""""A wrapper class for representing public_key.

    Attributes:
        data: A list of values of the public key.
    
    Typical format:
    [ct0, ct1] : where ct0 represents `-(a*s + e)(mod q)` and ct1 represents `a`
    """"""""""""A wrapper class for representing secret_key.

    Attributes:
        data: A list of values of the secret key.

    Typical format:
    [x1. x2, x3...] : where xi is integer denoting -1, 0, 1 in respective modulus. 
    1 is represented as 1
    0 is represented as 0
    -1 is represented as (modulus-1)
    """"""""""""A wrapper class for representing ciphertext.

    Attributes:
        data: A list of lists of integers representing ciphertext.

    Typical format:
    [c0, c1, c2...] where ci represents polynomials(list of integers).
    """"""https://github.com/microsoft/SEAL/blob/f7d748c97ed841376c4a1cdec9e7c978f5e64a95/native/src/seal/decryptor.cpp#L101
That's because they are using NTT. We have two choices here:

1. Use NTT and let it as is
2. Switch to polynomial operations

In both cases it would be helpful to have operations like addition and multiplication between two ring elements (either they are NTT transformed or not) be separated into functions and used across the code base so that updating to NTT isn't a big deal.Ok, I add NTT transformationüëçsk_power can be just a list that we append power in the interationsthis is doing element-wise exponentiation, isn't it?need update I guessneed update -> [c0, c1, ...]I don't think it is element wise. Current secret key is a list of polynomials which is also a list. So I am taking power of every polynomials in secret key.But sk is itself a list of polynomials so taking power shouldn't be taking power of each polynomial individually?Ah yeah!so maybe `sk_power = [[] for _ in range(max_power)]` then you append lists there?"	5	True	2020-03-30 14:27:38	2020-08-25 06:51:51	2020-05-29 19:44:26
https://github.com/OpenMined/PySyft/pull/3271	[]	Remove implicit inplace fix_precision for PointerTensor	"Remove implicit inplace fix_precision for PointerTensorFixes #3261 Q: Is there a scenario where the ```PointerTensor``` is not a wrapper?
```
import torch
import syft

hook = syft.TorchHook(torch)
alice = syft.VirtualWorker(id=""alice"", hook=hook)

x = torch.Tensor([1,2,3])
ptr = x.send(alice)
ptr.child.fix_precision().get()
```Code outside this if block takes care of it (which is not modified).
`(Wrapper)>FixedPrecisionTensor>tensor([1000, 2000, 3000])` is the output, which is correct!Actually I'm not 100% comfortable with copying the  tensor.
What about this?
```python
if self.is_wrapper:
    child = self.child.fix_prec(*args, **kwargs)
    if no_wrap:
        return child
    else:
        return child.wrap()
```
If this works, then I guess we should go in that direction:)It works and this looks better approach!!"	2	True	2020-03-29 14:41:59	2020-03-31 19:44:14	2020-03-31 19:44:14
https://github.com/OpenMined/PySyft/pull/3269	[]	Fix overloading for torch.nn and Functional modules	"Fix overloading for torch.nn and Functional modules This PR fixes the following
- By #3253 the automatic overloading of torch modules was lost.
- By setting up the decorators and an efficient \_\_init\_\_.py, the functionality is restored.
- Also includes the overloading of AvgPooling and Conv2d from torch.nn which were earlier missing
- Move tests from test_precision related to torch APIs to test_nn.py and test_functional.pyI love thatThe problem in the rnn.py fileThe path of the file has to be updated in the omit path for the coverage to pass. Since the original path is used by the test coverage bot, it is failing.  Me toonit: can you put this line next to the one with AvgPool2d?I think you can simplify this `if`s and `else`sDo you think we could remove the import of FixedPrecisionTensor (not in this PR, of course)? I don't think RNN should deal with things at that low a level."	1	True	2020-03-29 03:44:31	2020-04-01 05:00:53	2020-03-31 19:49:17
https://github.com/OpenMined/PySyft/pull/3268	['documentation ']	Added pull request template	"Added pull request template* Pull request templates are a nice feature that helps the contributor to add relevant information about their pull request. 
* They also help the reviewer to verify that the necessary guidelines of contributing have been followed. 
* Thus helping in maintaining the repo. :)It could be useful to have a ""Notebooks"" option as notebook-only PRs don't neatly fit into these optionsI guess they would fit into New feature. By notebooks only do you mean something in the lines of changes to tutorials? If required I can add an option such as ""Added/Modified a notebook in examples"".""New dependencies"" could probably be a checkbox in the `Type of change` list below.Having an entry for tutorials here would be good.The list of files changed is probably overkill, because I can see that from the diff. As long as people have added tests for their changes (as listed on the `Checklist` below) that probably covers 95% of what's useful as a PR reviewer. Since we run the repo tests automatically via Github Action, whatever tests get added need to pass in that environment.

I'd probably drop the `How has this been tested` section for now.I guess it isn't required. Removed it."	3	True	2020-03-28 18:59:17	2020-04-17 16:58:22	2020-04-17 16:08:34
https://github.com/OpenMined/PySyft/pull/3266	['bug ']	Send Dataset_pointer	"Send Dataset_pointer- Added functionality to get a dataset from a remote federated_dataset object without breaking it.
if the user calls `fed_dataset[""alice""].get()` for example that would leave a pointer that points to noting and it will break the whole object 
- also updated the dataset_pointer representation to include (id, owner -> id at location, location)
- Solved issue #3267It's not the part of the code I know the best but do we want to have a more granular way of getting datasets?
For instance, what if a worker wants to get only one of its dataset in the FederatedDataset?Do we really want that? What is the usecase for `get_dataset()`?because if the user used `federated_dataset[worker].get()` that would leave it with a pointer that points to nothing. that will require the pointer to be deleted from the `datasets` dict if we want the `federated_dataset` object to still work. the user won't be able to do it if he doesn't have a deep understanding of the implementation because it will cause errors in other parts of his code like `dataset_loaders` for example. this is a way to keep the object always clean and ready to useit's not mine but I believe this implementation doesn't allow more than one dataset per worker since it uses a dict to store them, if it has {bob:ptr1, alice:ptr2} and you add alice:ptr3 it will replace ptr2 not add it"	2	True	2020-03-28 14:43:54	2020-04-09 17:13:11	2020-04-09 17:13:11
https://github.com/OpenMined/PySyft/pull/3265	[]	Merging tests run_websocket_server.py file 	Merging tests run_websocket_server.py file Solves #2744 Q: Shouldn't there be 1/2 more level of indentation?corrected.Q: Shouldn't here be fl?I think here should be one level lower (4 instead of 5)corrected.I was running on an older version of syft-proto. It has to be fl according to new version.There is also another file in ```webosckets-mnist```. From a first look, they seem identical? Can't one be removedresolved.Even we merge this file and make a new file in the main repo. then there has to be a file in `websockets-example-MNIST` and `websockets_mnist` which call this `start_websocket_servers.py` in the main repo which calls `run_websocket_server.py`. So I think there will be a lot of arguments that will involve which will not make codebase shorter but also make it complex.So I think we have to leave it.Why not use directly the file from ```websockets_mnist```? what other files depend on this one?So you are saying for `websockets-example-MNIST/start_websocket_servers.py` we can use  `websockets_mnist/start_websocket_servers.py` ?Q: Why not simply remove this and in all the places where this was used ad the other one -- what I understand is that we currently have 2 python files and this one calls the other one. My idea is to delete this one and change all the occurrences where we called this file to the other oneI think we can delete this file because its folder doesn't contain a notebook in which it is used. Now, this file is of no use. So I am deleting it.	5	True	2020-03-28 07:56:48	2020-04-04 19:42:47	2020-04-04 19:42:46
https://github.com/OpenMined/PySyft/pull/3258	[]	Model inversion attack tutorial	"Model inversion attack tutorial**This PR**:
Adds a notebook tutorial demonstrating a black box model inversion attack.
This attack creates a model which can recreate data from a target model's outputs.
Created for the Security & Identity team.

**To review**:
* Ensure you can run the notebook from scratch without errors
* Check for spelling and grammar mistakes

_There is no issue relevant to this PR._link is brokenI guess you don't need `*[ `
you could do :
```
torch.nn.Sequential(
     torch.nn.Conv2d(1, 32, kernel_size=5, padding=0, stride=1),  # first Conv layer
     torch.nn.ReLU(),
    etc
```same here `*[` is not neededMaybe this is less assertive but as suggestive: ""this attack could also be applied on much more sensitive data including face images or MRI records."""	3	True	2020-03-26 18:58:56	2020-03-30 19:47:06	2020-03-30 19:47:06
https://github.com/OpenMined/PySyft/pull/3256	[]	Fix the placeholder serialization.	"Fix the placeholder serialization.Fixes #3214. 
The problem was that when reconstructing the network placeholders, the is_wrapper parameter from tensor was ignored.
The apparent issue with parameter serialization was due to the fact that when fetching a plan the wrapper parameter was incorrectly reconstructed as a plain parameter. This is actually done inside the placeholder deserialization function, where the ""is_wrapper"" field is stripped from the parameter tensors inside the instantiate method, hence the missing ""Wrapper"" when printing the deserialized network's parameters.Q: Are the state placeholder still not working? (what output we get if we uncomment this line)What's the problem with state placeholders?(I see that #3214 has something to do with `Parameters`, but not sure what about `Placeholders` is problematic.)Removing this seems questionable, because we do want to be able to instantiate a `Placeholder` with a wrapper tensor.Do we have to compare string representations here? Could we compare the state tensors directly?TIL about `starmap`. üòÉ"	2	True	2020-03-26 14:57:58	2020-03-27 13:17:38	2020-03-27 13:17:25
https://github.com/OpenMined/PySyft/pull/3251	['documentation ']	Fixed arguments documentation of federated_avg method	"Fixed arguments documentation of federated_avg methodThe method 'utils.federated_avg' actually accepts a **dictionary** of models as input, and not a list of models. In fact, the list of models (the dictionary's values) are extracted from the dictionary via models.values().

Following are examples of the actual usage of this method. Look for 'utils.federated_avg'. You'll notice that the variable ""models"" (a dictionary) is actually being passed to the method 'utils.federated_avg'

https://github.com/OpenMined/PySyft/blob/5998f68e6f51d9ec72ba32fe944e8971a598da24/examples/tutorials/advanced/websockets_mnist/run_websocket_client.py

https://github.com/OpenMined/PySyft/blob/a0e888ac4b4da7488e03a8d401c6a198a85ef74c/examples/tutorials/advanced/Federated%20Recurrent%20Neural%20Network.ipynb"	1	True	2020-03-24 07:30:03	2020-03-26 17:59:36	2020-03-26 17:59:36
https://github.com/OpenMined/PySyft/pull/3241	['bug ']	Fix relative imports in example notebooks	Fix relative imports in example notebooks	2	True	2020-03-22 16:34:52	2020-03-22 20:17:15	2020-03-22 20:17:14
https://github.com/OpenMined/PySyft/pull/3205	[]	Sigmoid aprox with tanh + fix sigmoid	"Sigmoid aprox with tanh + fix sigmoidFixes #3131 
Also adds the approximation for sigmoid using the tanh.So basically you're suggesting .inverse() doesn't work ? :(
(The benefit of .inverse is that it's supposed to be faster)But yeah you're right it's failiing apparently sometimes, I was discussing of this two weeks ago on the call with Andr√©typo this should be here :) To improve test speed could we remove the case precision=5 everywhere where it occurs? From what I see =4 is already compelling enough :) Detail a bit the method for people which don't know about numerical stability etcLet's keep this like this, until I come back to trying my approx inverse trickHmm..this is for ```_tanh_chebyshev``` (forgot to put it in the previous PR)"	1	True	2020-03-16 22:45:25	2020-03-22 13:49:23	2020-03-22 13:49:23
https://github.com/OpenMined/PySyft/pull/3199	[]	Improve Plans flexibility	"Improve Plans flexibilityThis PR fixes #3184 

Solved:
* added support when input tensor is also output tensor.
* added a test case when input tensor is also output tensor.

To do:
* check for the number of parameters
* create support for nested structures"	1	True	2020-03-15 17:29:16	2020-03-16 12:39:20	2020-03-16 12:39:20
https://github.com/OpenMined/PySyft/pull/3196	[]	Websocket worker start Error	"Websocket worker start ErrorChanged the tornado version

Closes #3019"	1	True	2020-03-15 09:04:03	2020-03-17 15:47:45	2020-03-15 11:31:48
https://github.com/OpenMined/PySyft/pull/3185	[]	FL Training Plan fix & PyGrid hosting example	"FL Training Plan fix & PyGrid hosting exampleChanges:
 * Fix errors in experimental FL Training notebooks, due to recent Plan/etc. updates
 * Add new ""Host Plan"" notebook that hosts training plan & model params to PyGrid

These notebooks test e2e interactions between PySyft, syft.js, PyGrid."	1	True	2020-03-12 18:43:17	2020-03-13 09:17:39	2020-03-13 09:17:38
https://github.com/OpenMined/PySyft/pull/3162	[]	README.md update: specify python=3.7	README.md update: specify python=3.7As of now, `conda create -n pysyft python=3` will create an environment with python 3.8, which will not be able to run PySift, due to its Tensorflow dependencies. By specifying `python=3.7`, we solve this issue.	2	True	2020-03-08 20:25:43	2020-03-17 23:15:12	2020-03-09 12:40:20
https://github.com/OpenMined/PySyft/pull/3148	[]	Modified securenn to work with >3 parties	"Modified securenn to work with >3 partiesI modified the code to work with N parties instead of just 3. Most of it is straightforward; the only care is in the Share Convert protocol, since wrap(a0, a1... an, L) can be any number from 0 to n-1 instead of 0 or 1 (as is assumed in the paper).

Partial fix for #2631Don't call get() but move() instead, and move to the first worker for example. The local worker should see this values as you commented, but the other workers can: it's a public value that they all own.I don't think we usually link the author's name in the codebase, this PR already shows you were the one who implemented this change :)!I don't think this is correct, what you want instead is something like:
`children=[torch.tensor([worker_indx]).send(worker, **no_wrap) for worker_indx, worker in enumerate(workers)]`sameInstead of adding comments on top of the function follow the google style guide for python: http://google.github.io/styleguide/pyguide.htmluse worker instead of w, it makes it easier to understand the code  :)samesamesameI guess this is fine, `j` is here to make sure you add some value only once. But maybe I'm wrong

<img width=""452"" alt=""Capture d‚ÄôeÃÅcran 2020-03-08 aÃÄ 17 02 41"" src=""https://user-images.githubusercontent.com/12446521/76166409-a158e880-615e-11ea-95d6-70817d1c68a4.png"">
Where and how should I add the test?Add a test close to the one for secure_nn (I think it's the comparison tests in precision.py or additive_sharing.py)
Where you put more than 2 share holders (maybe 3 and 4 is fine)Looking at 'test_additive_shared.py', the tests have the form 'def test_stuff(workers): alice, bob = (workers['alice'], workers['bob']).
Should I add new tests without these assumptions or change the existing ones? Also, where are these tests called?As you want, take the cleanest option :)

To run you tests:
`pytest <path>/test_additive_shared.py` Done! Do you see anything else to add/fix, or can we proceed with the merge?"	15	True	2020-03-06 12:50:32	2020-05-06 10:22:37	2020-05-05 12:42:18
https://github.com/OpenMined/PySyft/pull/3130	[]	Add documentation	"Add documentationPartially solves #2510
> Added docstrings to test_callable_pointer.py"	1	True	2020-03-02 09:32:32	2020-03-11 13:48:42	2020-03-06 14:18:46
https://github.com/OpenMined/PySyft/pull/3120	[]	Add and refine document	"Add and refine documentThis PR makes a contribution to #2510 

1. Refine tutorial.
2. Remove unnecessary dependencies. 
3. Add document.
Could you use 'R' in place of 'r' such that it follows the same pattern as the above comment (""Create a dataset"")Could you use 'A' in place of 'a' such that it follows the same pattern as the above comment (""Create a dataset"")```Raise an error```Could you use 'A' in place of 'a' such that it is the same as above?Could you use 'A' in place of 'a' such that it is the same as above (with big ""C"")?Q: Maybe remove this comment - I think the attribute name is self-explanatory."	3	True	2020-02-28 22:37:42	2020-03-02 10:41:16	2020-03-02 10:41:16
https://github.com/OpenMined/PySyft/pull/3115	[]	Fix failing tests on master	"Fix failing tests on masterRNG state coupling between tests still needs a more thorough fix, but
this will make the tests pass for now."	1	True	2020-02-27 19:03:44	2020-02-27 19:22:22	2020-02-27 19:22:22
https://github.com/OpenMined/PySyft/pull/3103	[]	Update Part 10 - Federated Learning with Secure Aggregation.ipynb	Update Part 10 - Federated Learning with Secure Aggregation.ipynbUpdate translation, Fixes #2778	2	True	2020-02-26 10:16:54	2020-02-28 18:42:03	2020-02-26 16:30:03
https://github.com/OpenMined/PySyft/pull/3067	[]	Remove decode instruction from tags/description	"Remove decode instruction from tags/descriptionTags and descriptions are no longer received as binary values during the `pointer_tensor.detail` method.
Therefore, we can remove the decoding instructions.
These changes solve  the [PyGrid issue](https://github.com/OpenMined/PyGrid/issues/473)"	2	True	2020-02-19 08:51:26	2020-02-19 15:50:26	2020-02-19 15:50:25
https://github.com/OpenMined/PySyft/pull/3057	[]	Function Secret Sharing	"Function Secret Sharing### About
This PR proposes an implementation and some refinements of Function Secret Sharing.

Function Secret Sharing (FSS) (introduced with great details [here](https://eprint.iacr.org/2018/707.pdf) and [here](https://eprint.iacr.org/2019/1095) is a technique which allows to compute over secret shared data. Details of this cool method will come in a future blog post.

Most interestingly, this is the first internal use of Plans to improve efficiency of crypto protocols by reducing the number of interactions, which is made necessary because the great benefit of FSS over other MPC protocols like SPDZ is the small number of communication rounds.

What's the type of `return_value` here and what is it for? Should be added to the docstring.Does this mean I can set `return_value` to `False` and still get a response? That seems surprising.How does the sender decide whether or not to request a return value?üëç 

We should make `ObjectStorage` work like this too (eventually.)The PEP8 standard for avoiding name collisions with reserved words like `class` to append an underscore like `class_`.@karlhigley This is a way to do a combined remote op + get in a single communication round
Classical workflow in PySyft requires two separate calls, and because in work on low interaction crypto protocols I suggested this optimization.
However, this should only be valid when .get() is valid ie it shouldn't provide extra rights
I have probably left a security issue here... But this idea is not supposed to allow people to do weird stuff!Could you add a line to test that no keys were removed when setting remove to False?Sorry if it's just me but I find using filter with a lambda function less clear than:
`{id_: obj for id_, obj in self._objects.items() if isinstance(obj, FrameworkTensor)}`Could you add some docstring to say how and when it's used?Why are we changing that? Maybe we already answered this question but what is the difference between remote_send and move now?
Because I see written
```
def move():
     return self.remote_send()
```Can't we do `torch.tensor([1.0, 2, 3, 4, 5]).send(bob)` anymore?Why is this translation needed? Couldn't we use directly ""fss_eq"" everywhere?Could you specify the form of the primitive_stacks somewhere in the docstring?
Because I don't know if it could be simpler or if I just miss something ^^What about having a dict attribute instead of using getattr?DoneI agree!Because remote_get is a remote operation which shouldn't change the object you're working on; it's still the same pointerOh no we're doing the opposite!Will fix thisThere isn't much difference actually, except the one you just mention: it's the same remote operation but you get as an answer not the same pointerYou can but I need to keep a ref to `t` :) I've added it :) Not sure it makes a big difference right?Oops, indeed üëç Not at all, it's just that I don't like `getattr` very much ^^
But after having read it again, I'm fine with it""very multi-dimensional"" -> ""high-dimensional"" or something like that?nit: Could this comment be between `"""""" """"""` and not prefixed with `#`?Oh oh, a `#TODO`What about the poor Beaver? üôÅ 
typo `in` -> `is`
Plus, I don't get the end of the comment but maybe it's because I don't know enough about these keysThe `torch.narrow()` method didn't do the job?Would len(primitive_stack) be always the same for each type? (For instance always 3 for beaver)
In this case, we could init self.beaver to ([], [], []), what do you think?Not sure I followed everything but this method never uses already created primitives, does it?
Do you think it could call `get_keys()` and `get_keys()` would return or create keys if there are not enough of them?Could you add a bit of doc here?What is the reason for this to have changed?Will come in a later PR :)
First i'd like to have automatic generation of the preprocessing, and much more (including my FSS numpy PR which is almost pushed)I've added details here!<3 So much better! <3It might vary depending on the implementation. For example depending of the bit precision, (now 32), the number of elements in the FSS keys would change with the current implemThis method is here to feed the different crypto stores, so shat get-keys will work.
It's here to decorrelate preprocessing and online phase: provide_primitives should be called way before the computation really happens, to have a fats online phaseJust a small optimization nothing essential hereRandom thought here.
Isn't it possible to use pointer to plans to request a run?Yes you can, but you need an extra round of communication to get your pointer"	6	True	2020-02-16 16:27:27	2020-05-01 12:07:42	2020-05-01 12:07:40
https://github.com/OpenMined/PySyft/pull/3037	[]	Fix potential medium/high severity security holes	Fix potential medium/high severity security holesIn order to # #3036 to merge on master, some minor edits need to be made and remove the few warnings that show up.	4	True	2020-02-09 05:29:54	2020-02-18 00:52:30	2020-02-18 00:52:30
https://github.com/OpenMined/PySyft/pull/3022	[]	Tutorial Notebook 10 note on numpy hook	"Tutorial Notebook 10 note on numpy hookHi,

I have seen a lot of questions in the community forum about errors when using Part 10 notebook because numpy is not hooked ""yet"". 
I thought it made sense to put a small disclaimer at the top so people are aware. It can be removed once the issue is fixed."	1	True	2020-02-07 19:03:45	2020-02-18 14:24:01	2020-02-18 14:24:00
https://github.com/OpenMined/PySyft/pull/3004	[]	Add tanh Chebyshev approx	"Add tanh Chebyshev approxThis implementation is taken from the FacebookResearch Crypten project[1].
The PR that adds this functionality in Crypten is here[2].

[1] https://github.com/facebookresearch/CrypTen
[2] https://github.com/facebookresearch/CrypTen/pull/45I'm curious, `2 * sigmoid(2 * tensor) - 1`  wasn't precise enough or too slow?In the PR, they say this:
```
Implemented improved tanh approximation that's ~43.5% more accurate (measured by total relative error) and ~33% faster (see n196073).
```
Before this, they also had the implementation using the ```sigmoid```Ok cool!"	1	True	2020-02-03 20:59:50	2020-02-26 16:36:38	2020-02-26 16:36:38
https://github.com/OpenMined/PySyft/pull/2963	[]	Context of computation for crypten	"Context of computation for cryptenThe new context of computation can run parties that are distributed across syft workers. The communication of crypten parties remains the same, however, syft workers handle initialization and the serialization of return values.

The crypten computation done for the moment is a toy function defined at worker level. The exchange of function isn't yet supported for security reasons.

This PR introduces:

- A new message type CryptenInit that lets workers exchange information such as rank of crypten party to run, number of parties involved, and ip and port of the master party.
- A new router for the CryptenInit message type that runs crypten party according to the information received.
- A function decorator (that doesn't distribute the function yet) to distribute the function and run it as crypten parties across workers.

![PySyft-Crypten-context-of-execution](https://user-images.githubusercontent.com/21220087/73119691-cd7d2900-3f65-11ea-91aa-afd70c8f8aee.png)


#### TODO

- [x] Tests
- [x] Add CryptenInit message to protobuf OpenMined/syft-proto#30Is there any importance to join first the process and then the thread?Can you do stuff like this?
```python
alice_t = crypten.cryptensor([73, 81], src=0)
bob_t = crypten.cryptensor([90, 100], src=1)
out = (alice_t + bob_t).get_plain_text()
```No, we can even later try to make it non-blocking.Just tested this locally to make sure. It works perfectly.```python
>>> import torch
>>> import crypten
>>> import syft
>>> from syft import WebsocketClientWorker
>>> from syft.frameworks.crypten.context import run_multiworkers
>>> 
>>> 
>>> hook = syft.TorchHook(torch)
>>> alice = WebsocketClientWorker(hook=hook, id=""alice"", host='127.0.0.1', port=8777)
>>> bob = syft.VirtualWorker(hook=hook, id=""bob"")
>>> 
>>> @run_multiworkers([alice, bob,], master_addr=""127.0.0.1"")
... def test():
...     pass
... 
>>> test()
{0: [163.0, 181.0], 1: [163.0, 181.0], 2: [163.0, 181.0]}
Q: The Thread is done only for the message to arrive ""nearly"" at the same time to all parties?The _send_party_info is blocking, and won't return until all parties are initialized and return their results, we need to send all messages in parallel."	2	True	2020-01-25 10:32:39	2020-02-05 11:04:17	2020-01-31 17:14:28
https://github.com/OpenMined/PySyft/pull/2922	['bug ', 'documentation ']	Update hook.py	"Update hook.pyBased on comment here: https://github.com/OpenMined/PySyft/pull/2913#discussion_r367878631 
`HookedTensor` is missing a `numpy_tensor` argument.
Submitting the fix.I think we actually want to make the reverse change here; the Numpy code got moved over to [NumpyTensor](https://github.com/OpenMined/PySyft/blob/be9e0d894e7fe09cf22f93a3a27ad42a3903a037/syft/frameworks/torch/tensors/interpreters/numpy.py), so we should probably remove both the `numpy_tensor` parameter and the docstring explanation of it.oh okay. fixed it now."	3	True	2020-01-18 01:29:19	2020-01-18 18:00:36	2020-01-18 18:00:19
https://github.com/OpenMined/PySyft/pull/2919	[]	Split notebook tests into separate tests per notebook	"Split notebook tests into separate tests per notebookThis will give us a better idea of which notebooks are failing when we have problems, and should resolve #2880 in a way that doesn't run afoul of the test coverage checker.This notebook is now in the excluded list above.
Maybe test should be skipped then?Hmm, seems redundant subset of previous test.
It should always have the same result as `test_all_non_excluded_notebooks`, no?
The only case when a notebook is untested seems to be when it's outside of `tutorials`, `tutorials/advanced`, or `tutorials/translations` folders, but translated_notebooks are always inside `tutorials/translations`Yeah, this test is partially redundant, but on purpose. What I'm about to do is set up Github Actions so that the basic notebook tests get run on every PR, but the full notebook tests including the translations only get run when something in the examples directory changes. One or the other of these tests will be excluded from the command line in each check suite action.Ah, good catch. I think this test only runs successfully if you first change directories, so it fails if run via the standard parametrization, but passes here."	1	True	2020-01-17 19:11:24	2020-01-19 22:10:49	2020-01-19 22:10:48
https://github.com/OpenMined/PySyft/pull/2909	[]	Hindi translations for Part 5, 6, 13b and 13c	"Hindi translations for Part 5, 6, 13b and 13c@Yugandhartripathi please review the translations for parts - 5, 6, 13b, 13c
<p>Here translator and editor names seems to be redundant as they are also mentioned below author names.</p>
<br/>

 _Reply via <a href='https://app.reviewnb.com/OpenMined/PySyft/pull/2909/discussion/'>ReviewNB</a>_ <div id='ReviewNBCommentContext-DoNotDelete' style='display:none' data-state='RESOLVED' data-cellIndex='0'/><p>English version of notebook doesn't contain any author names. Did you check the history for it? Also, if you can add link to your profile(s) as well.</p>

 _Reply via <a href='https://app.reviewnb.com/OpenMined/PySyft/pull/2909/discussion/'>ReviewNB</a>_ <div id='ReviewNBCommentContext-DoNotDelete' style='display:none' data-state='RESOLVED' data-cellIndex='1'/><p>Remove white space between <code>]</code> and <code>(</code> in links following markdown syntax. Also translator messed up author's github link username part should be <code><a href=""https://github.com/LaRiffle"" target=""_blank"">LaRiffle</a></code></p>
<br/>

 _Reply via <a href='https://app.reviewnb.com/OpenMined/PySyft/pull/2909/discussion/'>ReviewNB</a>_ <div id='ReviewNBCommentContext-DoNotDelete' style='display:none' data-state='RESOLVED' data-cellIndex='1'/><p>Change <code>.‡§´‡•á‡§°‡§∏‡•á‡§ü</code> with <code>.federated</code>.</p>
<br/>

 _Reply via <a href='https://app.reviewnb.com/OpenMined/PySyft/pull/2909/discussion/'>ReviewNB</a>_ <div id='ReviewNBCommentContext-DoNotDelete' style='display:none' data-state='RESOLVED' data-cellIndex='8'/><p>Fix markdown between <code>alice</code> and <code>bob</code>.</p>
<br/>

 _Reply via <a href='https://app.reviewnb.com/OpenMined/PySyft/pull/2909/discussion/'>ReviewNB</a>_ <div id='ReviewNBCommentContext-DoNotDelete' style='display:none' data-state='RESOLVED' data-cellIndex='12'/><p>This is redundant(english ver).</p>
<br/>

 _Reply via <a href='https://app.reviewnb.com/OpenMined/PySyft/pull/2909/discussion/'>ReviewNB</a>_ <div id='ReviewNBCommentContext-DoNotDelete' style='display:none' data-state='RESOLVED' data-cellIndex='16'/><p>Fix markdown syntax for bold it needs double asterisk on both sides.</p>
<br/>

 _Reply via <a href='https://app.reviewnb.com/OpenMined/PySyft/pull/2909/discussion/'>ReviewNB</a>_ <div id='ReviewNBCommentContext-DoNotDelete' style='display:none' data-state='RESOLVED' data-cellIndex='20'/><p>In first line change ‡§™‡§æ‡§á‡§ü‡•ã‡§∞‡•á‡§ï&nbsp; with PyTorch. In 4th <code>‡§è‡§®</code> to <code>n</code>. Fix markdown for all links, proper syntax is [visibleText](actualLink) without any space in between.</p>
<br/>

 _Reply via <a href='https://app.reviewnb.com/OpenMined/PySyft/pull/2909/discussion/'>ReviewNB</a>_ <div id='ReviewNBCommentContext-DoNotDelete' style='display:none' data-state='RESOLVED' data-cellIndex='21'/><p>Thanks Yugandhar!</p><p> </p><p>For some reason, my jupyter notebook doesn't show the 'Authors, ... ' cell. I  had earlier removed it, precisely because the English version doesn't have this information. But apparently, it still somehow lurks in there....  Would you know why?</p><p>Will add github link of my profile here :)</p><p> </p><p>Again, doesn't show up in my Jupyter notebook  :(</p><p>Done!</p><p>Done and done!</p>done!got it!<p>I wonder why it's showing up when it's clearly not in your branch. Anyway I guess it's resolved for now.</p>Then we don't need to worry about it. I got no idea why it's showing up there but as long as branch is clean that's all we want.<p>Change ‡§ü‡•á‡§®‡§∞ to ‡§ü‡•á‡§®‡•ç‡§∏‡§∞</p>
<br/>

 _Reply via <a href='https://app.reviewnb.com/OpenMined/PySyft/pull/2909/discussion/'>ReviewNB</a>_ <div id='ReviewNBCommentContext-DoNotDelete' style='display:none' data-state='OPEN' data-cellIndex='4'/><p>done! :)</p>"	8	True	2020-01-14 19:30:10	2020-02-07 16:03:10	2020-02-07 16:03:10
https://github.com/OpenMined/PySyft/pull/2899	[]	Translation to Indonesian Tutorial - Part 01	Translation to Indonesian Tutorial - Part 01Partial fix #2898	1	True	2020-01-12 09:09:22	2020-01-17 14:50:54	2020-01-17 14:50:54
https://github.com/OpenMined/PySyft/pull/2890	[]	Add tutorial 2 romanian	"Add tutorial 2 romanianPartially fixes #2792. 

Add the 2nd tutorial translation in Romanian."	1	True	2020-01-09 11:56:45	2020-01-14 09:32:47	2020-01-14 09:32:47
https://github.com/OpenMined/PySyft/pull/2871	[]	Make grad_fn serializable	"Make grad_fn serializableSolves #2797 
This PR makes grad_fn serializable.Does this depend on changes in `syft-proto`? If not, we should probably leave the requirement version specification.Yes. I have added GradFunc proto code in proto.json
https://github.com/sukhadj/syft-proto/blob/88b27455905264e9d3e11950936ab2b7e5493aed/proto.json#L159Ah, okay, cool. Could you open a `syft-proto` PR for that change?YesThis file shouldn't be changed I thinksmaeWould you be willing to fix the `AutogradTensor.__init__`  to fix this? Should be very quickMaybe this is not restrictive enough, can you add a check on the type (should be a Tensor I think)Why do you transmit param.child and not param?I think that you can all `syft.serde.msgpack.serde._detail` directly on the list, which would make your syntax lighter:
smthg like this
`cls_name, *grad_fn_params = syft.serde.msgpack.serde._detail(worker, gradfn_tuple)`That must have occurred while resolving the conflicts
It has been restored to the master. :)Fixed.So the problem here is there might be a case where attribute is not a Tensor (consider power in PowBackward function). 
Can you explain a case for which this might not be restrictive enough? My intuition was here we need to push every element of the chain in the tuple (like we do AutogradTensor). But that will be taken care of.
Hence the code is changed and now transmitting param instead of param.child.Hey, I have changed the functions. Please review :)Oh you're right!
My only concern is that if people add new internal attributes to GradFunc, then they will need to add them to this list. But maybe this is ok for the moment. Just change the list to be a set :)Done :+1: This `except` clause is a good idea but doesn't get exercised by the test suite, which causes a CI test failure due to insufficient coverage. Since it isn't used yet, probably okay to remove/comment it and leave a note that `compare` only works for tensors.This seems like a good addition, but doesn't look like it actually gets called anywhere yet. Did I miss it?It was used in how previously garbage_collect_data was handled. Tiny 
```python
if cls == ""GradFunc"":
     cls =  GradFunc
else:
     cls = getattr(gradients, cls)

return cls(*grad_fn_attrs)
```I think you can do 
`self.grad_fn = kwargs.get(""grad_fn"")`DoneYess :smile:"	13	True	2019-12-30 13:46:17	2020-01-13 05:30:51	2020-01-12 18:25:50
https://github.com/OpenMined/PySyft/pull/2867	[]	Update Part 08 - Introduction to Plans.ipynb	"Update Part 08 - Introduction to Plans.ipynbMake code that shows error when non-built Plan is sent to be code cell.
To avoid notebook test fail, wrap this error with try/catch."	1	True	2019-12-28 04:29:15	2019-12-30 10:36:49	2019-12-30 10:36:49
https://github.com/OpenMined/PySyft/pull/2856	[]	Added `String` type to `msgpack/serde.py` to allow serialization	"Added `String` type to `msgpack/serde.py` to allow serializationI added `String` to the `OBJ_SIMPLIER_AND_DETAILERS` list in `msgpack/serde.py` to allow serialization of `String`.

I also added some unit tests for serializing `String` objects and other `str` hooked methods.It seems to be more correct to use `.tag()` and `.describe()` methods to set tags and description.
And when using .tag(), it will be simplified as `set` instead of `list`.Thank you @vvmnnnkv for the review. Actually, `String` type inherits `syft.generic.object.AbstractObject`. That latter has `tags` and `description` as `__init__` arguments, so I followed the same `__init__` method prototype for uniformity. Do you suggest that  I remove `tags` and `description` for `__init__`? Well, there's some type inconsistency with tags.
`syft.generic.object.AbstractObject` constructor stores `tags` as is (in your case as a `list`).
However, `syft.generic.object.AbstractObject.tag()` assumes `self.tags` is a `set` (and makes it a `set` if it's not initialized yet).
So if you set tags to be a `list` from `__init__`, this will probably make further usage of `.tag()` method on that tensor impossible because `list` doesn't have `.add` method.

Also, simplified object will be different because `list` and `set` are simplified differently.
Given that tutorials use `.tag()` method, I'd rather use it instead of passing tags in constructor. Or update what you're passing to `set`. 

Additional issue you'll see is that `set` doesn't preserve order, so if you specify 2 tags (`{""tag1"", ""tag2""}`) it can be simplified as `(CODE[set], ((CODE[str], (b""tag1"",)), (CODE[str], (b""tag2"",))))` or `(CODE[list], ((CODE[str], (b""tag2"",)), (CODE[str], (b""tag1"",))))` and comparison of simplified objects may fail (flaky). See here https://github.com/OpenMined/PySyft/blob/master/test/test_serde_full.py#L104 how to tackle this (or just use 1 tag).
Might be worth sorting the results of set simplification to iron out the flakiness?@karlhigley in serde itself? :)@vvmnnnkv That's what I was thinking. Unless the list of tags is enormous, should be relatively cheap. I don't think there's a standard Python data structure that would move the cost of ordering to the write (rather than read) side, but there could be one I don't know about.Thank you @vvmnnnkv and @karlhigley for the helpful review.

I changed `tags` to a set instead of a list and used a custom comparison function as in `make_set`. This should be good nowWould you please review the new commit? Thank you"	1	True	2019-12-25 12:36:44	2019-12-30 18:56:01	2019-12-30 18:56:01
https://github.com/OpenMined/PySyft/pull/2849	[]	Cleanup Protocol	"Cleanup ProtocolCleans-up `protocol.py` a little bit. In particular:
* Arrange imports to PEP8
* Add doc strings and Args, Returns, Raises where missing
* Adds a couple of inline comments
* Adds missing typehints / corrects some type hints

Overall, errors found when running `mypy syft` have decreased

This PR makes a small contribution to #2510"	1	True	2019-12-20 22:45:09	2019-12-20 23:22:44	2019-12-20 23:22:40
https://github.com/OpenMined/PySyft/pull/2827	[]	fix: fix test_fl_sms on test_notebooks.py	"fix: fix test_fl_sms on test_notebooks.pyCurrently it could fail with os.chdir since changing directory doesn't alter import paths, it changes the directory for opening files, according to [this SO answer](https://stackoverflow.com/questions/23619595/pythons-os-chdir-function-isnt-working). Instead, it should import the module with `sys.path.append` before using `os.chdir`.

The corresponding tests were failing on my machine (Linux) but works fine with this fix.

See original PR: https://github.com/OpenMined/PySyft/pull/2805I think the best solution would be not to call ```os.chdir``` at all. I see [here](https://stackoverflow.com/questions/23619595/pythons-os-chdir-function-isnt-working) - the link you provided - that it has different behaviors on different operating systems.
What I am thinking is to add the ```preprocess.py``` path to ```sys``` and then simply run the notebook (how it is done now).

This will mean that on line 137, notebook will be ```p_name / notebook```.

What do you think?Just for the record... Tried this with @gmuraru but it doesn't work so the best solution is the current one on the PR."	3	True	2019-12-16 21:50:50	2020-01-17 19:14:02	2019-12-21 00:05:08
https://github.com/OpenMined/PySyft/pull/2814	[]	fix: Translation issues in hindi notebook 1 in example	"fix: Translation issues in hindi notebook 1 in exampleThe changes required in #2787 is done in a6610c0 is unfortunately reverted back in f9c18d1. Sorry for the inconsistencies. The file is now checked and OK.

Thank you  @Yugandhartripathi for pointing the error  

Ref: #2787 
fix: #2787 
See also: #2811 

Signed-off-by: Arkadip <in2arkadipb13@gmail.com>"	1	True	2019-12-11 17:54:02	2019-12-12 15:20:59	2019-12-12 14:36:18
https://github.com/OpenMined/PySyft/pull/2803	[]	Add prototype of parameters() for pointer plans	"Add prototype of parameters() for pointer plansThis requires to fix hook_args registration

Usa case targeted:
```python
import torch
from torch import nn
from torch import optim
import syft as sy
hook = sy.TorchHook(torch)
sy.local_worker.is_client_worker = False # To register objects locally
bob = sy.VirtualWorker(hook, id=""bob"")
alice = sy.VirtualWorker(hook, id=""alice"")
# A Toy Dataset
data = torch.tensor([[0,0],[0,1],[1,0],[1,1.]], requires_grad=True).send(bob)
target = torch.tensor([[0],[0],[1],[1.]], requires_grad=True).send(bob)
# A Toy Model
lin = nn.Linear(2,1)
class Net(sy.Plan): 
    def __init__(self):
        super(Net, self).__init__()
        self.fc1 = nn.Linear(2,1)
    def forward(self, x):
        x = self.fc1(x)
        return x
model = Net()
opt = optim.SGD(params=model.parameters(),lr=0.1)
model.build(torch.tensor([[0,0]]))
model = model.send(bob)
def train():
    # Training Logic
    for iter in range(20):
        # 1) erase previous gradients (if they exist)
        opt.zero_grad()
        # 2) make a prediction
        pred = model(data)
        # 3) calculate how much we missed
        loss = ((pred - target)**2).sum()
        # 4) figure out which weights caused us to miss
        loss.backward()
        # 5) change those weights
        opt.step()
        # 6) print our progress
        print(loss.get().data)
train() 
```Q: I have an idea, but I do not know if it is a good one or not. What do you think of linking issues directly in the code? (like create the issue and put the issue number as comment)Definitely a good idea :)I don‚Äòt think it is a good idea to link github issues in code, this should be separated. Not every part could be matched to one issue over time. And imagine e.g. moving to gitlab ;-).Yeah, I don't think every part could be linked to an issue (that's what the history and `git blame` are for anyway), but it might be helpful in `TODO` comments to be able to link to an issue with further info and discussion so that stuff doesn't have to live in the comments. I have no strong opinions here, just wanted to chime in to say that I can see potential value. ü§∑‚Äç‚ôÇ I 100% support TODO: <link to issue>"	3	True	2019-12-10 00:04:50	2019-12-27 14:19:45	2019-12-27 14:19:44
https://github.com/OpenMined/PySyft/pull/2787	[]	feat: Added the Part 01 Tutorial in Hindi	"feat: Added the Part 01 Tutorial in HindiRef: #2774 

- Created a Hindi folder inside tutorial folder
- Translated Part 01 - The Basic Tools of Private Deep Learning in Hindi

Signed-off-by: Arkadip <in2arkadipb13@gmail.com>Like can be changed with star here for following through with proper terminology. Correct tensor translation and change ‡§Æ‡•Å‡§ù‡•á with ‡§Æ‡•Å‡§ù‡§™‡•áSpacing issue with x_ptr need to swap out space in backticks to the left. I think data outside parenthesis here(‡§°‡•á‡§ü‡§æ (‡§°‡•á‡§ü‡§æ ‡§ï‡•á ‡§∏‡§æ‡§•)) should be tensor instead. What do you think?Also in the last line here word pointers is replaced with ‡§∏‡§Ç‡§ï‡•á‡§§ need to fix that for it to make senseAgain change ‡§∏‡§Ç‡§ï‡•á‡§§ with pointers here.  It seems the translator interprets pointers as in tips or signals when it falls in the last part of a sentence.‡§ü‡•á‡§®‡§∞ to TensorTonsor to Tensor""‡§π‡§Æ (‡§°‡§ø‡§´‡§º‡•â‡§≤‡•ç‡§ü ‡§∞‡•Ç‡§™ ‡§∏‡•á) ‡§π‡§Æ‡•á‡§∂‡§æ ‡§π‡§Æ‡§æ‡§∞‡•á ‡§≤‡§ø‡§è ‡§è‡§ï ‡§π‡•ã‡§§‡•á ‡§π‡•à‡§Ç"" does not seem to have the same meaning as ""we (by default) always have one for us as well""‡§ü‡•á‡§®‡§∞‡•ç‡§∏ to Tensor  
‡§™‡•â‡§á‡§Ç‡§ü‡§∞‡•ç (Pointers) ‡§∏ move last letter to left of parenthesisCommend to Command  
"" ‡§è‡§ï Tensor z ‡§¨‡§®‡§æ‡§Ø‡§æ, ‡§î‡§∞ ‡§´‡§ø‡§∞ ‡§™‡•â‡§á‡§Ç‡§ü‡§∞(Pointer) ‡§ï‡•ã ‡§π‡§Æ‡•á‡§Ç ‡§µ‡§æ‡§™‡§∏ z ‡§ï‡§∞‡§®‡•á ‡§ï‡•á ‡§≤‡§ø‡§è ‡§µ‡§æ‡§™‡§∏ ‡§ï‡§∞ ‡§¶‡§ø‡§Ø‡§æ!"" needs a fixRemove ‡§∏‡§ø‡§∞‡•ç‡§´ that makes it sound restrictive.Like to star for proper terminologyChange PySyft GitHub to PySyft GitHub Issues"	4	True	2019-12-06 02:45:54	2019-12-11 17:30:15	2019-12-08 17:21:32
https://github.com/OpenMined/PySyft/pull/2762	[]	Complete serde unit tests	"Complete serde unit testsThis is for issue #2654
PR tries to fully cover serde with unit tests. As a byproduct it also kind of documents how serde simplifies values (by providing reference simplification samples) and reveals some inconsistencies in how simplification is done.

New `test/test_serde_full.py` contains 3 generic tests:
1. test_serde_coverage: check that all serde types (loaded in serde.py) are included in tests
2. test_serde_roundtrip: roundtrip a value through serde and compare it to itself after that
3. test_serde_simplify: simplify a value and compare it to reference value

`samples` dict that contains samples for each serde type is supplied to these tests.

Additionally, there're few fixes here to make tests pass:
 * Exceptions simplify/detail 
 * Autograd tensor init (to properly use values sent by detail fn)

I had to exclude this file from black formatting because it squashes reference simplification examples and makes them less clear.
Since these tests also function as documentation for consumers (like the JS and Android workers), they would be a little easier to read if the samples were dictionaries. Readers wouldn't have to keep the format in mind from this comment at the top. Might also be helpful in the case where a change breaks one or two tests and someone navigates directly to them without reading the whole file.:+1:I agree on this point, but more because of `test_serde_simplify` which is not 100% clear because it uses indices of the tuple.
By the way, I see that when you define a `compare` function, you always do for 1 (custom_detailed_values_comparison_function ?) and the other one (custom_simplified_values_comparison_function ?) is always None, is this last one needed?@karlhigley Please take a look now?Thanks, that helps! Turns out I was misreading the examples the first time. üòÖ"	6	True	2019-11-30 20:40:48	2019-12-08 17:17:48	2019-12-08 17:17:48
https://github.com/OpenMined/PySyft/pull/2757	[]	Issue regarding library path and tests	"Issue regarding library path and tests## Description
Rename ```federated``` to ```fl``` in the MNIST tutorial and solve indentation issue.
Add ```.gitignore``` file such that datasets from ```examples``` would not be taken into consideration by git.

## Testing
[x] Run the tutorials and validate that they work.Is this output expected?sameI think the indentation was correctIs this not needed?Nope. will remove themAlso, will remove this oneYes, it was ok :(...my badI moved at the top of the file - but rerun the examples and it seems it is ok how it is now."	1	True	2019-11-25 23:20:09	2019-12-09 20:24:56	2019-12-09 20:24:56
https://github.com/OpenMined/PySyft/pull/2755	[]	[MRG] Notebook test	[MRG] Notebook testAutomated testing of Notebooks using Papermill. Reopened this after some Repo problems.shall we make it as a global variable to make a bit more transparent? this is great, that we can just pass such parameter! üëç Why do you need to separate these? besides the pathgood question, I did initially because the tests where hard to debug and taking long. But I was thinking to work with a more general approach soon because that way new notebooks are discovered and don't have to be added manually.I though it's because you wanna give different timeout or so, but I do not think it's currently the case :)	16	True	2019-11-24 17:01:41	2019-12-09 22:47:24	2019-12-07 19:20:24
https://github.com/OpenMined/PySyft/pull/2749	[]	Fix import in worker Docker image	Fix import in worker Docker imageWebsocketServerWorker should now be imported from syft directly instead of syft.workers.	1	True	2019-11-20 18:08:24	2019-11-20 18:43:24	2019-11-20 18:43:23
https://github.com/OpenMined/PySyft/pull/2746	[]	Fixed SMPC tutorial link	Fixed SMPC tutorial linkFixed SMPC tutorial link	1	True	2019-11-19 08:18:42	2019-11-19 14:45:21	2019-11-19 14:45:21
https://github.com/OpenMined/PySyft/pull/2741	[]	Create tensor directly on worker - zeros, tensor, rand, randn	"Create tensor directly on worker - zeros, tensor, rand, randnFixes #2678

Added hooks for ```torch.zeros```, ```torch.rand``` and ```torch.tensor``` directly into the ```BaseWorker``` such that we could do:
```
alice = sy.VirtualWorker(id=""alice"", hook=hook)
x_ptr = alice.tensor([1,2,3]) <- create the tensor [1,2,3] at alice and return a pointer
```

### Tests
[x] Added unit tests for VirtualWorker, BaseWorker and WebsocketClient
[x] Unit tests for whitelisted and not whitelisted methods
[x] Add a simple way to extend the ```remote``` call with other frameworks (like ```tensorflow```)Q: @LaRiffle should I also copy those two tests in the ```test_websocket_worker```would be a good idea!
just an info:
prefer to do:
```
def test_send_command_whitelist(workers):
    bob  = workers[""bob""]
    ...
```Had to move those here because of the following scenario.
1. In the tests we spin up the ```Websocket Server``` and ```Websocket Client```
2. Create one client and get a ```ConnectionRefused```
3. Create the second client and for this one ```line 149``` will run, which will override the ```remote``` attribute.
4. ```Remote``` contains the ```torch``` attribute (is a ```Torch``` instance - class that can be found in the hooks for the torch framework)  and the ```Torch``` instance contains an attribute ```worker``` that is a weak reference to ```self```.

The problem is that remote would get copied into the new ```WebsocketClient``` and we will have a reference to an item that should be garbage collected + ```ws``` attribute from ```WebsocketClient``` would be ```None``` (since we got a ```Connection Refused``` with the first client).

In the end there will be generated an error caused by the function ```_forward_to_websocket_server_worker``` because ```self.remote.torch.worker.ws``` <--- the one that was refused is```None```"	4	True	2019-11-17 02:04:48	2019-11-20 14:40:51	2019-11-20 14:40:51
https://github.com/OpenMined/PySyft/pull/2733	[]	Fix test_websocket_worker_multiple_output_response unit test	Fix test_websocket_worker_multiple_output_response unit testAdded worker arg to exceptions' `simplify`	4	True	2019-11-14 00:22:36	2019-11-14 10:51:02	2019-11-14 10:50:35
https://github.com/OpenMined/PySyft/pull/2713	[]	Making changes to avoid errors on avgpool layer	"Making changes to avoid errors on avgpool layerThe error arises when a network with AvgPooling layer is used. I realized that the command created for this layer used the path _C_nn and not nn.functional as well as other similar layers, such as MaxPooling.

The problem was reported in this issue:

https://github.com/OpenMined/PySyft/issues/2562

My initial solution was to switch all commands that are using the _C_nn path to nn.functional.




Could we format this as a try except? I would prefer to avoid having the overhead of this on every cmd"	4	True	2019-10-30 12:54:45	2019-12-20 15:23:36	2019-12-20 15:23:07
https://github.com/OpenMined/PySyft/pull/2709	[]	Private Tensors	"Private Tensors- Create Private Tensors
  - [x] Convert Torch Tensor into Private Tensors
  - [x] Serialize Private Tensors
  - [x] Allow/Disallow access to tensor values.
  - [x] Forward tensor methods.
  - [x] Perform Arithmetic Operations.
  - [x] Unit tests.Thinking about this, .send() should have all the same permissions as .get(), causing this to fail. Otherwise I could just try to call .send(me) to get around .get() blocking me.what is the certificate?Why was this necessary to put here? Is this not the same as https://github.com/OpenMined/PySyft/blob/f39a93d085b74f16724633fd12a28c893a724c59/syft/generic/frameworks/hook/hook.py#L365In the final of `_get_hooked_private_method`, we're setting pointers to the result tensor parent(s) and saving the command/operation used to generate it.But thinking about this, It doesn't seem the best way to implement it. Do you have any suggestion?Yes, It makes sense! I'll fix it!It's about SSL/TLS Certificates. We can implement an interface to authenticate companies by their Certificates (like HTTPS/WSS protocols), receiving their encoded public keys (string).Should I wrap it into a mockup class?ah nvm - yours looks good. Yes we could probably compress the code some more but this is readable so I'm happyepic! wrapping in a mockup class might be nice but we can come back to it when the time comesDone!Done!You're a rockstar."	3	True	2019-10-28 17:15:31	2019-12-04 15:29:17	2019-12-04 15:29:16
https://github.com/OpenMined/PySyft/pull/2698	[]	Added missing WebsocketClientWorker.ipynb 	"Added missing WebsocketClientWorker.ipynb The notebook ""WebsocketServerWorker"" states to be a two notebook tutorial. The seccond notebook ""WebsocketClientWorker"" was missing. I copied it from the official colab of the [opend minded homepage](https://www.openmined.org/).

Also I added a minor fix to the code snippet in the notebook. Can you clean the output?You have an error in the output here tooI will clean the output but it is [copied straight from this example from openmined.org ](https://colab.research.google.com/drive/1Je1rk7olA9uTWWaqvvt4_gXf7yX1rTBm) which also includes this lines. May the example there should also be fixed.Or is this output produced as soon as i open it with my colab? I have cleard the ouputs and also moved the Websocket Tutorials to a own folder"	1	True	2019-10-24 18:12:18	2019-11-20 14:50:44	2019-11-20 14:50:44
https://github.com/OpenMined/PySyft/pull/2692	[]	Add python context to base worker	"Add python context to base worker**Changes:**
* Add decorator such that we could have a python ctx by calling a method
* Changed one of the tests that were using the *is_client_worker* member explicitly.

LE: Fixes #2689Q: Should I add new tests to validate that the context manager is working correctly? (and leave the old tests how they were?)
Another way is the one I added here - have a **use_context** parameter and depending on that use the python context or not (I do not like this method that much because it is hard to read).
Third method would be to duplicate the tests and in one test use the parameter explicitly and in another to use the context.
I would like the first method :)

What do you think @LaRiffle?
Thanks!
So you can add a specific test to verify it works as expected, like this one
```
def <...>_test(...):
    assert hook.local_worker.is_client_worker == True
    with hook.local_worker.registration_enabled():
        hook.local_worker.is_client_worker == False
    assert hook.local_worker.is_client_worker == TrueAnd then change all the occurences of the tests where you have the old syntax `assert hook.local_worker.is_client_worker == True` to use context insteadI think it's `finally` right?Yes, my bad"	3	True	2019-10-22 17:52:59	2019-10-29 15:23:16	2019-10-29 15:23:16
https://github.com/OpenMined/PySyft/pull/2691	[]	Fix errors / warnings with test of encrypted linear regression	"Fix errors / warnings with test of encrypted linear regressionThis PR fixes #2680 .

As mentioned in the [Encrypted Linear Regression Tutorial](https://github.com/OpenMined/PySyft/blob/dev/examples/tutorials/advanced/Encrypted%20Linear%20Regression.ipynb), the inputs to the Encrypted Linear Regression model should be standardized. The test I had implemented was simulating data where one of the covariates had a standard error of 10 which was causing overflow"	3	True	2019-10-22 16:57:52	2019-10-22 17:41:14	2019-10-22 17:10:40
https://github.com/OpenMined/PySyft/pull/2684	[]	Added `String` and `StringPointer` types	"Added `String` and `StringPointer` typesI added two new types, `String` and `StringPointer` types. They have have the same API as native 'str' python objects.

In order to use them, here is an example:

```
from syft.generic.string import String

string = String('hello world') # The 'owner' will now be automatically set to syft.local_worker

string_pointer = string.send(bob)
```

It  strikes me that this part should be integrated in the hook file, in order to perform the hook a single time and put all the hook mechanisms at the same place.You might also want to use what's done in hook_args as well which does unwrap the args (_args_adaptor) and wrap the response back (_wrap_return_value), although it might be complicated to adapt. Normally for tensors it's a one-line change in hook_args.pyUse google style for docstingsIf this is relevant, it might be more appropriate to call it `.child` to be consistent with the tensors api@LaRiffle Done
DonedoneHere is a short list of all str method in python, you might want to include more like title or capitalize maybe depending on your usecases: https://www.w3schools.com/python/python_ref_string.aspthis list is duplicate with the other one, try to only define it in one place for consistency purposeI think I already mentioned it but this may fit in the hook_args logicusually it is expected to put ""self"" and not ""self.id_at_location""Add a dosctring to explain the kwargs (like encoding, errors, etc) which is very useful!can't you do just `tags = sy.serde._simplify(string.tags)`?smae here
can't you do just `tags = sy.serde._detail(worker, string.tags)`?I added this list as a class set variable of `String`, so we can get the list by typing `String.methods_to_hook`DoneDoneDoneDoneThat is right, Done!"	16	True	2019-10-19 17:58:53	2019-12-24 16:27:58	2019-12-24 16:27:57
https://github.com/OpenMined/PySyft/pull/2659	[]	Add support for exp and log (with approx) on additive shared tensors	"Add support for exp and log (with approx) on additive shared tensorsThis PR extends the set of operations supported in Additive Sharing using approximations

- [x] Exponential 
- [x] Logarithm
- [x] Inverse
- [x] Sigmoid

Fix #2537Should this just be other - self?Should this live in polynomial tensor instead of here?Should this be an int or a long?Same with both below functionsThese should also have citations, since the inspiration comes from CrypTen. I'd say it's not substantial enough to require that the license be copied, so a simple online comment + link should doNot exactly because `__rsub__(self, other)` is called after `other - self` failed, typically because other was an integer. So we need to reverse arguments.float can be supported tooIndeed, but I think this is a good temporary place until polynomial is ready to receive them and we have a clear strategy to integrate Poly & FixedP.
Also, I've added references to the repo where I analyse, test and adapt those approximations suggested by crypten.Shouldn't we replace the sigmoid approximation by the mathematical definition using the approximated `exp`? Or do you think we lose precision by doing that?

I think we should at least compare the differences between both...Definitely! I'll make a comparison as part of my lib to see what's best, thansk for the suggestionYou're welcome!

Maybe also do a time performance comparison, to see what are the trade-offs between bothThank you for doing that @LaRiffle and @jvmancuso Why is this tested twice? (also tested in `test_add_method()`)This can be removed :)Are you doing this because the approximation results vary significantly depending on the sharing?
If so, do you know when ""bad"" cases occur and how bad they are?I think we might have talked about it at some point but should you use `.inverse()` here?I will remove itYes
No not really... :/Correct!"	3	True	2019-10-11 16:55:00	2019-12-27 17:57:12	2019-12-27 17:57:11
https://github.com/OpenMined/PySyft/pull/2657	[]	Fixed tutorial on Encrypted LR after changes in worker.search()	Fixed tutorial on Encrypted LR after changes in worker.search()	1	True	2019-10-11 13:48:42	2019-10-14 05:39:18	2019-10-14 05:39:18
https://github.com/OpenMined/PySyft/pull/2652	[]	Fix tutorial part 6, to fix issue #1893	"Fix tutorial part 6, to fix issue #1893Added one line to change the default tensor type to fix ```RuntimeError: Expected object of backend CPU but got backend CUDA for argument #2 'source'``` 

Fixes #1893 for Tutorial part 6
Source : https://github.com/OpenMined/PySyft/issues/1893#issuecomment-478717757"	3	True	2019-10-09 05:53:29	2019-10-28 09:24:09	2019-10-28 09:24:08
https://github.com/OpenMined/PySyft/pull/2648	[]	Fix tutorial part 7	"Fix tutorial part 7I modified the optimizer to use Adam instead of SGD and the convergence is going nicely. 
Also increased the batch size as the estimation of the linear classifier will be more stable across batches. 
Loss calculation had a broadcasting problem as well.

fixes #2642Why do you have to do this?
You're giving the same references to model parameters to all optimizers so the result should be the same, or not? (I don't know how Adam works)I don't remember exactly the reason, but currently in PySyft having one joint optimizer across locations doesn't work with optimizers that use momentum (including Adam). 
And I switched to Adam as searching on internet I noticed that other people had problems getting the training to converge with SGD as well.Oh yes you're right, the pb is with momentum!"	1	True	2019-10-08 15:21:55	2019-10-09 07:44:28	2019-10-09 07:44:27
https://github.com/OpenMined/PySyft/pull/2639	[]	Currently virtualworker search requires a list	"Currently virtualworker search requires a listThis PR should fix the non-working notebook (Part 05 under the `/examples` folder).  The reason for it is such:

`VirtualWorker.search()` requires a list (i.e. `VirtualWorker.search(['#boston', '#target'])`)

... while `VirtualGrid.search()` receives params as *args (i.e. `VirtualGrid.search('#boston', '#target')`)

I figure this may or may not be an intentional API change.  But it is a bit confusing.  Until the API standardizes between a list or *args, I've at least corrected the notebook."	1	True	2019-10-03 11:40:40	2019-10-03 12:03:51	2019-10-03 12:03:50
https://github.com/OpenMined/PySyft/pull/2630	[]	Added tutorial for encrypted linear regression and fixed some errors in the LR implementation	"Added tutorial for encrypted linear regression and fixed some errors in the LR implementationWith this PR I added a tutorial to show the correct usage of the BloomRegressor (Linear Regression with SMPC).

I also fixed some errors in the computation of standard errors and p-values."	2	True	2019-09-26 15:17:11	2019-10-03 11:24:12	2019-10-03 11:24:12
https://github.com/OpenMined/PySyft/pull/2591	[]	Generalize and improve hook_args.py implementation	"Generalize and improve hook_args.py implementationNote to reviewer: code review will be easiest here if taken commit-by-commit. Care was taken to make sure that the commit messages are comprehensive and descriptive.

The main purpose of this PR is to generalize hook_args to non-torch frameworks. This was actually a very small amount of work and can be seen in the first and third commits in this PR, however I noticed several problems across the code base that I'm also addressing here:

1. Importing was a struggle after moving files around, because we were often using absolute-ish paths (non-relative paths but importing a lot of things in various __init__.py files throughout the repo).  I've standardized imports to be completely absolute across the repo.  This means that you should _never_ import things from an __init__.py other than the main one in the `syft/` package (which should mainly consist of the user-facing API). If there happen to be any leftover exceptions to this, they are only in packages with very low connectivity with their submodules and other modules, and they were left untouched by accident.
2. After debugging all the import issues related to the above, I realized that the `syft.frameworks.torch.hook_args` module had quite a few circular dependencies with modules that define their own tensor types.  The main reason for this was that hook_args needs these tensor types in its `type_rule`, `forward_func`, and `backward_func` registries, however hook_args was also being used in many of these tensor types' definitions.  To fix this, registering tensor types should now happen in the same module as their definition using [these new functions](https://github.com/OpenMined/PySyft/commit/5f305a538b810e88fea6d2ce2005abd0a647f341#diff-fb445e63f5c3a9effbdbea9651ff3496R93).Can we remove this file?
It fails and Autograd now is very far more this initial notebookI notice it just because you made a change, but you can remove these 2 lines here, they are not usedCan you keep the `/` instead of  `.`?Much better! üôè You did! üéâ You can remove the TODO :)Same :)Same :) (can you just check for all occurences?)This is not generic, I believe at least part of the funcs in ambiguous_methods & ambiguous_functions should in the torch hook_args(torch or syft) -> (framework or syft)
There are some occurrences of torch in this file, maybe juste change them all from ""torch"" to ""framework""?typo ""case""Can we now remove the `if TYPE_CHECKING`?We don't need anymore in this file to put type annotation in strings right?Can you add an import line to make those 3 lines more readable?I understand why you did this, but I wonder if there is not a more pythonic way to trigger this registration?Can you add all main workers as well (socket, etc)?I would prefer to follow the google style guide for import statements: https://github.com/google/styleguide/blob/gh-pages/pyguide.md, saying (section 2.2):

> Use import statements for packages and modules only, not for individual classes or functions. Note that there is an explicit exemption for imports from the typing module.

The advantage is that you always know, from which module your classes are coming from. agreed, totally forgot about theseI recall it breaking several versions back when I added this code, will try againI wasn't too sure about python's scoping when you import objects from modules vs. modules -- will give it a shotopen to ideas!I'm not sure how I feel about it, but I suggest moving this discussion into an issue or the changes into a separate PR. This one is already quite large, and it should be easier to do once imports are standardized after this merges.In certain cases I think we do, e.g. when we need to avoid circular imports or when referring to BaseWorker in its own definitionbut this line can be changed I believe!no longer need it for these pointer classes, but we do need it for FrameworkHook still, so gonna make that changeIt is definitely a discussion that is out of the scope of this pull request. However you are also changing the import statements that fulfilled the google style guide. So we cannot just postpone the discussion.There were very few existing import statements that fulfilled the requirement you quoted, and the existing import statements are clearly not yet standardized, so I don't think that should be a blocker to this PR. I will make an issue and link this thread to it.Why is it need to call global?Why is this one needed? just calling syft. AdditiveSharingTensor doesn't work?or, are you preparing the future? :)yes, this change was from when I was hoping to remove tensors from the main `syft` namespace. I can change it back if we want!Scoping in Python functions is one-way from global --> local, so modifications made to this variable will not be retained outside of this function unless we call `global` (or at least `nonlocal`).But to the larger question of why we need to do this whole registration business, it's so that we can register classes from outside of this module in these dictionaries/sets without importing such classes.Let's keep it for now :)> But to the larger question of why we need to do this whole registration business, it's so that we can register classes from outside of this module in these dictionaries/sets without importing such classes.

I totally understand and agree with this



> Scoping in Python functions is one-way from global --> local, so modifications made to this variable will not be retained outside of this function unless we call `global` (or at least `nonlocal`).

Have you tested it without global? I tried a simplified version of it, and it didn't seem necessary to turn this globalYes, it should work if you call them all in the same module, but `global` is necessary when calling these registration functions from a different module, which is the intended usage."	4	True	2019-09-05 23:12:58	2019-09-09 11:16:40	2019-09-09 11:16:39
https://github.com/OpenMined/PySyft/pull/2584	[]	Pulling out generic frameworks logic into syft/generic	Pulling out generic frameworks logic into syft/genericPreviously, generic code that different frameworks shared was living in the syft/frameworks code. This meant we had generic code in more than one place (both `syft/generic` and `syft/frameworks`), which was a bit strange, but also introduced some problems around importing from/inside external packages framework packages. This PR fixes those issues by moving all framework-related generic logic into a `syft/generic/frameworks` subdirectory, leaving `syft/frameworks` purely as an entry point into the frameworks themselves (which will eventually be migrated out of the main PySyft codebase per OpenMined/rfcs#3).	1	True	2019-09-03 19:24:31	2019-09-04 15:13:34	2019-09-04 15:13:33
https://github.com/OpenMined/PySyft/pull/2575	[]	Fixed performance issue due to mul_and_div	"Fixed performance issue due to mul_and_divThis fix solves the problem of performance of RNNs and activation functions such as `sigmoid` and `tanh` in MPC.

Time execution of a `sigmoid` on a (2, 1) tensor decreased from 15s to 0.18sWould be nice to modularize time monitoring. I suggest to create a function `assert_time_is_less_than(func, time=1)`, that implements this logic. This should be stored in another file at the efficiency-tests folders named `efficiency_assertions.py` (or something similar).Great idea! It would help benchmark different parts of our codebase and see how various optimization would help. Yeah, good idea! What do you think about a decorator for that?niceYes!! Decorators are great for this."	1	True	2019-08-29 09:33:34	2019-09-03 11:35:41	2019-09-03 11:35:40
https://github.com/OpenMined/PySyft/pull/2545	[]	Fixing RNN tests	"Fixing RNN testsAfter a recent merge, the tests for RNNs take a _very_ long time to complete, slowing down CI and local dev testing by nearly an order of magnitude. This PR patches it by moving the tests to a separate integration folder that are only run by CI on merge. I've also reduced the hyperparameters all to 2 to try to improve speed as much as possible.

As a side note, the length of time it takes to complete each test leads me to believe that RNNs are generally not suitable to be computed fully with MPC, and I'd suggest users search for alternatives as often as possible :)Could you add pytest integration after the coverage checking? We want to make sure that integration tests pass before merging (but as a separate stage)I was thinking having integration as a top level folderthe tests rely on shared fixtures with other tests. I was thinking of pulling those fixtures into a common module elsewhere but this seemed simplerthis coverage run includes the integration tests since the `integration/` folder is a subdirectory, so they will block merging if they failThat a good point. That being said could you also add a target which only runs the integration tests?I was saying to run them seperately. The idea being that if unit tests fail, we don't want to bother running the integration tests since they're slowwill dogotcha, will do!"	1	True	2019-08-22 15:08:14	2019-08-24 15:08:24	2019-08-22 18:27:28
https://github.com/OpenMined/PySyft/pull/2543	[]	fix: spdz_mul fails when values are shared between more than 2 workers	"fix: spdz_mul fails when values are shared between more than 2 workersTo reproduce:
```python
import torch
import syft as sy
hook = sy.TorchHook(torch)

# Create > 2 workers
bob = sy.VirtualWorker(hook, id=""bob"")
alice = sy.VirtualWorker(hook, id=""alice"")
bill = sy.VirtualWorker(hook, id=""bill"")

# And share between them all
x = torch.tensor([25]).share(alice, bob, bill)
y = torch.tensor([5]).share(alice, bob, bill)

# Multiply tensors
(x * y).get()
```
Get TypeError
![image](https://user-images.githubusercontent.com/24773652/63514239-594fdc80-c512-11e9-94db-13492c25ff0e.png)"	6	True	2019-08-22 12:26:33	2019-11-20 15:27:18	2019-11-20 15:16:39
https://github.com/OpenMined/PySyft/pull/2497	[]	Add error message when passing internal_type if not needed	"Add error message when passing internal_type if not neededJust a small modification to send a more informative error message when the user sets `internal_type` using `.fix_prec()` on a tensor that does not need large precision.


When doing, for instance, 
`torch.tensor([1.5, 2.0, 3.0]).fix_prec(internal_type=torch.int16, precision_fractional=3)`

The error message was:
TypeError: __init__() got an unexpected keyword argument 'internal_type'

Now, it is:
TypeError: internal_type not needed if data does not need LargePrecisionTensor to be storedDoes this need to be a TypeError? Or is a warning sufficient? 
What happens if you just ignore the internal_type argument? Would the code would work correctly?The error originally sent was a TypeError so what I did is just to catch it just before and send it with another message.
But I agree, we could remove this attribute from the kwargs and raise a warning, it would work the same. I also thought about this and wasn't sure what was the best. Do you prefer this solution?My preference would be on removing the needless argument and emit a warning. And maybe change the message to make it clear that internal_type should not be provided (not just not needed) in this case.Fine, I'll do that :)Done
It is now clear that the argument should not be provided but I find it weird because the user might not know that his tensor does not need large precisionLooks good to me. @robert-wagner Any comments on the usage of warnings?"	1	True	2019-08-12 22:18:21	2019-08-21 12:49:36	2019-08-21 12:49:36
https://github.com/OpenMined/PySyft/pull/2492	[]	Remote Gradient Clipping for PySyft Tensors	"Remote Gradient Clipping for PySyft TensorsCurrently, as noticed by @andrelmfarias in his tutorial, the plain PyTorch `torch.nn.utils.clip_grad.py` method does not work for remote tensors, like the parameters of a remote RNN. This method is essential for preventing the exploding / vanishing gradient problem from occuring with RNNs and their LSTMs or GRU versions. 

I modified the in-place `torch.nn.utils.clip_grad.py` method from the PyTorch 1.1.0 version and adapted it to work in a remote manner, then hooked it to the torch.nn.utils.clip_grad method for PySyft remote tensors.

In the current implementation, I'm overriding the `torch.nn.utils.clip_grad` method, so the plain PyTorch `torch.nn.utils.clip_grad` method is no longer available when hooking PySyft. 

Should I use a different name or hooking strategy for this method, so that both the plain `torch.nn.utils.clip_grad` and the clip_grad_remote can live side-by-side? (one method would operate on plain PyTorch tensors and the other one on PySyft tensors) 

I tested it with the Federated SMS Spam Detection tutorial #2288  and it does indeed seem to be working.

![image](https://user-images.githubusercontent.com/4907418/62819061-1d02a080-bb50-11e9-813f-73d76f1a8e00.png)

P.S: Why are there so many commits being shown below??
Could you replace torch.Tensor(1) by torch.zeros(1)?Done!remove `r`Can you make more explicit in the comment why do we need a specific function for clipping remote tensors? maybe add comments to the lines that were changed and why/how they were changed? Is there a better place to import inf from? six is mostly geared for 2:3 compatabilityCan you add a test to make sure that gradient clipping works locally as wellI replaced it with `from math import inf`. I suppose that should work too?Added! And modified the method to support gradient clipping of local tensors as well.Made the comment at the beginning of the function more explicit about the motivation for having this extra function. Actually, the only two lines changed are the following ones:

```
total_norm = torch.zeros(1)
#Let's send the total norm over to
total_norm = total_norm.send(worker)
```Done!"	2	True	2019-08-10 07:20:52	2019-08-16 16:29:15	2019-08-16 16:29:15
https://github.com/OpenMined/PySyft/pull/2479	[]	fix test_loader to load train data instead of test	fix test_loader to load train data instead of testThis PR fixes issue #2478 :)	2	True	2019-08-09 01:58:32	2019-08-12 10:06:35	2019-08-12 10:06:35
https://github.com/OpenMined/PySyft/pull/2445	[]	Add disable_garbage_collection  flags to native.py  	"Add disable_garbage_collection  flags to native.py  This always returns truewhat is the difference between this and gc?This string is wrongremove this print statementIt should be the same - I thought it might be nice to have a shorthand version. Open to comments there.My point for this is that repoducing the logic in 2 places is bad. If we change one of them and forget to change the other, that leads to unexpected behavior@robert-wagner there's no difference, gc just shorthand form. It was mentioned in the description https://github.com/OpenMined/PySyft/issues/2444

@iamtrask I agree with @robert-wagner, I would suggest we keep the garbage_collection only as it explains its purpose although variable gc is also quite implicit about its usage. 
So which one should we keep?removedFixedfixedgo with Bobby's suggestion - he's usually right :)For clarification, I think we should keep both, just abstract them so that they call the same thing üôÇ emote -> remote. Also could you split this up into 2 lines (its a bit wide on my screen)"	2	True	2019-08-06 20:47:24	2019-08-12 20:11:40	2019-08-12 20:11:40
https://github.com/OpenMined/PySyft/pull/2443	[]	Add support for float_prec() on pointer tensors	"Add support for float_prec() on pointer tensorsCurrently `float_precision()` is not supported for pointer tensors. This code adds support and includes testing for both `fix_precision()` and `float_precision()` on pointer tensors.

Had to manually wrap the response to the `send_command()` as it returned an unwrapped pointer. Might cause issues in the future if later on any change makes the response return a wrapped pointer.Hmm, I don't like that you have to wrap the response for this specific case but not for the others... I think it's worth exploring why this is the case...can you import PointerTensor and use it here?same about importing.can you import FixedPrecisionTensor and use it here?Can you add the same test but for a pointer of a pointer?Can you add the same test but for a pointer of a pointer?I've found why, but I'm not sure how to fix it. the definition of `float_prec()` in `interpreters/native.py` is 
```
def float_prec(self):
    return self.child.float_precision()
```
which differs to `fix_prec()` here
```
if self.is_wrapper:
    self.child = self.child.fix_prec(*args, **kwargs)
    return self
```
What I can see is that it is assumed that a float_precision tensor is wrapped, and must return an unwrapped torch tensor. I see two ways of solving this:

1. check if `self.child` is a pointer, in which case return the wrapped tensor
```
def float_prec(self):
    if self.child is PointerTensor:
        self.child = self.child.float_prec()
        return self
    return self.child.float_precision()
```
2. Check that if a torch tensor has a wrapper, then remove the wrapper, as it is useless. 

The first option is the easiest, but I feel is somewhat dirty to have to manually check for type and specify different behavior. The second one might be out of my knowledge on how to implement it.

What do you think?I agree that 2. looks like a better option. @LaRiffle @robert-wagner do you know if 2. is possible/worth implementing?This should be a FixedPrecisionTensor, right?This should be a FloatPrecisionTensor, right?- Call fix_precision() on the ptr before calling float_precision() (otherwise it doesn't make sense even if it doesn't fail)
- You can use bob._objects[ptr.id_at_location] to inspect a remote object (if you want to check types for example)
- Prefer maybe isinstance(..., ...) instead of type() == ..., it is more robust for sub classesPrefer isinstance(...) to type(...) =="	4	True	2019-08-06 16:52:32	2019-09-10 08:14:01	2019-09-10 08:14:01
https://github.com/OpenMined/PySyft/pull/2437	[]	explicitly call get_obj() from BaseWorker	explicitly call get_obj() from BaseWorkercomplement this fix #2434 looks good to me	2	True	2019-08-02 13:37:31	2019-08-12 09:56:14	2019-08-12 09:56:14
https://github.com/OpenMined/PySyft/pull/2434	[]	fix private tensor disclosure via execute_command	"fix private tensor disclosure via execute_commandPrivate tensors aren't meant to be accessible from a remote client, however, execute_command was getting any object using his id, this fix get the object using the get_obj method that doesn't return private tensors
#2432"	7	True	2019-08-02 08:32:47	2019-08-02 12:05:44	2019-08-02 09:06:25
https://github.com/OpenMined/PySyft/pull/2431	[]	Make the local worker aware of itself on TorchHook creation.	Make the local worker aware of itself on TorchHook creation.This PR solves issue #2430 and issue #2426. When the local_worker is being created, `hook.local_worker` is `None`. Because of this, the local_worker is not added to the `hook.local_worker._known_workers` dictionary, making himself and any subsequent worker unaware of local_worker's existence.	3	True	2019-08-01 20:09:54	2019-08-02 07:43:09	2019-08-02 07:43:09
https://github.com/OpenMined/PySyft/pull/2415	[]	make use of secureNN div for AdditiveSharingTensor	"make use of secureNN div for AdditiveSharingTensorSome problems occurred:
- [x] In the secureNN division, we multiply the divisor by `2**Q_BITS` at some point, which overflows.
- [x] When dividing a FPT>AST by another FPT>AST, the scaling (`base ** precision_fractional`) disappears. We need to override the FPT division to do the inverse of a truncation after the division.

Also secureNN division is super slow""Division of a FPT by an AST not implemented"" would be more clear
Also let's not use FPT & AST abbreviations in our debug messages, people might not know them"	2	True	2019-07-30 22:21:04	2019-08-16 19:05:50	2019-08-16 19:05:50
https://github.com/OpenMined/PySyft/pull/2411	[]	Add encrypted training on MNIST demo	"Add encrypted training on MNIST demoUpdate Part 12 (no wrapper version)
Add a new demo Part 12 bis on MNIST

I would love advice and corrections on the Part 12 bis!Why do you need to use `.refresh()` here? Can't it be hidden?I don't see an easy way of doing it currently, unfortunately :/<p>Is there an existing diagram explaining the third paragraph? I feel that I might have seen it in a tutorial... anyway, a diagram would be nice :)</p>
<br/>

 _Reply via <a href='https://app.reviewnb.com/OpenMined/PySyft/pull/2411/discussion/'>ReviewNB</a>_ <div id='ReviewNBCommentContext-DoNotDelete' style='display:none' data-state='OPEN' data-cellIndex='0'/><p>&nbsp;et -&gt; and (using all my vast knowledge in french I inferred that)</p>
<br/>

 _Reply via <a href='https://app.reviewnb.com/OpenMined/PySyft/pull/2411/discussion/'>ReviewNB</a>_ <div id='ReviewNBCommentContext-DoNotDelete' style='display:none' data-state='OPEN' data-cellIndex='6'/><p>Here we're using a utility function which simultate -&gt; Here we're using a utility function which simulates</p>
<br/>

 _Reply via <a href='https://app.reviewnb.com/OpenMined/PySyft/pull/2411/discussion/'>ReviewNB</a>_ <div id='ReviewNBCommentContext-DoNotDelete' style='display:none' data-state='OPEN' data-cellIndex='8'/><p>Can you comment more about <code>requires_grad</code>, <code>fix_precision</code> and <code>share</code>? Maybe a paragraph highlighting why they are needed and a intuition on what they are doing.</p>
<br/>

 _Reply via <a href='https://app.reviewnb.com/OpenMined/PySyft/pull/2411/discussion/'>ReviewNB</a>_ <div id='ReviewNBCommentContext-DoNotDelete' style='display:none' data-state='OPEN' data-cellIndex='9'/><p>Not sure if this python snippet is formatted correctly (it doesn't seems so at app.reviewnb.com)</p>
<br/>

 _Reply via <a href='https://app.reviewnb.com/OpenMined/PySyft/pull/2411/discussion/'>ReviewNB</a>_ <div id='ReviewNBCommentContext-DoNotDelete' style='display:none' data-state='OPEN' data-cellIndex='25'/>What does refresh() do?So... Division by integers C (or truncation) is a real pain with additive shared tensor:
For fixed precision, values x live in Zq so if x < q/2 you just do x/C and if x > q/2 you do (x - q) / C + q.
But now if you use additive shared tensors, now you have x1 and x2 in Zq, not observable at the same time, with x = x1 + x2 allegedly in Zq. When dividing by C you can't know if x > q/2 and no worker with one share can also decide this...
So we implement a rule of thumb of a paper which works in most cases, provided that the shares are fresh: ie x1 and x2 look like random values in Zq. That's why I need to **refresh the shares by adding shares of 0** because otherwise the division fails.

To the question: should be automatize refreshing under the hood? I really don't know, I need to better understand when it's needed and when it's not, etc.

Anyway thanks for spotting this, I agree it needs further explanations.I vote always refresh() - better to be slow and not scary for new users than the other way around :)New User: ""WTF! Why doesn't division work?!?!?!"" 

is worse than

New User: Hmm - this encryption thing is kindof slow - but i guess it's worth it and will get faster as technology advances.<p>I have the figure you need, I'll add it right now :)</p><p>Haha</p><p>I will, should I also remove this part of the demo, like just call a utility file? I have the feeling that many people asked why sending the data to workers at the beginning (in the FL demos especially), so maybe keeping this magic and moving this to a .py file would be better, what do you think?</p><p>Looks really nice on jupyter notebook (I used `x3 and ""python"" keyword)</p>Yes, but for some mysterious reason if I refresh everytime it doesn't work neither! I need to find when refreshing should automatically be performed. Sounds good - no need to block for that feature as it doesn't pertain to this tutorial directly."	1	True	2019-07-29 17:20:56	2020-01-23 08:42:33	2019-07-31 22:40:19
https://github.com/OpenMined/PySyft/pull/2407	[]	One worker bug	One worker bugIn reference to issue #2392, Single iterator does need to shift worker IMHO.  Thus, for case of 1 worker we can have 1 iterator insetead of general (worker - 1) iterators.	4	True	2019-07-28 23:29:26	2019-08-01 17:40:49	2019-08-01 17:40:49
https://github.com/OpenMined/PySyft/pull/2395	[]	reduced the timeout interval on windows due to C timeval overflowerror	"reduced the timeout interval on windows due to C timeval overflowerrorWebsocketClientWorker call to connect() method fails on Windows due to ""OverflowError: timeout doesn't fit into C timeval"". Reduced the TIMEOUT_INTERVAL in syft/workers/websocket_client.py. After this change WebsocketClientWorker connect() call is successful on Windows."	3	True	2019-07-25 16:21:09	2019-07-26 20:50:33	2019-07-26 20:50:33
https://github.com/OpenMined/PySyft/pull/2364	[]	Added fix_prec for Linear Object	"Added fix_prec for Linear ObjectI encountered the issue
""AttributeError: 'Linear' object has no attribute 'fix_prec'""

while I replaced fix_precision with fix_prec as shown in this tutorial https://github.com/OpenMined/PySyft/blob/dev/examples/tutorials/Part%2012%20-%20Train%20an%20Encrypted%20Neural%20Network%20on%20Encrypted%20Data.ipynb"	2	True	2019-07-17 11:52:30	2019-07-18 15:08:59	2019-07-17 19:06:46
https://github.com/OpenMined/PySyft/pull/2353	[]	Fix operations on pointers to additive shared tensors #2352	Fix operations on pointers to additive shared tensors #2352Fix #2352Can you put the two tests here as separate tests? Having them separate will help with debugging down the line (right now if the first one fails the second one doesn't run)Done!	1	True	2019-07-12 09:19:03	2019-10-26 18:07:05	2019-07-12 18:30:48
https://github.com/OpenMined/PySyft/pull/2349	[]	Implementation of RNNs in python with linear layers for MPC	"Implementation of RNNs in python with linear layers for MPCImplemented all RNN modules available in PyTorch in Python with linear layers for MPC.

Tests of these modules were fine in pure Pytorch. However, I still get errors when I hook torch and run tests under syft.Import rnn as `from syft.frameworks.torch.nn.rnn import ...`Add docstring for this method.raise ValueError instead.Add docstring.I would prefer this to be a (perhaps static) method in `RnnCellBase`.shouldn't we be using `num_chunks`?shouldn't we be using `num_chunks`?shouldn't we be using `num_chunks`?shouldn't we be using `num_chunks`?`# TO DO: implement a nn.Dropout class for PySyft` -> `#TODO: implement a nn.Dropout class for PySyft`

I've just created an issue for this https://github.com/OpenMined/PySyft/issues/2500, please link here as well.Won't this change with `self.batch_first`?same.This part is a bit confusing. Comments could be helpful.

Also, there's a lot of ""repeated"" code, this method could be more modularized.Just checking... shouldn't this be input.shape[1] instead of input.shape[0]?Add docstring.`max_degree = degrees[-1]`I don't think these two variables (selected_weights, selected_degrees) are needed. You can just use weights[1:max_idx] and degrees[1:max_idx] in the for loop.Is this test exactly like `test_simple_rnn` but for GRU? If so, it would be better to add the cell type as a parameter at @pytest.mark.parametrizesame comment.I think a test showing that a RNN trains properly (aka loss decreasing) is a good idea.Will doWill doWill doIndeed it is more coherentOkThis doesn't need to change, as discussed on SlackI agree. I will do itWill doOK, will dohere input.shape[0] is the batch_size and input.shape[1] is the embedding size (exactly as in the PyTorch original RNNCell module: https://pytorch.org/docs/stable/nn.html#torch.nn.RNNCell)

We need to initialize h with shape (batch_size, hidden_size)Will doAgreeOKNot exactly equal, as GRU and LSTM don't have the arg `nonlinearity` that RNN has. I prefer to keep them separated or we will have to iterate twice for GRU and LSTM (by using two values for `nonlinearity`) with no need to do so.I can do only one test for GRU and LSTM and add the pytest decorator, but it might be a little bit messy as I will have some `if`s to handle it, since we have two states (hidden and cell) with LSTM and only one with GRU.

What do you think?Agreehmmm, I think you could just use one argument (something like 'model-type') and you could set it to: gru, lstm, rnn-tanh or rnn-relu. Internally you could deal with the specificity of each model (aka setting the nonlinearity when needed) What do you think?

I think this is better than having 3 different tests that are not actually that different.I see. Ok, I will do like thatI just found out the RNNs are not working with AutogradTensors. It will take a bit of time to debug and implement a test for RNN training.@mari-linhares I implemented a test with federated learning instead. I will work on AutogradTensors in another PR@mari-linhares I have modularized some chunks of code in methods. What do you think about this new version of the code?great!shouldn't it be -1 instead of 2?It's temporally.
After merges from last week, these activation functions got too slow (probably due to several multiplications with degrees higher than 3), so I needed to reduce the max_degree to keep it still doable. The precision we lose by doing this is not that significant and I plan to get back to max_degree=9 after I investigate further the problem with this increase in time execution."	3	True	2019-07-10 20:58:40	2019-08-20 18:24:22	2019-08-20 18:24:22
https://github.com/OpenMined/PySyft/pull/2345	[]	Modularize creation of a websocket worker for tests	"Modularize creation of a websocket worker for testsClean up tests.

Replace `start_proc` to `start_remote_worker` when possible to avoid redundant code.Could we use remote_proxy instead of remote_worker? Because the object previously called local_worker is actually local and not remote. Yet it represents a proxy of the remote worker.Please take a look at the changes in #2386 and #2388. They address another aspect of the websocket connection setup. I wasn't aware (forgot) about your changes to these files. Do we want a default value for port? Or should it always be a required argument?I would prefer another name for remote_worker (as remote_proxy). As this remote_worker instance is the local proxy of the remote websocket server.We can leave the comment, but the syntax is no longer correct. start_remote_worker returns a tuple of values.could you check whether the two lines:
del remote_proxy
and 
time.sleep(0.1)
are necessary?
The main issue with the websocket connections in the tests are connection requests after closing the connections.
These are mostly due to:
 - pointer objects that refer to remote objects (and are in charge of garbage collection) that are deleted at the end of the testport not specified. Is this wanted?
Is there a way to make sure that the process is terminated even when the test fails? I don't see an easy way to implement that right now. It would be easier if the pytest fixture returned a server instance and not the function. (Then you could put it in the teardown code after yield).

If I remember correctly this is one of the reasons for having different port numbers for each test.why did you remove this test?I think we can keep a default value port for the sake of simplicity.indeed, thank you!will do> Is there a way to make sure that the process is terminated even when the test fails?

I think this is out of the scope of this change. But I agree this would be great to have.

> If I remember correctly this is one of the reasons for having different port numbers for each test.

Yes, indeed. As I said before I'm okay with keeping a default port for tests for now, but in a different PR we can deal with automatic different port allocation and handling fails. What do you think?good catch! that was me failing to merge the two files, will add it back.I don't think we need them, getting rid of them.I agree that it is out of scope to catch port issues. 
However there were no port conflicts possible before this pull request, as we used a different port for each test. So I would propose to stick with separate port numbers."	2	True	2019-07-09 20:48:37	2019-08-19 14:59:18	2019-08-19 14:59:17
https://github.com/OpenMined/PySyft/pull/2300	[]	Addition of missing SecureNN protocols	"Addition of missing SecureNN protocolsSolves #2261Have you checked that type(int / int) == int ?Where is this one used?It's used in the maxpool_deriv SecureNN protocolIt's not the case with native Python types but `/`does not change the type of torch tensorsI assume it should also workOk goodWhy 3 here ? The theorem 1 of https://eprint.iacr.org/2017/396.pdf is for 2 parties, have you tried with more? Can you add a docstring to explain the behaviour of this function for people who don't know the original torch.roll?the local client (so P2 in the paper implem) learns here shifts[worker].get().item() which is `i - g mod n` right? Can P2 learn `g` then, and then `r` and then deduce `ind_n`?Can I leave it as it is?I didn't follow you. `shifts[worker].get().item()` is `-(r % n)` (see 4) in the max pool_deriv function).
Thinking again about it, I think it is not secure to have P2 learning the shift because it could retrieve the output of the function...It's a bit hard to explain and I'm not 100% sure it's true but I think that for more shares, one third of them should be transformed with `Q - (Q - val) / div`. It's because it's needed as many times as the sum of shares crosses `Q / 2` when wrapped around the field. As values are concentrated around 0 for a big field and shares are generated randomly, I think that the number of times `Q / 2` is crossed is indeed one third of the number of shares.
Tell me if this is not clear, or even not true. Oh, I remember now!
If we consider the max pool_deriv protocol, `share` and `shifts[worker]` are PointerTensors here, so there should be a way not to get them. But as `shifts[worker]` is a tensor and the roll function takes an int here, I need to use the .item() method which raises an error when called instead of get() on a PointerTensor.
It works if I remove this error raising and if I use shifts[worker].item() but as I don't know why the error was there in the first place, I don't want to break anythingThe sum should be able to exceed 1 right? It should be only 0 or 1The reason why I had sent the mask to another worker is the following: in our construction, the local worker knows the randomness shared by P0 and P1 (because we didn't managed to hide it from him, but maybe we should). In that case, we can't allow the local worker to get and see permuted_mask because otherwise it can inverse the permutation and remove s to get c. So opening the permuted_mask should be made by a worker which don't have access to the randomness, that's why I chose the crypto_provider, but I agree this is not very elegant.I think you're right!It's a good reason, I'll change this back"	4	True	2019-06-18 20:14:13	2019-07-12 11:47:57	2019-07-12 11:47:57
https://github.com/OpenMined/PySyft/pull/2289	[]	POC: asynchronous federated training on MNIST using websockets and jit 	"POC: asynchronous federated training on MNIST using websockets and jit Original PR author is @midokura-silvia #2162 Marianne, there was a reason to have the call to basicConfig at the beginning of the file. It is ugly there, but it does not work if you put it later.
I didn't identify the source yet, but when doing import syft basicConfig seems to be set somewhere already. And any subsequent calls to basicConfig are ignored by the logging library.The spaces are voluntary to align the output of target hist and prediction hist for easier comparison.My bad, I imagined there was a good reason but I forgot to undo the change. Feel free to undo this.Got it, can you add a comment for this?Also, @midokura-silvia can you add a comment to it, something like:

> There is a reason to have the call to basicConfig at the beginning of the file. It does not work if you put it later.Why is only this line no covered?I'm wondering if we shouldn't just define start_proc somewhere in syft as a helper function. It seems like it is defined all over the place>Note The above module-level convenience functions, which delegate to the root logger, call basicConfig() to ensure that at least one handler is available. Because of this, they should not be used in threads, in versions of Python earlier than 2.7.1 and 3.2, unless at least one handler has been added to the root logger before the threads are started. In earlier versions of Python, due to a thread safety shortcoming in basicConfig(), this can (under rare circumstances) lead to handlers being added multiple times to the root logger, which can in turn lead to multiple messages for the same event.

This may be for threading related reasons. I don't thing we should worry much about itThis ovewrites if secure is truewe should not have print statements in testsShould the order be changed here (I prefer the new ordering of pred and target but want to be sure this does not break anything)Same as aboveremove print statements in testsdittoditto for print statementssameWe had similar issues in jupyter since jupyter uses asyncio under the hood. This might be the same issueIs there a reason these are commented outsamesamesamesameSkipif?samesameWhy the port change?I although thought of it. However we now put the setup of the remote datasets inside, so it's not so generic anymore. We have a similar function defined in conftest.py for the unittests.I removed the outdated comment.Is this a problem? Which pattern shall we prefer?
```
a = 1
if condition:
    a = 2
```
or 
```
if not condition:
    a = 1
else:
    a = 2
```8777 was conflicting with the port we use in the tutorials.Sorry let me clarify this. We are setting args['uri'] (in line 68) and never using it. I am fine with this pattern If it is no longer generic this is fineyes, that's a bug. I never tried the secure setup and there are no tests for it. It's the whole function. But probably the examples folder is excluded from the coverage anyhow (need to check).We should have tests for itShould this be here?@midokura-silvia yes, the code using torch.jit does not work with torch version 1.1. While we are waiting for the fix to be released, we need to keep the fixes for torch 1.0.1.Can we update the comment to be in relation to PyTorch 1.1.1 rather than PyTorch 1.0.2 then?Let's add a note, that this is currently only available as insecure connection.+1 to changing it to 1.1.1."	1	True	2019-06-15 19:04:58	2019-06-19 15:19:28	2019-06-19 15:19:24
https://github.com/OpenMined/PySyft/pull/2288	[]	Added Advanced Tutorial Example - SMS spam prediction with handcrafted GRU	"Added Advanced Tutorial Example - SMS spam prediction with handcrafted GRU<p>&gt; In order to address this issue, there are two solutions: Federated Learning with Multi-Party Computation and Encrypted Computation.</p><p><br></p><p>Differential Privacy would be used to make sure the model doesn't give access to some private information.</p><p><br></p><p>Multi-Party Computation (one kind of Encrypted Computation) in return allows you do send the model privately so that the remote workers which have the data can't see the weights you're using</p>

 _Reply via <a href='https://app.reviewnb.com/OpenMined/PySyft/pull/2288/discussion/'>ReviewNB</a>_ <div id='ReviewNBCommentContext-DoNotDelete' style='display:none' data-state='OPEN' data-cellIndex='27'/>"	1	True	2019-06-15 00:12:47	2019-06-15 14:53:38	2019-06-15 14:53:38
https://github.com/OpenMined/PySyft/pull/2262	[]	Add special case for torch function which dont have tensors as input	"Add special case for torch function which dont have tensors as inputFix #2260 
Basically the error was for torchvision >0.2.2
We had a special case to handle"	2	True	2019-06-10 17:43:18	2019-06-10 20:56:17	2019-06-10 18:02:27
https://github.com/OpenMined/PySyft/pull/2254	[]	Fix TFEWorker Windows bug	Fix TFEWorker Windows bugFixes #2250.	3	True	2019-06-07 17:37:45	2019-06-10 19:14:04	2019-06-10 19:14:04
https://github.com/OpenMined/PySyft/pull/2247	[]	introduce and use TFECluster	"introduce and use TFEClusterThis PR solves a concurrency issue in the notebooks where sharing of a model happens before the servers are ready, resulting in an error. The solution here is to introduce the notion of a cluster that binds a set of workers together and is started before a model can be served.

Closes #2242."	6	True	2019-06-07 13:30:41	2019-07-13 00:09:05	2019-07-13 00:09:05
https://github.com/OpenMined/PySyft/pull/2239	[]	Raising error if PointerTensor got called with .item	"Raising error if PointerTensor got called with .itemAn error will be raised if any instance of ""PointerTensor"" got accessed its method ""item"" with an error message telling to consider accessing ""get"" method instead so you can get the item you want safely."	2	True	2019-06-05 17:54:52	2019-06-06 21:59:40	2019-06-06 21:59:40
https://github.com/OpenMined/PySyft/pull/2226	[]	Fixed predict method in RNN jupyter notebook example	Fixed predict method in RNN jupyter notebook exampleFix for issue #2218 by moving the position of the torch.no_grad() call	1	True	2019-06-03 10:09:03	2019-06-03 13:17:50	2019-06-03 13:17:50
https://github.com/OpenMined/PySyft/pull/2220	[]	Update tutorials	Update tutorialsA import error was reported with Pointer in tuto 1	1	True	2019-06-01 21:46:56	2019-06-03 19:07:43	2019-06-01 22:02:09
https://github.com/OpenMined/PySyft/pull/2197	[]	corrected import error for PointerTensor	corrected import error for PointerTensormodified the import statement for PointerTensor to syft.frameworks.torch.pointers from syft.frameworks.torch.tensors.interpreters	2	True	2019-05-30 18:10:25	2019-05-30 18:33:59	2019-05-30 18:33:58
https://github.com/OpenMined/PySyft/pull/2192	[]	fixed notebook ordering	fixed notebook ordering	1	True	2019-05-30 07:15:52	2019-05-30 07:16:26	2019-05-30 07:16:21
https://github.com/OpenMined/PySyft/pull/2188	[]	Modification to have operations between FPT>AST and FPT>torch	"Modification to have operations between FPT>AST and FPT>torchThis seems to be a bit of a hack to me
But it can at least be the start of a discussion about how to enable scalar-FixedPrecisionTensor multiplicationsActually there was an error in .share(): we should add the crypto_provider which can be found in self.crypto_providerSame hereyou can change the signature to be just add(self, _self,  other)samesameHave you added tests for those ""redirections""?I didSome thing here, you can't swap like this because it's a sub op ;)Just wondering, why  `.share(alice, bob, crypto_provider=james)` was removed?Because if some settings we don't want to hide the config used, to the learning rate should be public, ie just a normal fixed precision tensor"	10	True	2019-05-29 22:09:47	2019-06-11 06:39:38	2019-06-11 06:23:25
https://github.com/OpenMined/PySyft/pull/2178	[]	Add tuto on secure aggegration	"Add tuto on secure aggegrationUpdate
https://github.com/OpenMined/PySyft/blob/torch_031/examples/tutorials/Part%208%20-%20Federated%20Learning%20-%20Encrypted%20Gradient%20Aggregation.ipynb<p>This should be a subtitle with the same font size as ""training function""</p>

 _Reply via <a href='https://app.reviewnb.com/OpenMined/PySyft/pull/2178/discussion/'>ReviewNB</a>_ <div id='ReviewNBCommentContext-DoNotDelete' style='display:none' data-state='OPEN' data-cellIndex='3'/><p>This should be a subtitle with the same font size as ""training function""</p>

 _Reply via <a href='https://app.reviewnb.com/OpenMined/PySyft/pull/2178/discussion/'>ReviewNB</a>_ <div id='ReviewNBCommentContext-DoNotDelete' style='display:none' data-state='OPEN' data-cellIndex='5'/><p>is mometum supported? If not: better to remove this option from the notebook otherwise people will try to use it and get errors.</p>

 _Reply via <a href='https://app.reviewnb.com/OpenMined/PySyft/pull/2178/discussion/'>ReviewNB</a>_ <div id='ReviewNBCommentContext-DoNotDelete' style='display:none' data-state='OPEN' data-cellIndex='6'/><p>This should be a subtitle with the same font size as ""training function""</p>

 _Reply via <a href='https://app.reviewnb.com/OpenMined/PySyft/pull/2178/discussion/'>ReviewNB</a>_ <div id='ReviewNBCommentContext-DoNotDelete' style='display:none' data-state='OPEN' data-cellIndex='7'/><p>This should be a subtitle with the same font size as ""training function""</p>

 _Reply via <a href='https://app.reviewnb.com/OpenMined/PySyft/pull/2178/discussion/'>ReviewNB</a>_ <div id='ReviewNBCommentContext-DoNotDelete' style='display:none' data-state='OPEN' data-cellIndex='13'/><p>This should be a subtitle with the same font size as ""training function""</p>

 _Reply via <a href='https://app.reviewnb.com/OpenMined/PySyft/pull/2178/discussion/'>ReviewNB</a>_ <div id='ReviewNBCommentContext-DoNotDelete' style='display:none' data-state='OPEN' data-cellIndex='15'/><p>This should be a subtitle with the same font size as ""training function""</p>

 _Reply via <a href='https://app.reviewnb.com/OpenMined/PySyft/pull/2178/discussion/'>ReviewNB</a>_ <div id='ReviewNBCommentContext-DoNotDelete' style='display:none' data-state='OPEN' data-cellIndex='18'/><p>Nice catch!</p>"	1	True	2019-05-29 11:31:34	2019-06-03 19:08:07	2019-05-29 12:54:09
https://github.com/OpenMined/PySyft/pull/2166	[]	small fix so that the tutorial works with torch 1.1.0	"small fix so that the tutorial works with torch 1.1.0This fixes the exception:
`RuntimeError: set_storage is not allowed on Tensor created from .data or .detach()`
that occurs when running tutorial 4 with `torch 1.1.0`.

Following the fix from [here](https://discuss.pytorch.org/t/api-change-for-tensor-data-set-in-torch-nightly/33310/2), we:

1. just remove the reference to `.data`,
2. wrap the code with `with torch.no_grad()`"	1	True	2019-05-23 23:26:19	2019-05-24 15:59:59	2019-05-24 15:59:59
https://github.com/OpenMined/PySyft/pull/2165	[]	Solving #2117 Conv2d not working in MPC	"Solving #2117 Conv2d not working in MPCfirst commit: implementation without bias, padding, dilationThanks for the addition
Having to add ""torch.stack"" and ""stack"" in exclude_functions is a bug that I will fix in a later PRüëç Much better indeedAgreed, we'll create a kind of dispatch function, but this is also for another PR I believeYes you can use `torch.nn.modules.utils._pair`You have `0 <= c < nb_cols_kernel ` so you shouldn't need the modulo here you might prefer to use .append()Same here I don't think the modulo is necessaryYou can do a bit simpler with the .child stuff here:
```
                res = torch.cat(res, dim=2)
            else:
                res = im_reshaped.matmul(weight_reshaped)

            # Add a bias if needed
            if bias is not None:
                res += bias

            # ... And reshape it back to an image
            res = (
                res.permute(0, 2, 1)
                .view(batch_size, nb_channels_out, nb_rows_out, nb_cols_out)
                .contiguous()
            )
            return res.child
```You should use the decorator `@overloaded.function` which helps you to have a simpler code:
```
                @overloaded.function
                def pad(input_shares, pad, mode=""constant"", value=0):
                    padded_shares = {}
                    for location, shares in input_shares.items():
                        padded_shares[location] = torch.nn.functional.pad(shares, pad, mode, value)

                    return padded_shares

                module.pad = pad
```"	2	True	2019-05-23 21:21:57	2019-05-29 20:27:08	2019-05-29 09:41:01
https://github.com/OpenMined/PySyft/pull/2160	[]	Added support for LSTM and GRU Cells in PySyft and merged PR #1995	"Added support for LSTM and GRU Cells in PySyft and merged PR #1995- Merged changes of Pull Request #1995  with the latest 'dev' branch
- Added support for GRUs, GRU cells and LSTM cells in PySyft
- Added a workaround to fix the forward pass in  LSTMs with LSTM cells by returning a single tensor instead of a tuple of tensors (which seems to lead to errors in case of websockets). 
- Added a workaround to fix the torch.sort method when being executed over websockets by returning a tensor instead of a tuple of tensors.

I found out that returning multiple tensors in a tuple on remote websockets currently leads to a ""ResponseSignatureError"":

https://files.slack.com/files-pri/T6963A864-FJRTUCPSQ/image.pngA line has vanishedThanks for re-using my hack, but actually I'm very unhappy with this hack, I don't think we should use it. I would either try to modify the PyTorch implement to have them use shape instead of size, or try another techniqueSame thing, this is a bit hacky and should not be merged in the code base. I understand that there is a pb, but let's open an Issue about this case when we use function with > 1 output and websocketsWould like to try implementing .dim() for remote tensors ? Could be  a cool contribution
You could rely on the .shape attribute which works for remote tensorsWhich line is no longer there exactly?So should we discard this fix for .size() completely?Okay. I guess this would better fit an issue too.Would it be sufficient to just hook the .dim() method from the original PyTorch, or what exactly would it take to implement .dim() for remote tensors?844: tensor_type and torch_type minus those in the exception listYes, because we can't modify the hook at runtime it will be far too slow and bad practice.If you hook dim() to use .shape, then it will also work for remote tensor: namely instead of returning the shape of the pointer itself it sends the call remotely to get the remote shapeImplemented dim() for remote tensors@mari-linhares Thank you!Removed the flip_hook_native_sizeüëç You can remove this part, we won't hook size() that easily as it is needed all to learn about the real size of the pointer objectüëç"	10	True	2019-05-21 16:54:25	2019-06-05 06:50:19	2019-05-31 12:45:11
https://github.com/OpenMined/PySyft/pull/2147	[]	Large Precision Tensor	"Large Precision TensorThis PR contains the first steps to have very large integers in the system.
It works by transforming the input into an a torch tensor that contains the big number split in components.

This PR also includes a first operation `add` that allows addition of two LPTsrename file to large_precision.pywhy were these chosen as defaultsalso add typingformat this as an if elif elseChange to google stylegoogle styledo we need a method to explicitly convert this or should this happen automatically when calling something like fix prec why do we need this as a separate function on native tensorsame as for enc_fix_large_precwhat exactly is the difference between this and virtual precshould this not be a long tensor for more storageI used `16` bits as the precision that would be needed when moving this tensor to other systems (I had JVM in mind).
It would be good to have this value set in a global configuration of the setup.
I am also thinking that instead of using a number we could use a `dtype`. I will give it a try and see how it looks likeI wanted this to be separated until we had a full working solution.
Eventually `fix_prec()` will check the precision and use `FixedPrecisionTensor` or `LargePrecisionTensor`.
I would change the naming as follows:
`precision` -> `internal_type`
`virtual_prec` -> `precision`
I'll see if by using `dtype` as a param this can be done differently.The @overloaded.method decorator will automatically put LargePrecisionTensor on top of your result, so you can remove it, otherwise you have it twice (as cell 17 of the NB you shared shows)
Also, you can simplify the function signature `def add(self, self_, *args, **kwargs)` -> `def add(self, self_, other)` directlyUsing `dtype` nowUsing `dtype` now to create the tensor.Maybe add a short dosctring to explain what's happeningDo you need to specify `def __eq__`?Add a short docstringSame, instead of commentsMaybe even further clairfy `internal_type` : you could say that the storage of the large tensor is using small tensors of size `internal_type` bits, or smthg equivalentCan you also add negative values in the test and decimal numbers?Also, internal_type in now a type, you should modify the type infoI would make the case then that this should be a class method on large_prec tensor which we can either call manually or add to fix_prec later. The code now decided whether to use LPT or FPT depending on the requested precision.Leftovers. RemovedI'm not 100% sure about this solution though it is a way of allowing different setups. If you can think on a better alternative, happy to discuss itYes maybe this can be a bit more flexible. What I experienced is that dealing with integers > 2**62-1 is not fun with precision tensors, so 62 could be the total limit which sum the space allocated to the fractional_precision *and* the space allocated to the integer part. I think we should find a way to take this into account.
Another point to consider: we shouldn't mix precision in bits and decimal precision: from the user interface, people usually keep the `base` at 10 so the precision they ask for (3 by default) means 3 digits after the `.` which roughly corresponds to a 10 bits precisionWith respect to my comment below maybe we should consider add a `base` attribute just like in the precision tensorYou need to be more precise:
I would suggest doing a check as follows:
if log2(int(value)) + log2(base**precision_fractional) > 62
then go_to_large_precision

But because value can be < 1 or <0
if log2(int(abs(value))+1) + log2(base**precision_fractional) > 62
then go_to_large_precisionWhat happens when overflow occurs in one chunk of the data?Did you mean `filler = fill_value * torch.ones(...)`?What is exactly the use case for fill_value != 0?@Jasopaum Good catch
@LaRiffle I can only think of filling the tensor with 0s (for additions) or 1s (for multiplications) We're dead here :) I was expecting to address the overflow when implementing the multiplication but it's true this can already be a problem with the addition.

In fact, this is probably the *main issue* with this representation of large numbers.

1) One possible solution could be to halve the storage precision. This way there will always be enough room to avoid an overflow.
This approach, however, will force to recheck the result in case the new number needs to be split again as soon a we concatenate more additions or multiplications.

2) Another option is to deal with these numbers the same way that a processor deals with numbers greater than the word they work with. This approach is slower but we know it works and we know there exists an implementation.

3) The third option would be to work directly with NumPy objects when operating. This would require splitting and restoring back the tensor that represents the large number with every operation. Probably this option is the most reasonable in terms of coding effort.

What do you think? 
Why is it half and not just -1?Maybe we need a check to be sure that we do not try to put a negative number in a LPT made of uintAgreed on the 3rd, we shouldn't resent to use numpy when appropriate.
How does this PR relates with #2257 ? Is it just a fork of this one? #2257 was for showing how it could be with np. I will cancel it and keep working on this PR.Ok thanks for the update!Maybe you can add sub and div?As __add__ is the method called, I would still put this test in test_add and say that you test it when values are negativeNo longer appliesAdded `sub`make a @property in the class to allow `self.internal_precision` instead of `internal_precision[self.internal_type]`, it's more pythonic (and will be useful)You can make this method a @staticmethod like _internal_representation_to_large_ints, and change the signature `_create_tensor_from_numpy(self, ndarray):` -> `_create_tensor_from_numpy(ndarray, internal_type):`. I believe you can get `self.child.shape[:-1] ` for the ndarray directly (am i right?)
Also make this one static and ask that internal type be provided in the signature if neededIs this one needed?I think _internal_representation_to_large_ints could be non-static, as it needs a LargePrecisionTensor object to run, this way you will have smthg like `self._internal_representation_to_large_ints()`  (don't need to provide internal_precision enymore as you have self to get it)This is not prioritary but at least would deserver a #TODO: _create_internal_representation loops on all elements of the tensor while there is perhaps a way to do this on the whole tensor with vectorized operationsSame here, at least add a TODO to mention this should be vectorizedHere is a solution to have this one vectorized easily:
```
n_parts = len(number_parts)
base = 2 ** bits
powers = base ** np.arange(n_parts)
return np.sum(number_parts * powers)
```
smthg like this should work I hopeMaybe add a comment again to explain why you needed to do -1It's needed in the hooksDifficult with vectorisation as every element uses the result of the previous (maybe it can be done but I didn't find a solution).
I created a recursive function instead as it is cleaner and a better fit than the loop I had beforeChanged the type sizes to be what the platform provides. The -1 is applied when computing the internal size (comments added to the source to explain it)Can you add a test for mod? Hi @robert-wagner,
`mod` is not yet implemented or do you mean something else?Hey @mccorby That was a big part of why I asked for a test for it. By far the biggest thing I see my self using lpt tensor for is for converting to something like a Chinese remainder theorem tensor (since it is significantly more space efficient). However, that conversion requires mod. Theoretically we could add that as a separate pr thoughI don't think this is still true now that you use NumPyAvoiding the loop over all the elements is not too hard, you can just change _split_number so that it takes an array instead of a single value (I did it but I'm not sure I can push to this PR, I can send you the small changes though)I think it still applies since the internal type is still a PyTorch type. NumPy is only used to perform the operationsOk but we don't have to worry about overflows anymore, do we?The overflow can happen when doing `divmod`. A way of seeing it happening is to remove the -1 in `def internal_precision(self)`I think the code is ok, I was just saying that for me, it's not half the size that is used but all of it, and that the `-1` is not here to avoid overflow but because we need to keep a bit for the sign in each chunk Haha... I see it now. You're right. Fixing!Added `mod`Did you declare `add_` just for the tests?
Actually I think that you can write directly `x. __iadd__(y)` or `x += y`NB actually add_ is a valid torch function"	3	True	2019-05-17 15:04:00	2019-06-25 18:33:00	2019-06-25 18:33:00
https://github.com/OpenMined/PySyft/pull/2129	[]	Fix broken cell at tutorial part 10	"Fix broken cell at tutorial part 10Tutorial part 10 is working correctly but there was a broken cell on it. This PR just re-runs the entire notebook to get rid of the cell with the error message.<p>We don't call the conv ever so is it needed?</p>

 _Reply via <a href='https://app.reviewnb.com/OpenMined/PySyft/pull/2129/discussion/'>ReviewNB</a>_ <div id='ReviewNBCommentContext-DoNotDelete' style='display:none' data-state='OPEN' data-cellIndex='12'/><p>Sorry, debugging code for some other stuff I was trying.</p>"	1	True	2019-05-08 20:34:05	2019-05-11 23:38:48	2019-05-11 23:38:48
https://github.com/OpenMined/PySyft/pull/2127	[]	Fixed backpropagation for models using parameters.grad	"Fixed backpropagation for models using parameters.gradFix for issue #2122 reported while trying to implement a Recurrent Neural Network in a federated way. 

Fixed the loss.backward() function not generating gradient updates accumulated in the model parameters.

If trying to access the .grad.data attribute of a model's parameters, not all the gradient parameters were actually set, leading to the model weights not being updated. The de-commented lines actually allow the gradients to be stored in the model parameters and the weights to be updated, hence the loss function to converge. 

You don't need this importYou can get Alice by including workers as a parameter and writing Alice = workers[""Alice""]. The tests for most tensors have good examples for how to do thisWhat does this line do?This is the most important line, in which the` param.grad.data` was previously yielding a `None` that my PR intends to fix. It basically updates the model's parameters (e.g.: layers' weights) based on the gradients computed following the backpropagation phase. Done!Removed importWhy is this called after the assertion thoughBasically with this `assert param.grad.data is not None`, we would like to make sure that every single gradient among the model's parameters is indeed there.

 By executing `param.data.add_(-learning_rate, param.grad.data)` without an an assert prior to it, we may already have an exception in case a grad.data is None, meaning that the code is broken again and we had no way to check the effective presence/absence of the gradient beforehand"	2	True	2019-05-07 16:10:04	2019-05-08 17:33:04	2019-05-08 17:33:04
https://github.com/OpenMined/PySyft/pull/2125	[]	added testing of plan functions, small bugfix	"added testing of plan functions, small bugfixSmall bugfix in function Plan.replace_worker_ids to support integer ids
Added testsCan you cover all 4 possibilities when dealing with strings?

from_worker, to_worker
from_worker, to_worker.encode()
from_worker.encode(), to_worker
from_worker.encode(), to_worker.encode()There's a lot going on here. Break this into multiple tests and add some comments about what each test is covering.Break this into two tests: test__call__fn, test__call__methodWe don't need all four possibilities. The code in train-config contains the four possibilities. In the dev code it considers two cases (from_worker, to_worker) and (from_worker.encode(), to_worker.encode()) but without taking care of the integers that don't have a encode() function.

As we are replacing, it doesn't make sense to replace from_worker twice. Therefore only two outcomes, not four.Hmm, I would say we need the 4 possibilities (as in train-config) to cover all possible cases, don't we?

My question then is: can we guarantee that with only these two cases all the other cases will work?Let's think of an example doing string replacements:
```
 ""The quick brown b'brown' fox jumps over the lazy b'brown' dog.""
```

If we want to replace brown by black, we would call the replace method with from_worker=brown and to_worker=black.
First call would replace all brown instances with black:
```
""The quick black b'brown' fox jumps over the lazy b'brown' dog.""
```
The second call would replace all b'brown' instances with b'black':
```
""The quick black b'black' fox jumps over the lazy b'black' dog.""
```
And we are done.Got it, sorry, I got confused, but it's clear now!"	2	True	2019-05-07 09:21:17	2019-05-07 15:29:24	2019-05-07 15:29:24
https://github.com/OpenMined/PySyft/pull/2102	[]	Fix minor bug in class FederatedDataset	Fix minor bug in class FederatedDatasetTakes care of workers with integer ids.	1	True	2019-04-25 14:17:59	2019-04-25 15:12:04	2019-04-25 14:32:37
https://github.com/OpenMined/PySyft/pull/2095	[]	Continuing Mcleonard autograd tensor	"Continuing Mcleonard autograd tensorThis PR is a continuation of https://github.com/OpenMined/PySyft/pull/1942The AutogradTensor seems to be missing a get() function. Could be something like:
```
    def get(self, deregister_ptr: bool = True):
        if self.grad is not None and hasattr(self.grad, 'child'):
            self.grad.get(deregister_ptr)

        self.child.get(deregister_ptr)
        return self
```test_sqrt_backwards fails with:
E   TypeError: can not serialize 'AutogradTensor' object
msgpack/_packer.pyx:279: TypeErrorI've added this in the last commits, thanks Silvia!"	1	True	2019-04-23 21:56:07	2019-06-03 19:08:18	2019-05-17 12:39:59
https://github.com/OpenMined/PySyft/pull/2087	[]	Add WebSocket over TLS	"Add WebSocket over TLSImprove Secure level of data flow between remote workers adding WebSocket over TLS.
Benefits:
- Authenticate component identity by certificates.
- Provides end-to-end encryption

PS: These changes do not modify or render infeasible the old workers' behavior.This line should only be used in development mode.
It allows to work with self-signed certificates.Overall I think this PR looks ok. This boolean is a bit confusing. since we have `secure` in the top, can we use that down here too and `raise` if the settings aren't right. Reading this I get the sense that a user could inadvertently run the server in an insecure mode without realizing it. The secure flag doesn't exist on the server side, but can be implemented if this makes the idea of ‚Äã‚Äãa secure server explicit.

**kwargs at client side**
`
kwargs_websocket = {""host"": ""localhost"",
                    ""hook"": hook,
                    ""verbose"": True,
                    ""secure"": True }
`
**kwargs at server side**
`
kwargs = {
    ""id"": args.id,
    ""host"": args.host,
    ""port"": args.port,
    ""hook"": hook,
    ""verbose"": True,
    ""cert_path"" : ""localhost.cert"",
    ""key_path"" : ""localhost.key""
}
`


Should I add a secure flag to websocket server too?If the server side has the secure flag can we make it reject all non secure connections?By default, the websocket library already rejects connections that do not implement the pre-established security protocol (if it is established). The security protocol is defined here: `ssl_context = ssl.SSLContext(ssl.PROTOCOL_TLS_SERVER)`FYI - over the last little bit I've been working on a Heroku based flask app worker - when the time comes I'd love to pick your brain on how to integrate these - especially the security pieces.I would be happy to help. :smiley: Excellent! "	1	True	2019-04-23 08:37:59	2019-04-25 18:53:54	2019-04-25 18:53:54
https://github.com/OpenMined/PySyft/pull/2084	[]	 Fixed a timeout issue occuring on raspberry PIs or low-power devices	"Fixed a timeout issue occuring on raspberry PIs or low-power devicesWhen wanting to train a model via websockets on low-power devices with a slow CPU (e.g.:Raspberry PIs or mobile device), a timeout exception occurrs, as shown in the following pictures.

![error_broken_pipe_client](https://user-images.githubusercontent.com/4907418/56466422-53d27080-6412-11e9-85b5-0062cab3b554.png)

![issue_pysyft](https://user-images.githubusercontent.com/4907418/56466468-d9562080-6412-11e9-8403-8bf9b57610ed.png)



I fixed the issue by removing the default ping_timeout and close_timeout timers set to 20 seconds for the workers.@DanyEle can you remove the author name from the line? It's not a code pattern in syft to keep the author's name in a comment.create a TIMEOUT constant instead of using 9999999use constantuse constantremove author's name from commentremove commentDone!DoneDoneDonewhat is the default for this if nothing is passed (also could you add a justification for why this was chosen)This should not be here (if you see the message below this method should never be called)This value was just picked to avoid sockets from timing out. 9999999 seconds looked like a sufficiently large amount of time to me. If nothing is passed or no timeout is set, then you can refer to the default values listed in the respective documentation for sockets:

https://docs.python.org/3/library/socket.html
If no timeout is supplied, the global default timeout setting returned by getdefaulttimeout() is used.

And for websockets:

https://websockets.readthedocs.io/en/stable/api.html

ping_timeout=20, close_timeout=10 are the default values.If it's never called, then it may as well  be removed: i just added this statement to address any possible calls to websockets with no timeout set properly."	5	True	2019-04-21 06:51:35	2019-04-23 20:26:02	2019-04-23 20:26:01
https://github.com/OpenMined/PySyft/pull/2050	[]	Remove PlanPointer	Remove PlanPointerIf the description is 0 or an empty string this will return incorrectly. The previous check was correctThanks for the careful review! Done.	2	True	2019-04-09 12:16:16	2019-04-10 12:52:22	2019-04-10 12:52:21
https://github.com/OpenMined/PySyft/pull/2028	[]	Websocket worker example	"Websocket worker exampleThis pull request contains an example implementation of a federated training using websockets and federated averaging. The training on the workers is currently run sequentially (no scheduler implemented). Any way that we could create a version of this in a notebook so that people trying to use it can iterate step by step?Could we do this step by intitializing each of alice, bob and charlie with the data parameter. That seems to be much more in line with how fl will work in the wildThis probably shouldn't have a default as that can lead to conflictsThis should probably not have a default as that can lead to conflictswhy is this commented outdoes this need to be a raw string literal?This will fail or hang if the websocket is not connected. What is the check after this actually doing?Format this in pytest styleThis is handled by the conftest workersthis is handled by the conftest hookI thought of it, but debugging a notebook is more difficult than putting breakpoints in an editor as pycharm. 
The script starting the websocket servers will not go away, as starting the processes from a notebook does not work (see discussion in the slack channel).
I will see what makes sense in a notebook, as it shouldn't be too long neither.That is a left-over of some tests. I will un-comment it.No, I don't think so. I will remove the r-prefix from all the docstrings in the file._receive_action will not fail, if the websocket is not connected. but the response will be empty. 
The check on self.ws.connected has to be after a self.ws.recv() call as otherwise the variable is not updated. 
So the steps are: 1) try to send/receive, 2) check if connection is ok, if not 3) reconnect and send/receive again. 4) check if connection is ok now, if not fail.will doI added a notebook version of the example.This could be a separate example, where the focus is on setting up the remote data in a realistic way. My suggestion is to do a separate pull request for this.Could you make the name of this folder more command line friendly (ie no spacesWould the name ""websockets-example-MNIST"" be good?
Shall we change the ""Advanced"" folder to ""advanced"" to align it as well?"	2	True	2019-04-01 10:20:50	2019-04-06 04:07:27	2019-04-06 04:07:08
https://github.com/OpenMined/PySyft/pull/1994	[]	[Issue 1456] add type annotations and address pylint errors in some files	"[Issue 1456] add type annotations and address pylint errors in some filesThis is work related to issue #1456  and also adds a few small changes that I uncovered while working on this:
    1) Adds type annotations to a few methods. Not 100% sure that the selected types are the most accurage ones, please advice if there is an issue.
    2) Data argument that gets passed to workers has as default value of {} but seems like in reality it's a list. Also it's not a good practice to use mutalbe object as a default value to a methof so changing it to None and handling this in the actual methot that loads the data.
    3) Addresses some small pylint errors.
    4) Reorders the imports to follow the PEP 8 guidelines.Decided to handle a `None` value here and avoid using a {} or [] as default argument value, which is not a good practice overall.Assumed this type looking at other places in the code where this argument is passed, let me know if I'm missing something.I hope this is the right type to specify here, although looks a bit too specific. Please suggest if there is a better way to handle that.I think this is correct"	2	True	2019-03-14 14:25:12	2019-03-18 18:00:26	2019-03-18 18:00:26
https://github.com/OpenMined/PySyft/pull/1993	[]	A few more type annotations	"A few more type annotationsI just added some few type annotations as I studied the codeYou can probably also add a type info for tags like :
```
from typing import List

def my_func(l: List[str]):
    pass
```same you can for tensor put  ~ `tensor: sy...AbstractTEnsor`maybe you want to add annotation for all arguments (whe it's not too painful) or for the whole file, this way people continuing the type annotation know they don't have to check everything
https://docs.python.org/3/library/typing.html can be a good resourcesame as above"	3	True	2019-03-14 08:18:37	2019-03-27 08:57:50	2019-03-27 08:57:50
https://github.com/OpenMined/PySyft/pull/1983	[]	Handling remote commands with complex response; fix #1975	"Handling remote commands with complex response; fix #1975Add a method to handle registration and sending back resp to client when a command is sent.
Support response with multi tensors; like `torch.split(ptr, 2)` which returns a tuple of pointers

fix #1975Is object really the best we can do for these?Switch to other doc style for consistencyI think tensor in this case should be a union of abstract tensor and torch tensorCan be tuple, tensor, tuple of int, str, tensor very variousrightSounds good"	2	True	2019-03-09 15:18:05	2019-03-12 15:38:02	2019-03-12 15:17:31
https://github.com/OpenMined/PySyft/pull/1977	[]	Type annotation	"Type annotationHere are some more type annotations. I was not very sure how to annotation Syft Tensors that are not PointerTensors. I ended up using `AbstractTensor`. 

For torch tensors I used `torch.Tensor`.

For annotating self type classes I used strings ""BaseWorker"" when annotating this type from inside the BaseWorker class. It seems to be the solution for python<=3.6. For python 3.7 and above, there is another solution by importing

`from __future__ import annotations` then self type annotation is supposed to work out of the box

Thanks for the reviewThis method does not return binary data (it raises an exception). For specific implentions (ie virtual worker) it returns either a pointer tensor or NoneCould you split these imports on to separate linesLike _recv_msg this does not return binary dataThis is clever since all of the syft tensor types subclass abstract tensor. Good job@robert-wagner The doc string for this method `recv_msg`  actually says:

`Returns:
A binary message response
`

Is that an error?
Nevermind you are correctIgnore this comment"	4	True	2019-03-06 10:35:59	2019-03-08 09:30:14	2019-03-08 09:30:03
https://github.com/OpenMined/PySyft/pull/1964	[]	Fix error in tutorial 2	"Fix error in tutorial 2I found two places to change while running the tutorial today. Please correct me if I am wrong.

+ It seems that `syft` does not have `optim`?

+ `opt.step` would not take `data.shape[0]` as input because `opt.step` should take some closure.
Doc: https://pytorch.org/docs/stable/optim.html#torch.optim.Optimizer.step"	1	True	2019-03-03 21:07:43	2019-03-04 13:56:21	2019-03-03 22:35:40
https://github.com/OpenMined/PySyft/pull/1914	[]	Add serialization of torch.device to support hook of .to(device)	Add serialization of torch.device to support hook of .to(device)Just a serialization of torch device. Issues with Gpu not solved	3	True	2019-02-18 09:03:43	2019-03-06 08:45:37	2019-02-19 14:55:14
https://github.com/OpenMined/PySyft/pull/1856	[]	create_sandbox convenience functin and tutorial	create_sandbox convenience functin and tutorialglobal jon?change to jonjon?fixedfixedfixedThis isnt fixedadded	1	True	2019-02-03 17:51:25	2019-02-03 23:26:53	2019-02-03 23:26:53
https://github.com/OpenMined/PySyft/pull/1848	[]	federated learning working but there are still some strange bugs about	federated learning working but there are still some strange bugs about	1	True	2019-02-02 00:53:15	2019-02-02 01:34:58	2019-02-02 01:03:47
https://github.com/OpenMined/PySyft/pull/1843	[]	adds support for pointers to attributes on remote tensors	adds support for pointers to attributes on remote tensorsAlso adds automatic support for .grad pointermaybe you want to do `'::'.join(self.point_to_attr.split('.')`or replacetype(y) : wrapper>logging>tensorfixedüëç fixedRemove comments or uncommentfixed	1	True	2019-02-01 16:56:42	2019-02-01 17:19:50	2019-02-01 17:18:43
https://github.com/OpenMined/PySyft/pull/1830	[]	Minor Changes	"Minor ChangesI made a few minor changes while playing around with Garbage Collection and getting to know some of the next pieces of functionality.

- added LoggingTensor to syft. classpath (so you can now do syft.LoggingTensor). Added a few comments there as well.
- modified tensor __str__ and __repr__ to be more informative when printing tensors with wrappers
- added an experimental notebooks folder with a README describing its purpose and the lifecycle of notebooks it containsShould this file be in this pr
"	1	True	2019-01-28 19:33:26	2019-01-28 22:25:00	2019-01-28 22:24:36
https://github.com/OpenMined/PySyft/pull/1829	[]	Improve Garbage Collection verifications	"Improve Garbage Collection verificationsReorganise test files and add one specific to GC: test.gc.py

At the end of this file, one can find test for the Logging Test. One is failing:

```
x = torch.Tensor([1, 2])

x_ptr = x.send(bob)
x_log = LoggingTensor().on(x_ptr)

assert x.id in bob._objects

del x_log
assert x.id not in bob._objects
```
However this works:
```
x = torch.Tensor([1, 2])

x_log = LoggingTensor().on(x.send(bob))

assert x.id in bob._objects

del x_log
assert x.id not in bob._objects
```
This is due to x_ptr init, which increases the reference of x_log to 3  (should be 2 if you use `sys.getrefcount(x_log)`).
Is this something that we want as a behavior ?"	3	True	2019-01-25 10:41:00	2019-01-29 16:16:07	2019-01-28 16:32:11
https://github.com/OpenMined/PySyft/pull/1821	[]	Add x.max() for fixp shared tensor	Add x.max() for fixp shared tensor	1	True	2019-01-17 16:52:47	2019-01-29 16:16:19	2019-01-17 17:26:03
https://github.com/OpenMined/PySyft/pull/1793	[]	Added AbstractTensor.serlialize() convenience function w/ tests; added inline documentation	"Added AbstractTensor.serlialize() convenience function w/ tests; added inline documentationFixes https://github.com/OpenMined/PySyft/issues/1694

This PR does a few things.

1) it adds a new .serialize() convenience function to all tensors (by adding it to AbstractTensor). I added 2 unit tests for this function.
2) it removed the STRING based configuration of compression - opting instead for an integer based one (a general design decision we're optimizing for in Torch 1.0 to make things faster and more compressed). I modified previous unit tests to adjust (also fixed a style issue where compress_scheme was camel-caps for some reason)
3) it added a bit of inline documentation as I was going.
4) a few minor style fixes (removed unused imports)
5) added a new error class CompressionNotFoundException if you try to use a compression
code that doesn't exist (previously if you didn't specify one or you specified one that didn't
exist, it would just pick one at random).
Not a priority, but maybe make this an enum?Missing period.Empty lines between args are not needed.Empty lines between args are not needed.Missing period.Can you add a comment detailing what this is testing? What's the difference between this test and `test_hooked_tensor`?We've debated this a little bit - apparently enums are a bit less efficient for (more or less) the same interface (@LaRiffle did a few tests on the 0.3.1 version). Interesting, thanks for explaining.Put these on separate lines or the entire def on 1 lineDo these as absolute importsDo these as absolute inportsWhich one can't it find?
Also these type of comments belong in the slack or as an issue rather than a comment in the codefixedfixedfixedfixed i think - by ""dot"" you mean ""period"" right?good calldonefixeddonefixeddoneSorry, correct. Fixed in the other comments."	1	True	2018-12-24 04:59:18	2018-12-24 18:33:12	2018-12-24 18:33:12
https://github.com/OpenMined/PySyft/pull/1792	[]	Fix #1785; Modify documentation generation code to use napoleon	Fix #1785; Modify documentation generation code to use napoleon	1	True	2018-12-23 14:27:37	2018-12-23 14:56:49	2018-12-23 14:56:49
https://github.com/OpenMined/PySyft/pull/1780	[]	WIP: Serde Logic for PointerTensor	WIP: Serde Logic for PointerTensorDocumentation for `fail_hard` argument is missing. I think we switched `TestCase` to object. Pytest does not require `TestCase`, but `TestCase` is disallowing the use of parametrizing methods. `TestCase`: see aboveIs this import really needed?Yeah because I want the local_worker and thus call `syft.local_worker.get_worker(val_str, fail_hard=True)`	2	True	2018-12-20 13:59:56	2018-12-22 13:57:45	2018-12-22 13:57:45
https://github.com/OpenMined/PySyft/pull/1736	[]	Fix the search function accordingly to ex/torch/toy sockets workers	"Fix the search function accordingly to ex/torch/toy sockets workersFix:
https://github.com/OpenMined/PySyft/blob/master/examples/torch/toy/SocketWorker%20Server.ipynb
https://github.com/OpenMined/PySyft/blob/master/examples/torch/toy/SocketWorker%20Client.ipynb

Which underlines that worker.search(#dataset)  is broken"	1	True	2018-11-29 13:48:31	2018-11-29 17:33:54	2018-11-29 16:13:06
https://github.com/OpenMined/PySyft/pull/1692	[]	"In `handle_call` for the ""end_get"" case need to call get() on a _SyftTensor"	"In `handle_call` for the ""end_get"" case need to call get() on a _SyftTensorCurrently it's called on a `dict` object and calling `end_get` in tutorial 3 generates an error because `dict` does not have a `get()` method with no arguments.

Adds a test that demonstrates a scenario in which the code currently fails.I realize this may not be the best solution but given my limited knowledge of the codebase this is what I came up with. Will be happy to modify, but at least I think we have an issue that needs resolving here, one way or another.I literally tried to solve this yesterday and if your solution works it's VASTLY superior! Well done! (will check in a bit)"	2	True	2018-11-16 13:35:29	2018-11-19 18:51:15	2018-11-19 15:52:08
https://github.com/OpenMined/PySyft/pull/1684	[]	Solved: Add serde logic for np.ndarray #1670	"Solved: Add serde logic for np.ndarray #1670 added logic for np.ndarray serialization and deserialization
 added unit test demonstrating proper serde of np.ndarray objects
 added docstrings for all methods describing their functionality including an example of how to serialize/deserialize it."	1	True	2018-11-15 15:59:59	2018-11-15 19:52:06	2018-11-15 19:51:51
https://github.com/OpenMined/PySyft/pull/1681	[]	Solved: Add serde logic for range #1664	"Solved: Add serde logic for range #1664Added the logic (if necessary) for range serde.

Added a unit test

Added add docstrings for all methods describing their functionality including an example of how to serialize it"	1	True	2018-11-15 09:24:30	2018-11-15 11:03:02	2018-11-15 11:03:02
https://github.com/OpenMined/PySyft/pull/1653	[]	[WIP] Fix websocketworker	"[WIP] Fix websocketworkerI've created this pull request to bugfix branch, because I want to easily share code with Ogofo and Nivek92 who expressed interest in issue #1642. This code is not ready for master. Can someone create a separate branch for this maybe? I will then set it in this PR.

I believe the reason why there are so few tests is because this TorchHook solution (possibly combined with the way we write/run tests) makes adding new tests much harder for people. Running tests produce lots of  `Torch was already hooked... skipping hooking process` and `Replacing old worker which could cause unexpected behavior` warnings. In my case I'm adding a correctly failing test (TestWebSocketWorker) and when I run it with `python3 setup.py test` I see different error messages than when I test the same code manually (in a repl) or with
**`python -m unittest -v test.core.workers_test.TestWebSocketWorker`**

I understand the TorchHook solution is waiting for improvement. Meanwhile I tried to find a fix/workaround for tests. I experimented with setUp/tearDown and modules reloading, but wasn't successful.

So far I've put almost all effort into the test and I don't know how hard the complete fix may be."	2	True	2018-11-03 00:00:59	2018-11-14 13:46:18	2018-11-14 13:45:02
https://github.com/OpenMined/PySyft/pull/1650	[]	Fix flake 8	Fix flake 8	1	True	2018-10-30 05:36:45	2018-11-09 22:17:44	2018-11-02 11:18:26
https://github.com/OpenMined/PySyft/pull/1644	[]	Update MNIST Example.ipynb	Update MNIST Example.ipynbfix an import problem caused by TorchHook which has been moved into frameworks.torch	1	True	2018-10-27 07:08:44	2018-10-27 11:09:48	2018-10-27 11:09:48
https://github.com/OpenMined/PySyft/pull/1643	[]	Wrong import path fixed.	Wrong import path fixed.import syft.core fails as the torch folder is in the frameworks subfolder	1	True	2018-10-24 10:32:36	2018-10-25 13:19:19	2018-10-25 13:19:00
https://github.com/OpenMined/PySyft/pull/1630	[]	[WIP] Add profiling in BaseWorker.send_msg	"[WIP] Add profiling in BaseWorker.send_msgHello,

Here's what I have for now (#1602, first issue) and I need some feedback.
The method calls are profiled and basic info is stored in a log file.

I don't know how exactly you'd like to use the stats and what would be
most helpful.
Also I test my code by running PySyft tests (python3 setup.py test) which
may be giving me a wrong idea about how the stats will look in ""real use""
(e.g. I don't see any ""numpy_cmd"" type messages being sent during the tests).

1. I believe instead of logging individual calls like in this code,
   it would be better to have grouping and summaries. I don't know
   what grouping would be useful to you and when to start/stop collecting
   data for total stats. I could create functions to start and stop profiling
   with the idea to call them in a repl or notebook, but I don't know
   if it's good for you.
   Some total statistics can already be gathered from the log with
   grep, cut, wc etc. e.g.
   `less send_msg_profiling.log  | cut -f2,3 | sort |  uniq -c`
   One thing to remember is to rm or mv the log file whenever old entries
   become irrelevant.

2. I don't know what parts of message are relevant for the stats/logs.
   I currently save (message_type:mode) or (message_type:integer_val)
   when the message is not a dict e.g. ""req_obj:81697078720"". I think
   ""req_obj:int"" would be better(?).

3. The completion time is currently shown in milliseconds and I wonder if this
   is the right time unit. I see mostly fractions of milliseconds, but
   I imagine in ""real use"" the times will be much higher.

4. I have put a PROFILE_MODE flag in profiling.py file. It should probably
   go somewhere else if it's supposed to be manually set.

5. Is there an easy way to have something more similar to ""real use""
   than what I'm doing (running ""python3 setup.py test"")?"	2	True	2018-10-14 10:17:18	2018-10-23 17:45:06	2018-10-23 17:44:05
https://github.com/OpenMined/PySyft/pull/1612	[]	Fixes #1592, should replace all modulos (%) with `torch.fmod`	"Fixes #1592, should replace all modulos (%) with `torch.fmod`As spec'd in #1592, all modulos (%) need to be replaced with `torch.fmod` when seeking remainder on `torch.Tensor`s.

I believe I've covered these, but I'm not 100% sure on testing these, please advise. üôÇ"	4	True	2018-10-10 02:45:39	2018-10-11 23:41:07	2018-10-11 18:01:58
https://github.com/OpenMined/PySyft/pull/1583	[]	Update ISSUE_TEMPLATE.md to fix issue #1549	"Update ISSUE_TEMPLATE.md to fix issue #1549# Description

Please include a summary of the change and which issue is fixed. Please also include relevant motivation and context. List any dependencies that are required for this change.

Fixes # (issue)

## Type of change

Please delete options that are not relevant.

- [ ] Bug fix (non-breaking change which fixes an issue)
- [ ] New feature (non-breaking change which adds functionality)
- [ ] Breaking change (fix or feature that would cause existing functionality to not work as expected)
- [ ] This change requires a documentation update

# How Has This Been Tested?

Please describe the tests that you ran to verify your changes. Provide instructions so we can reproduce. Please also list any relevant details for your test configuration

- [ ] Test A
- [ ] Test B

**Test Configuration**:
* CPU:
* GPU:
* PySyft Version:
* Unity Version:
* OpenMined Unity App Version:

# Checklist:

- [ ] My code follows the style guidelines of this project
- [ ] I have performed a self-review of my own code
- [ ] I have commented my code, particularly in hard-to-understand areas
- [ ] I have made corresponding changes to the documentation
- [ ] My changes generate no new warnings
- [ ] I have added tests that prove my fix is effective or that my feature works
- [ ] New and existing unit tests pass locally with my changes
- [ ] Any dependent changes have been merged and published in downstream modules
This whole `Test Configuration` section can probably be replaced simply with operating system type/version (windows, linux distro, mac os) and PyTorch and/or TensorFlow versions.This could be rephrased -- maybe ""Please describe expected behavior and how it differs from current behavior.""This should probably be a separate issue/PR, but we should probably have two separate issue templates for bugs and features (since those are by far the two most common issue types).  Would you be able to open up an issue for this?Sure, I'll open an issue for this and perhaps work on it myself."	1	True	2018-10-01 02:41:03	2018-10-02 11:10:29	2018-10-01 12:20:56
https://github.com/OpenMined/PySyft/pull/1580	[]	Math operations for fixedTensors added + Unit Tests	"Math operations for fixedTensors added + Unit Tests# Description

Please include a summary of the change and which issue is fixed. Please also include relevant motivation and context. List any dependencies that are required for this change.

Fixes #1532 

## Type of change

Please delete options that are not relevant.

- [ ] Bug fix (non-breaking change which fixes an issue)
- [ ] New feature (non-breaking change which adds functionality)
- [ ] Breaking change (fix or feature that would cause existing functionality to not work as expected)
- [ ] This change requires a documentation update

# How Has This Been Tested?

Please describe the tests that you ran to verify your changes. Provide instructions so we can reproduce. Please also list any relevant details for your test configuration

- [ ] Test A
- [ ] Test B

**Test Configuration**:
* CPU:
* GPU:
* PySyft Version:
* Unity Version:
* OpenMined Unity App Version:

# Checklist:

- [ ] My code follows the style guidelines of this project
- [ ] I have performed a self-review of my own code
- [ ] I have commented my code, particularly in hard-to-understand areas
- [ ] I have made corresponding changes to the documentation
- [ ] My changes generate no new warnings
- [ ] I have added tests that prove my fix is effective or that my feature works
- [ ] New and existing unit tests pass locally with my changes
- [ ] Any dependent changes have been merged and published in downstream modules"	5	True	2018-09-29 13:56:21	2018-10-05 02:42:57	2018-10-04 19:11:38
https://github.com/OpenMined/PySyft/pull/1566	[]	[WIP] Add Federated Learning and Differential Privacy demos	"[WIP] Add Federated Learning and Differential Privacy demos# Description

Adding demos combining Differential Privacy and Federated Learning 

Fixes #1556 

## Type of change

- [x] New feature (non-breaking change which adds functionality)
- [x] This change requires a documentation update

# How Has This Been Tested?

Not yet **(WIP)**

- [ ] Test A
- [ ] Test B

**Test Configuration**:
* CPU:
* GPU:
* PySyft Version:
* Unity Version:
* OpenMined Unity App Version:

# Checklist:

- [ ] My code follows the style guidelines of this project
- [ ] I have performed a self-review of my own code
- [ ] I have commented my code, particularly in hard-to-understand areas
- [ ] I have made corresponding changes to the documentation
- [ ] My changes generate no new warnings
- [ ] I have added tests that prove my fix is effective or that my feature works
- [ ] New and existing unit tests pass locally with my changes
- [ ] Any dependent changes have been merged and published in downstream modules"	6	True	2018-09-26 10:53:35	2018-11-02 11:19:40	2018-11-02 11:19:40
https://github.com/OpenMined/PySyft/pull/1560	[]	adds getting workers from gpt	"adds getting workers from gpt# Description

Regarding the following issue: 
https://github.com/OpenMined/PySyft/issues/1548

Adding method to return list of workers from GeneralizedPointerTensor.

Fixes # (issue)

## Type of change
Adds method `workers` to `syft/core/frameworks/torch/tensor.py` L:749  

Please delete options that are not relevant.

- [ ] New feature (non-breaking change which adds functionality)

# How Has This Been Tested?

Adding unittest in `test/torch_test.py` L:1121

**Test Configuration**:
* CPU: Mac
* GPU: None
* PySyft Version: master
* Unity Version: None
* OpenMined Unity App Version: None

# Checklist:

- [ ] My code follows the style guidelines of this project
- [x] I have performed a self-review of my own code
- [ ] I have commented my code, particularly in hard-to-understand areas
- [ ] I have made corresponding changes to the documentation
- [ ] My changes generate no new warnings
- [x] I have added tests that prove my fix is effective or that my feature works
- [ ] New and existing unit tests pass locally with my changes
- [ ] Any dependent changes have been merged and published in downstream modules"	5	True	2018-09-25 09:09:58	2018-09-25 22:27:22	2018-09-25 14:38:59
https://github.com/OpenMined/PySyft/pull/1552	[]	PATE with PyTorch 	"PATE with PyTorch Hey @iamtrask , 

#1547 

This PR add an implementation of PATE with PyTorch. I will have to clean up a bit the code later but everything seems to work fine. 

Thank you!


## Type of change

Please delete options that are not relevant.

- [ ] Bug fix (non-breaking change which fixes an issue)
- [x ] New feature (non-breaking change which adds functionality)
- [ ] Breaking change (fix or feature that would cause existing functionality to not work as expected)
- [ ] This change requires a documentation update

# How Has This Been Tested?

Please describe the tests that you ran to verify your changes. Provide instructions so we can reproduce. Please also list any relevant details for your test configuration

- [ ] Test A
- [ ] Test B

**Test Configuration**:
* CPU:
* GPU:
* PySyft Version:
* Unity Version:
* OpenMined Unity App Version:

# Checklist:

- [ ] My code follows the style guidelines of this project
- [ ] I have performed a self-review of my own code
- [ ] I have commented my code, particularly in hard-to-understand areas
- [ ] I have made corresponding changes to the documentation
- [ ] My changes generate no new warnings
- [ ] I have added tests that prove my fix is effective or that my feature works
- [ ] New and existing unit tests pass locally with my changes
- [ ] Any dependent changes have been merged and published in downstream modules"	1	True	2018-09-23 17:42:43	2018-09-23 17:56:39	2018-09-23 17:56:39
https://github.com/OpenMined/PySyft/pull/1551	[]	Variable x MPC FixedPrecision (send / get / addition)	"Variable x MPC FixedPrecision (send / get / addition)# Description

Support of send / get / addition on remote, shared, fix precision tensor.

Beware that valid (and tested) orders for composing are:
```
x = x.send(bob).fix_precision()
x = x.get().decode()
# or
x = x.fix_precision().share(alice, bob)
x.get().decode()
# or 
x = x.send(bob).fix_precision().share(alice, bob) 
 x.get().get().decode()
```
Next PR will address:
- Multiplication (and mat mul)
- Other composition schemes

## Type of change

- [x] New feature (non-breaking change which adds functionality)

# How Has This Been Tested?

<not tested yes>

# Checklist:

- [x] My code follows the style guidelines of this project
- [x] I have performed a self-review of my own code
- [ ] I have commented my code, particularly in hard-to-understand areas
- [ ] I have made corresponding changes to the documentation
- [x] My changes generate no new warnings
- [x] I have added tests that prove my fix is effective or that my feature works
- [x] New and existing unit tests pass locally with my changes
- [x] Any dependent changes have been merged and published in downstream modules
"	1	True	2018-09-23 12:43:46	2018-09-27 18:44:54	2018-09-27 18:44:54
https://github.com/OpenMined/PySyft/pull/1523	[]	Added keras examples and changed optimizer to work with keras	"Added keras examples and changed optimizer to work with keras# Description

Add keras tensorflow examples and correct custom optimizer to work with ResourceVariables used by keras.

Fixes [# 1521](https://github.com/OpenMined/PySyft/issues/1521)

# Checklist:

- [ ] My code follows the style guidelines of this project
- [x] I have performed a self-review of my own code
- [x] I have commented my code, particularly in hard-to-understand areas
- [ ] I have made corresponding changes to the documentation
- [x] My changes generate no new warnings
- [ ] I have added tests that prove my fix is effective or that my feature works
- [ ] New and existing unit tests pass locally with my changes
- [ ] Any dependent changes have been merged and published in downstream modules"	2	True	2018-09-20 05:06:26	2018-09-20 10:08:12	2018-09-20 10:08:12
https://github.com/OpenMined/PySyft/pull/1476	[]	Format all html,css and js files in docs folder	"Format all html,css and js files in docs folder# Description

Formated html, css, js files.
```
docs/_build/html/_autosummary/syft.core.frameworks.torch.html
docs/_build/html/_autosummary/syft.core.utils.html
docs/_build/html/_autosummary/syft.core.workers.html
docs/_build/html/_modules/index.html
docs/_build/html/_modules/syft.core.frameworks.html
docs/_build/html/_modules/syft.core.frameworks.torch.html
docs/_build/html/_modules/syft.core.html
docs/_build/html/_modules/syft.core.workers.html
docs/_build/html/_modules/syft.html
docs/_build/html/_modules/syft.mpc.html
docs/_build/html/_modules/syft.mpc.interface.html
docs/_build/html/_static/basic.css
docs/_build/html/_static/doctools.js
docs/_build/html/_static/searchtools.js
docs/_build/html/_static/websupport.js
docs/_static/css/PySyft_docs.css 
```
## Fixes # (issue)
1) remove multiple empty newlines.
2) Format script tag and code inside html files
3) indent all the files equally.
4) warp tag attributes.
5) preserve new lines whenever necessary . eg. [""head"", ""body"", ""/html""].
6) Add a newline between multiple selectors
7) increase readability and standards

# Type of change: Format Templates, stylesheets and javascript files.

# How Has This Been Tested?
- [y] Test A
open PySyft/docs/_build/html/index.html in browser,chrome prefered.

**Test Configuration**:
* CPU: intel i7
* Python version: 3.6 
* PyTorch version: 0.3.1

# Checklist:

- [y] My code follows the style guidelines of this project
- [y] I have performed a self-review of my own code
- [y] I have commented my code, particularly in hard-to-understand areas
- [n] I have made corresponding changes to the documentation
- [y] My changes generate no new warnings
- [n] I have added tests that prove my fix is effective or that my feature works
- [y] New and existing unit tests pass locally with my changes
- [n] Any dependent changes have been merged and published in downstream modules"	1	True	2018-09-09 09:17:15	2018-09-17 19:06:48	2018-09-17 19:06:48
https://github.com/OpenMined/PySyft/pull/1458	[]	Mpc tensor	"Mpc tensor# Description

Please include a summary of the change and which issue is fixed. Please also include relevant motivation and context. List any dependencies that are required for this change.

Fixes # (issue)

## Type of change

Please delete options that are not relevant.

- [ ] Bug fix (non-breaking change which fixes an issue)
- [ ] New feature (non-breaking change which adds functionality)
- [ ] Breaking change (fix or feature that would cause existing functionality to not work as expected)
- [ ] This change requires a documentation update

# How Has This Been Tested?

Please describe the tests that you ran to verify your changes. Provide instructions so we can reproduce. Please also list any relevant details for your test configuration

- [ ] Test A
- [ ] Test B

**Test Configuration**:
* CPU:
* GPU:
* PySyft Version:
* Unity Version:
* OpenMined Unity App Version:

# Checklist:

- [ ] My code follows the style guidelines of this project
- [ ] I have performed a self-review of my own code
- [ ] I have commented my code, particularly in hard-to-understand areas
- [ ] I have made corresponding changes to the documentation
- [ ] My changes generate no new warnings
- [ ] I have added tests that prove my fix is effective or that my feature works
- [ ] New and existing unit tests pass locally with my changes
- [ ] Any dependent changes have been merged and published in downstream modules
The attributes for the new _GeneralizedPointerTensor should be either created or pulled from result_dict. 

parent - Normally, the ""parent"" would come from the high level torch object wrapping the result that's returned to you, but since you'll have multiple, I suppose the only thing to do is to pick one at random. 

torch_type - you should be able to get this from any of the answers in result_dict, since they should all be identical (optional: a check to ensure that they are in fact identical)

id - this should be initialized by _GeneralizedPointerTensor automatically when it calls super().__init__ on line 596. Might be good to check that it is though.

skip_register - i think setting this to False makes sense... (which you have done)@LaRiffle feel free to commentJust one point regarding the ""parent"", the usual case would be, as far as I can imagine
```
x = sy.FloatTensor([..])
x = sy._MPCTensor().on(x)
x.send([alice, bob])
```
And _MPCTensor would use under the hood the _GeneralizedPointerTensor. Since the parent of _MPCTensor is clear, _GeneralizedPointerTensor should inherit the same one I think.
Agreed - although I think that in the specific line i was referring to... a method is being called generating a new _GPT class which doesn't necessarily have a parent yet.Perhaps polynomial approximations of function should go in its own tensor since it's highly likely that many tensors will share them? (other MPC tensors, any homomorphic encryption tensor we make, etc.)"	2	True	2018-08-29 14:34:46	2018-09-18 19:54:40	2018-09-18 19:54:40
https://github.com/OpenMined/PySyft/pull/1457	[]	[Pointers are tensors] Improve the get_pointer_to func: Add a pointer referencing system	"[Pointers are tensors] Improve the get_pointer_to func: Add a pointer referencing system# Description

Add a light pointer referencing system to be able th check very quickly if we already have a pointer to (location, id@loc)
Add minor fixes related to executing a fed learning task, and fixing the hook on backward 

## Type of change

Please delete options that are not relevant.

- [x] Bug fix (non-breaking change which fixes an issue)

# How Has This Been Tested?
Unittest
# Checklist:

- [x] My code follows the style guidelines of this project
- [x] I have performed a self-review of my own code
- [x] I have commented my code, particularly in hard-to-understand areas
- [ ] I have made corresponding changes to the documentation
- [x] My changes generate no new warnings
- [ ] I have added tests that prove my fix is effective or that my feature works
- [x] New and existing unit tests pass locally with my changes
- [x] Any dependent changes have been merged and published in downstream modules
"	1	True	2018-08-28 17:48:03	2018-08-28 17:52:24	2018-08-28 17:52:17
https://github.com/OpenMined/PySyft/pull/1455	[]	Strings id + Unittest 	"Strings id + Unittest # Description

I modify the custom_obj_hook method of PythonJSONDecoder in order to allow string id.

Fixes #
Before my change, remote operations on objects with string was throwing exception on server side and empty responses on client side.

## Type of change

- [x] Bug fix (non-breaking change which fixes an issue)
- [ ] New feature (non-breaking change which adds functionality)
- [ ] Breaking change (fix or feature that would cause existing functionality to not work as expected)
- [ ] This change requires a documentation update

# How Has This Been Tested?

Please describe the tests that you ran to verify your changes. Provide instructions so we can reproduce. Please also list any relevant details for your test configuration

- [x] Test FloatTensor with int id
- [x] Test FloatTensor with string id
- [x] Test Variable with int id
- [x] Test Variable with string id
- [x] Test Parameter with int id
- [x] Test Parameter with string id
- [x] Test DoubleTensor with int id
- [x] Test DoubleTensor with string id
- [x] Test HalfTensor with int id
- [x] Test HalfTensor with string id
- [x] Test ByteTensor with int id
- [x] Test ByteTensor with string id
- [x] Test CharTensor with int id
- [x] Test CharTensor with string id
- [x] Test ShortTensor with int id
- [x] Test ShortTensor with string id
- [x] Test IntTensor with int id
- [x] Test IntTensor with string id
- [x] Test LongTensor with int id
- [x] Test LongTensor with string id
- [ ] Test tuple
- [ ] Test set
- [ ] Test bytearray
- [ ] Test range
- [ ] Test slice

**Test Configuration**:
Docker container of the project

# Checklist:

- [x] My code follows the style guidelines of this project
- [x] I have performed a self-review of my own code
- [x] I have commented my code, particularly in hard-to-understand areas
- [x] I have made corresponding changes to the documentation
- [x] My changes generate no new warnings
- [x] I have added tests that prove my fix is effective or that my feature works
- [x] New and existing unit tests pass locally with my changes
- [x] Any dependent changes have been merged and published in downstream modules
"	1	True	2018-08-28 09:58:15	2018-08-28 13:00:03	2018-08-28 12:59:38
https://github.com/OpenMined/PySyft/pull/1437	[]	Style guide adopted	"Style guide adopted# Description

Please include a summary of the change and which issue is fixed. Please also include relevant motivation and context. List any dependencies that are required for this change.

Fixes # (issue)

## Type of change

Please delete options that are not relevant.

- [ ] Bug fix (non-breaking change which fixes an issue)
- [ ] New feature (non-breaking change which adds functionality)
- [ ] Breaking change (fix or feature that would cause existing functionality to not work as expected)
- [ ] This change requires a documentation update

# How Has This Been Tested?

Please describe the tests that you ran to verify your changes. Provide instructions so we can reproduce. Please also list any relevant details for your test configuration

- [ ] Test A
- [ ] Test B

**Test Configuration**:
* CPU:
* GPU:
* PySyft Version:
* Unity Version:
* OpenMined Unity App Version:

# Checklist:

- [ ] My code follows the style guidelines of this project
- [ ] I have performed a self-review of my own code
- [ ] I have commented my code, particularly in hard-to-understand areas
- [ ] I have made corresponding changes to the documentation
- [ ] My changes generate no new warnings
- [ ] I have added tests that prove my fix is effective or that my feature works
- [ ] New and existing unit tests pass locally with my changes
- [ ] Any dependent changes have been merged and published in downstream modules
"	1	True	2018-07-30 17:11:51	2018-07-30 19:29:30	2018-07-30 19:29:14
https://github.com/OpenMined/PySyft/pull/1432	[]	[Pointers are tensors] Playing with PlusIsMinus Tensor : full support on Torch Tensors	"[Pointers are tensors] Playing with PlusIsMinus Tensor : full support on Torch Tensors# Description
Enable support on functions and methods on local and remote tensor non-trivial chains (ie including a PlusIsMinusTensor) 

The process chain is a bit changed:
The idea that we should always send a wrapper on even a partial chain is relativised: we still do this when sending commands / objects to another worker, because it is useful for a worker receiving an object for instance to have directly the wrapper available (just as it is convenient wor the local_worker, i.e. us); but within a local chain (ie Float > _PlusIsMinus > _Pointer), the intermediate nodes don't need the wrapper to execute correctly, and this enable to more easily overload methods as well, for the head element (of e.g. command['self']) is of the same type than the class in which handle_call is performed.

## Type of change

Please delete options that are not relevant.

- [x] Bug fix (non-breaking change which fixes an issue)
- [x] New feature (non-breaking change which adds functionality)
- [x] This change requires a documentation update

# How Has This Been Tested?

Unittest

# Checklist:

- [x] My code follows the style guidelines of this project
- [x] I have performed a self-review of my own code
- [x] I have commented my code, particularly in hard-to-understand areas
- [ ] I have made corresponding changes to the documentation
- [x] My changes generate no new warnings
- [x] I have added tests that prove my fix is effective or that my feature works
- [x] New and existing unit tests pass locally with my changes
- [x] Any dependent changes have been merged and published in downstream modules
"	1	True	2018-07-30 08:21:35	2018-07-30 09:20:45	2018-07-30 09:20:45
https://github.com/OpenMined/PySyft/pull/1424	[]	Created a basic class for pandas	"Created a basic class for pandas# Description
This tries to implement the same thing that the pytorch tensors in PySyft do but with pandas data frames. This right now is a very early example of the classes. The Pandas functions are yet to be hooked and the worker class too needs a lot of work.

Please delete options that are not relevant.

- [ ] Bug fix (non-breaking change which fixes an issue)
- [x] New feature (non-breaking change which adds functionality)
- [ ] Breaking change (fix or feature that would cause existing functionality to not work as expected)
- [x] This change requires a documentation update

# How Has This Been Tested?

Please describe the tests that you ran to verify your changes. Provide instructions so we can reproduce. Please also list any relevant details for your test configuration


# Checklist:

- [x] My code follows the style guidelines of this project
- [x] I have performed a self-review of my own code
- [x] I have commented my code, particularly in hard-to-understand areas
- [ ] I have made corresponding changes to the documentation
- [x] My changes generate no new warnings
- [x] I have added tests that prove my fix is effective or that my feature works
- [ ] New and existing unit tests pass locally with my changes
- [ ] Any dependent changes have been merged and published in downstream modules"	1	True	2018-07-24 14:57:27	2018-07-24 20:18:44	2018-07-24 20:18:25
https://github.com/OpenMined/PySyft/pull/1423	[]	Add Docker Container	"Add Docker Container# Description

Add a Docker container which allow to run a notebook PySyft ready in one line.
The container is based on ubuntu:18.04, python3.6, torch 0.3.1 CPU (See Dockerfile for more details).

## Type of change

- [x] New feature (non-breaking change which adds functionality)
- [x] This change requires a documentation update

# Checklist:

- [ ] My code follows the style guidelines of this project
- [x] I have performed a self-review of my own code
- [x] I have commented my code, particularly in hard-to-understand areas
- [x] I have made corresponding changes to the documentation
- [x] My changes generate no new warnings
- [ ] I have added tests that prove my fix is effective or that my feature works
- [ ] New and existing unit tests pass locally with my changes
- [ ] Any dependent changes have been merged and published in downstream modules"	1	True	2018-07-24 14:41:19	2018-07-25 11:43:47	2018-07-25 11:43:47
https://github.com/OpenMined/PySyft/pull/1400	[]	Unit tests for multi output methods were added	"Unit tests for multi output methods were added# Description
Methods for multi-output methods were added
Issue #1385 

## Type of change

Please delete options that are not relevant.

- [ ] Bug fix (non-breaking change which fixes an issue)
- [ ] New feature (non-breaking change which adds functionality)
- [ ] Breaking change (fix or feature that would cause existing functionality to not work as expected)
- [ ] This change requires a documentation update

# How Has This Been Tested?

Please describe the tests that you ran to verify your changes. Provide instructions so we can reproduce. Please also list any relevant details for your test configuration

- [ ] Test A
- [ ] Test B

**Test Configuration**:
* CPU:
* GPU:
* PySyft Version:
* Unity Version:
* OpenMined Unity App Version:

# Checklist:

- [ ] My code follows the style guidelines of this project
- [ ] I have performed a self-review of my own code
- [ ] I have commented my code, particularly in hard-to-understand areas
- [ ] I have made corresponding changes to the documentation
- [ ] My changes generate no new warnings
- [ ] I have added tests that prove my fix is effective or that my feature works
- [ ] New and existing unit tests pass locally with my changes
- [ ] Any dependent changes have been merged and published in downstream modules
Maybe you can now remove the test `test_torch_function_with_multiple_output_on_remote_var` which is not as complete as yours :)
Also, I think `test_torch_function_with_multiple_input_on_remote_var` is also no longer needed tooHaha, I'm sorry. I was on an older branch and when I merged to submit a PR I didn't notice your unit tests. I will actually keep those untouched and add some more tests for Variables since you're testing the variables."	1	True	2018-07-14 17:29:22	2018-07-16 11:20:55	2018-07-16 11:20:30
https://github.com/OpenMined/PySyft/pull/1399	[]	Seeded test_federated_learning and added test for remote optim.step()	"Seeded test_federated_learning and added test for remote optim.step()# Description
Seeded test_federated_learning and added unittest for remote optim.step()

Fixes #1398

## Type of change

Added unittests.


# How Has This Been Tested?

All tests pass.


# Checklist:

- [x] My code follows the style guidelines of this project
- [x] I have performed a self-review of my own code
- [x] My changes generate no new warnings
- [x] I have added tests that prove my fix is effective or that my feature works
- [x] New and existing unit tests pass locally with my changes
Hey, I think the point of this test is to make sure that the parameters change after doing all this. In particular, unless I'm missing something, I think it's best to remove this line and make sure that the parameters from the second iteration _don't_ equal those from the first.Other than that, looks good!Actually i was testing that two models with same initial weights have the same updates.
but now i have changed it as you have specified.Could these assertions be specific values as well as opposed to simply checking for equality. It could break in all sorts of terrible ways (param[2] could equal -inf, NaN, or None for example) and this test would still pass. Requiring it to equal a specific value, however, makes the test much more precise"	4	True	2018-07-13 19:46:18	2018-07-14 11:50:09	2018-07-14 11:50:05
https://github.com/OpenMined/PySyft/pull/1393	[]	Unit tests for binary methods were added	"Unit tests for binary methods were added# Description

Please include a summary of the change and which issue is fixed. Please also include relevant motivation and context. List any dependencies that are required for this change.

Unit tests for binary methods were added.

 #1385 

## Type of change

Please delete options that are not relevant.

- [ ] Bug fix (non-breaking change which fixes an issue)
- [ ] New feature (non-breaking change which adds functionality)
- [ ] Breaking change (fix or feature that would cause existing functionality to not work as expected)
- [ ] This change requires a documentation update

# How Has This Been Tested?

Please describe the tests that you ran to verify your changes. Provide instructions so we can reproduce. Please also list any relevant details for your test configuration

`python setup.py test`

**Test Configuration**:
* CPU:
* GPU:
* PySyft Version:
* Unity Version:
* OpenMined Unity App Version:

# Checklist:

- [ ] My code follows the style guidelines of this project
- [ ] I have performed a self-review of my own code
- [ ] I have commented my code, particularly in hard-to-understand areas
- [ ] I have made corresponding changes to the documentation
- [ ] My changes generate no new warnings
- [ ] I have added tests that prove my fix is effective or that my feature works
- [ ] New and existing unit tests pass locally with my changes
- [ ] Any dependent changes have been merged and published in downstream modules"	1	True	2018-07-07 09:54:55	2018-07-10 14:42:37	2018-07-10 14:42:37
https://github.com/OpenMined/PySyft/pull/1392	[]	Unit test for _add method was added	"Unit test for _add method was added# Description
Unit tests for add_ method were added.  

Fixes  #1385 

## Type of change
 New feature (non-breaking change which adds functionality)

# How Has This Been Tested?
python setup.py test

# Checklist:

- [ ] My code follows the style guidelines of this project
- [ ] I have performed a self-review of my own code
- [ ] I have commented my code, particularly in hard-to-understand areas
- [ ] I have made corresponding changes to the documentation
- [ ] My changes generate no new warnings
- [ ] I have added tests that prove my fix is effective or that my feature works
- [x] New and existing unit tests pass locally with my changes
- [ ] Any dependent changes have been merged and published in downstream modules"	3	True	2018-07-07 09:34:33	2018-07-10 14:44:10	2018-07-10 14:44:09
https://github.com/OpenMined/PySyft/pull/1388	[]	added whoami to SocketWorker and removed redundant paramter from Base‚Ä¶	"added whoami to SocketWorker and removed redundant paramter from Base‚Ä¶added whoami to SocketWorker and removed redundant paramter from BaseWorker.register_object

# Checklist:

- [x] My code follows the style guidelines of this project
- [x] I have performed a self-review of my own code
- [x] I have commented my code, particularly in hard-to-understand areas
- [x] I have made corresponding changes to the documentation
- [x] My changes generate no new warnings
- [x] I have added tests that prove my fix is effective or that my feature works
- [x] New and existing unit tests pass locally with my changes
- [x] Any dependent changes have been merged and published in downstream modules
Style: put this on one line or have one line for each parameterStyle: put on one lineThis is really useful for sharing your id with other worker. Do we want to have the ability to call this on any known worker so that workers can share the id of workers that they know with other workers they know? Or more specifically the client can tell the workers who the other workers arestyle: one param per line would have missed owners hereYeah! Seems like we should. I'll add a default to BaseWorker."	2	True	2018-07-05 15:23:03	2018-07-06 13:41:33	2018-07-06 13:41:33
https://github.com/OpenMined/PySyft/pull/1383	[]	Fixes Issue #1382 : Call of torch functions on remote Variable (ex: torch.matmul(x,y))	"Fixes Issue #1382 : Call of torch functions on remote Variable (ex: torch.matmul(x,y))# Description

Fixes Issue #1382

## Type of change

Please delete options that are not relevant.

- [x] Bug fix (non-breaking change which fixes an issue)
- [ ] New feature (non-breaking change which adds functionality)
- [ ] Breaking change (fix or feature that would cause existing functionality to not work as expected)
- [ ] This change requires a documentation update

# How Has This Been Tested?

Pysyft test pass.

**Test Configuration**:
(See Issue #1382)

# Checklist:

- [x] My code follows the style guidelines of this project
- [x] I have performed a self-review of my own code
- [ ] I have commented my code, particularly in hard-to-understand areas
- [ ] I have made corresponding changes to the documentation
- [ ] My changes generate no new warnings
- [ ] I have added tests that prove my fix is effective or that my feature works
- [x] New and existing unit tests pass locally with my changes
- [ ] Any dependent changes have been merged and published in downstream modules"	2	True	2018-07-03 14:35:46	2018-07-04 16:06:04	2018-07-04 16:06:04
https://github.com/OpenMined/PySyft/pull/1371	[]	Allow socket connection to remote machines	"Allow socket connection to remote machines# Description

This pull request just replace the hardcoded 'localhost' host in socket connections with the object's attribute.
It allows to connect to remote computers (not only localhost)


## Type of change

- [x] Bug fix (non-breaking change which fixes an issue)
- [ ] New feature (non-breaking change which adds functionality)
- [ ] Breaking change (fix or feature that would cause existing functionality to not work as expected)
- [ ] This change requires a documentation update

# How Has This Been Tested?

Please describe the tests that you ran to verify your changes. Provide instructions so we can reproduce. Please also list any relevant details for your test configuration

- [x] Test with localhost (basically run this notebook: https://github.com/OpenMined/PySyft/blob/master/examples/SocketWorker%20Client.ipynb
- [x] Test with 2 computers on a local network and initalize SocketWorkers with real IP address

# Checklist:

- [x] My code follows the style guidelines of this project
- [x] I have performed a self-review of my own code
- [x] I have commented my code, particularly in hard-to-understand areas
- [x] I have made corresponding changes to the documentation
- [x] My changes generate no new warnings
- [x] I have added tests that prove my fix is effective or that my feature works
- [x] New and existing unit tests pass locally with my changes
- [x] Any dependent changes have been merged and published in downstream modules"	1	True	2018-06-27 09:42:04	2018-06-27 11:49:45	2018-06-27 11:33:27
https://github.com/OpenMined/PySyft/pull/1366	[]	cleaned up syft/core/workers and added documentation to SocketWorker	"cleaned up syft/core/workers and added documentation to SocketWorker# Description

cleaned up syft/core/workers and added documentation to SocketWorker

# How Has This Been Tested?

Using the existing Unit testing suite

# Checklist:

- [x] My code follows the style guidelines of this project
- [x] I have performed a self-review of my own code
- [x] I have commented my code, particularly in hard-to-understand areas
- [x] I have made corresponding changes to the documentation
- [x] My changes generate no new warnings
- [x] I have added tests that prove my fix is effective or that my feature works
- [x] New and existing unit tests pass locally with my changes
- [x] Any dependent changes have been merged and published in downstream modules
"	1	True	2018-06-25 17:27:16	2018-06-26 15:47:21	2018-06-26 15:47:21
https://github.com/OpenMined/PySyft/pull/1360	[]	Fix broken links to Virtual Worker Tutorial notebook	"Fix broken links to Virtual Worker Tutorial notebook# Description

""SockerWorker Server.ipynb"" and ""SockerWorker Client.ipynb"" notebooks contains broken links to ""Basic Virtual Worker Tutorial"" notebook.

# Checklist:

- [x] My changes generate no new warnings
"	1	True	2018-06-23 06:20:15	2018-06-23 16:28:15	2018-06-23 16:28:15
https://github.com/OpenMined/PySyft/pull/1357	[]	Adding binder support for repository	"Adding binder support for repository# Description

Add the links and code to make Binder (http://repo2docker.readthedocs.io) work with the repo. Basically, it has the dependencies in a conda standard environment. It makes running and testing the code as easy as clicking on a link (https://mybinder.org/v2/gh/kmader/PySyft/patch-2?filepath=examples%2FFederated%20Learning%20Example.ipynb) to run and start the Federated Learning Example

Fixes # (issue)

## Type of change

Please delete options that are not relevant.

- [x] New feature (non-breaking change which adds functionality)

# Checklist:

- [x] My code follows the style guidelines of this project
- [x] I have performed a self-review of my own code
- [x] I have commented my code, particularly in hard-to-understand areas
- [x] I have made corresponding changes to the documentation
- [x] My changes generate no new warnings
- [x] I have added tests that prove my fix is effective or that my feature works
- [x] New and existing unit tests pass locally with my changes
- [x] Any dependent changes have been merged and published in downstream modules"	1	True	2018-06-22 12:48:52	2018-06-22 13:29:01	2018-06-22 13:29:01
https://github.com/OpenMined/PySyft/pull/1356	[]	Adding notebook testing [WIP]	"Adding notebook testing [WIP]# Description

First attempt to execute and test notebooks as part of travis testing

Fixes # (issue)

https://github.com/OpenMined/PySyft/issues/1355

## Type of change

Improved testing (didn't see a checkbox for that)

# Checklist:

- [x] My code follows the style guidelines of this project
- [x] I have performed a self-review of my own code
- [x] I have commented my code, particularly in hard-to-understand areas
- [x] I have made corresponding changes to the documentation
- [x] My changes generate no new warnings
- [x] I have added tests that prove my fix is effective or that my feature works
- [x] New and existing unit tests pass locally with my changes
- [x] Any dependent changes have been merged and published in downstream modules"	4	True	2018-06-22 08:07:51	2020-02-01 12:55:14	2018-06-22 17:32:58
https://github.com/OpenMined/PySyft/pull/1329	[]	Grid to syft merge	"Grid to syft merge# Description

Please include a summary of the change and which issue is fixed. Please also include relevant motivation and context. List any dependencies that are required for this change.

Fixes # (issue)

## Type of change

Please delete options that are not relevant.

- [ ] Bug fix (non-breaking change which fixes an issue)
- [ ] New feature (non-breaking change which adds functionality)
- [ ] Breaking change (fix or feature that would cause existing functionality to not work as expected)
- [ ] This change requires a documentation update

# How Has This Been Tested?

Please describe the tests that you ran to verify your changes. Provide instructions so we can reproduce. Please also list any relevant details for your test configuration

- [ ] Test A
- [ ] Test B

**Test Configuration**:
* CPU:
* GPU:
* PySyft Version:
* Unity Version:
* OpenMined Unity App Version:

# Checklist:

- [ ] My code follows the style guidelines of this project
- [ ] I have performed a self-review of my own code
- [ ] I have commented my code, particularly in hard-to-understand areas
- [ ] I have made corresponding changes to the documentation
- [ ] My changes generate no new warnings
- [ ] I have added tests that prove my fix is effective or that my feature works
- [ ] New and existing unit tests pass locally with my changes
- [ ] Any dependent changes have been merged and published in downstream modules
Probably best to .gitignore the .ipynb_checkpoints directory"	1	True	2018-05-22 16:38:11	2018-06-02 20:02:59	2018-06-02 20:02:59
https://github.com/OpenMined/PySyft/pull/1322	[]	Adresses #1162 add rsqrt functionality	"Adresses #1162 add rsqrt functionality# Description
Adds the Reciprocal Square Root functionality to int tensors

Addresses # (issue) 1162 in PySyft

## Type of change

- [ ] Bug fix (non-breaking change which fixes an issue)
- [x] New feature (non-breaking change which adds functionality)
- [ ] Breaking change (fix or feature that would cause existing functionality to not work as expected)
- [ ] This change requires a documentation update
- [x] Added tests for an existing feature

# How Has This Been Tested?
```
I added tests in  IntTensorTest.cs

            int[] data1 = {1, 2, 3, 4};
            int[] shape1 = {2, 2};

            int[] data2 = {1, 1, 1, 0};
            int[] shape2 = {2, 2};
```
# Checklist:

- [ ] My code follows the style guidelines of this project
- [X] I have performed a self-review of my own code
- [x] I have commented my code, particularly in hard-to-understand areas
- [ ] I have made corresponding changes to the documentation
- [ ] My changes generate no new warnings
- [x] I have added tests that prove my fix is effective or that my feature works
- [x] New and existing unit tests pass locally with my changes
- [ ] Any dependent changes have been merged and published in downstream modules


Link to Issue:
https://github.com/OpenMined/PySyft/issues/1162

Confusion/Problem:
```
What is the expected behaviour for IntTensor Rsqrt

`x => 1 / (int) Math.Sqrt(x)`

or

`x => (int)(1 /  Math.Sqrt(x))` 

```

Link to OpenMined PR: https://github.com/OpenMined/OpenMined/pull/427"	2	True	2018-02-18 19:28:56	2018-02-19 15:49:25	2018-02-19 10:48:33
https://github.com/OpenMined/PySyft/pull/1315	[]	Applied fix for issue #1314	"Applied fix for issue #1314# Description
The bug was fixed by resolving a missing import. 

## Type of change
- [x] Bug fix (non-breaking change which fixes an issue)

## How Has This Been Tested?
- [x] Ran existing unit tests for the IntTensor functions sin() and cos() 
- [x] Added 2 integration tests for the IntTensorsfunction sin() and cos() (the PR will follow-up) 


# Checklist:

- [x] My code follows the style guidelines of this project
- [x] I have performed a self-review of my own code
- [x] I have commented my code, particularly in hard-to-understand areas
- [x] I have made corresponding changes to the documentation
- [x] My changes generate no new warnings
- [x] I have added tests that prove my fix is effective or that my feature works
- [x] New and existing unit tests pass locally with my changes
- [x] Any dependent changes have been merged and published in downstream modules"	1	True	2018-01-31 22:24:32	2018-02-01 18:46:28	2018-02-01 18:46:28
https://github.com/OpenMined/PySyft/pull/1309	[]	Feature/view  int tensor	"Feature/view  int tensor# Description

Implements view feature for int tensor with -1 parameter support .

Fixes # (1298)

## Type of change

Please delete options that are not relevant.

- [x] New feature (non-breaking change which adds functionality)
- [x] This change requires a documentation update

# How Has This Been Tested?

Please describe the tests that you ran to verify your changes. Provide instructions so we can reproduce. Please also list any relevant details for your test configuration

- [x] Test to check -1 parameter support.
- [x] Test to convert 3D tensor to 2D tensor

**Test Configuration**:
* CPU: i7 7700
* GPU: GTX 1070
* PySyft Version: latest
* Unity Version: latest
* OpenMined Unity App Version: latest

# Checklist:

- [x] My code follows the style guidelines of this project
- [x] I have performed a self-review of my own code
- [x] I have commented my code, particularly in hard-to-understand areas
- [ ] I have made corresponding changes to the documentation
- [x] My changes generate no new warnings
- [x] I have added tests that prove my fix is effective or that my feature works
- [x] New and existing unit tests pass locally with my changes
- [x] Any dependent changes have been merged and published in downstream modules"	2	True	2018-01-28 17:05:39	2018-01-28 18:35:36	2018-01-28 17:12:46
https://github.com/OpenMined/PySyft/pull/1306	[]	feat: keras interface predict function update	"feat: keras interface predict function updateHello,

Sorry for the small PR.  For the Keras interface, the predict function returns now a numpy array like in the Keras library, instead of a FloatTensor. 

Fixes # (issue)

## Type of change

Please delete options that are not relevant.

- [X] New feature (non-breaking change which adds functionality)

# How Has This Been Tested?

Please describe the tests that you ran to verify your changes. Provide instructions so we can reproduce. Please also list any relevant details for your test configuration

- [x] With notebook

**Test Configuration**:
* CPU:
* GPU:
* PySyft Version:
* Unity Version:
* OpenMined Unity App Version:

# Checklist:

- [x] My code follows the style guidelines of this project
- [x] I have performed a self-review of my own code
- [x] I have commented my code, particularly in hard-to-understand areas
- [x] I have made corresponding changes to the documentation
- x ] My changes generate no new warnings
- [ ] I have added tests that prove my fix is effective or that my feature works
- [x] New and existing unit tests pass locally with my changes
- [x] Any dependent changes have been merged and published in downstream modules
"	1	True	2018-01-25 17:40:01	2018-01-27 00:17:48	2018-01-27 00:17:37
https://github.com/OpenMined/PySyft/pull/1301	[]	Feature/keras	"Feature/kerasHello,

This PR add Adam and RMSprop optimizer to Keras interface.

Fixes # (issue)

## Type of change

Please delete options that are not relevant.

- [x] New feature (non-breaking change which adds functionality)

# How Has This Been Tested?

Please describe the tests that you ran to verify your changes. Provide instructions so we can reproduce. Please also list any relevant details for your test configuration

- [x] Tested with notebook

**Test Configuration**:
* CPU:
* GPU:
* PySyft Version:
* Unity Version:
* OpenMined Unity App Version:

# Checklist:

- [x] My code follows the style guidelines of this project
- [x] I have performed a self-review of my own code
- [x] I have commented my code, particularly in hard-to-understand areas
- [x] I have made corresponding changes to the documentation
- [x] My changes generate no new warnings
- [ ] I have added tests that prove my fix is effective or that my feature works
- [x] New and existing unit tests pass locally with my changes
- [x] Any dependent changes have been merged and published in downstream modules
"	1	True	2018-01-21 07:15:02	2018-01-25 16:18:26	2018-01-21 09:06:23
https://github.com/OpenMined/PySyft/pull/1296	[]	added sin cpu and gpu functionality for Int tensors.	"added sin cpu and gpu functionality for Int tensors.# Description

Added sin functionality for Int Tensors, that accepts an Int tensor and returns a Float Tensor containing the sin of each element.

Fixes #1178, #1180 

## Type of change

Please delete options that are not relevant.

- [x] New feature (non-breaking change which adds functionality)
- [x] This change requires a documentation update

# How Has This Been Tested?

Please describe the tests that you ran to verify your changes. Provide instructions so we can reproduce. Please also list any relevant details for your test configuration

- [x] Test : The function passed all the test on TestRunner on Unity.

**Test Configuration**:
* CPU: Windows 10 Intel(R) Core i5-4200U CPU@ 1.6GHz 2.30GHz
* GPU: AMD Radeon HD 8670M Intel(R) HD Graphics 4400
* PySyft Version: 0.1
* Unity Version: latest
* OpenMined Unity App Version: latest

# Checklist:

- [x] My code follows the style guidelines of this project
- [x] I have performed a self-review of my own code
- [x] I have commented my code, particularly in hard-to-understand areas
- [x] I have made corresponding changes to the documentation
- [x] My changes generate no new warnings
- [x] I have added tests that prove my fix is effective or that my feature works
- [x] New and existing unit tests pass locally with my changes
- [x] Any dependent changes have been merged and published in downstream modules"	3	True	2018-01-17 12:26:35	2018-01-18 07:45:00	2018-01-18 03:32:03
https://github.com/OpenMined/PySyft/pull/1295	[]	Feature/transpose  int tensor	"Feature/transpose  int tensor# Description

Added T() method to IntTensor with CPU support to calculate the transpose of an IntTensor.

Fixes # (1222)

## Type of change

Please delete options that are not relevant.

- [x] New feature (non-breaking change which adds functionality)
- [x] This change requires a documentation update

# How Has This Been Tested?

Please describe the tests that you ran to verify your changes. Provide instructions so we can reproduce. Please also list any relevant details for your test configuration
- [x] Verifying transpose of 2X2 IntTensor
- [x] Verifying transpose of 2X3 IntTensor
- [x] Verifying transpose of 2X2X2 IntTensor

**Test Configuration**:
* CPU: Windows Core-i7
* GPU: GTX 1070
* PySyft Version: 0.1
* Unity Version: 2017.03.0f3
* OpenMined Unity App Version:

# Checklist:

- [x] My code follows the style guidelines of this project
- [x] I have performed a self-review of my own code
- [x] I have commented my code, particularly in hard-to-understand areas
- [x] I have made corresponding changes to the documentation
- [x] My changes generate no new warnings
- [x] I have added tests that prove my fix is effective or that my feature works
- [x] New and existing unit tests pass locally with my changes
- [x] Any dependent changes have been merged and published in downstream modules"	1	True	2018-01-16 18:12:25	2018-01-18 10:57:59	2018-01-18 10:43:38
https://github.com/OpenMined/PySyft/pull/1288	[]	Implemented IntTensor Lt and inline Lt on CPU	"Implemented IntTensor Lt and inline Lt on CPUFixes #1039 and #1040 

## Type of change

Please delete options that are not relevant.

- [x] New feature (non-breaking change which adds functionality)
- [ ] This change requires a documentation update

# How Has This Been Tested?

- [x] Passing OpenMined Unity tests
- [x] Passing Notebook integration tests (examples)


# Checklist:

- [x] My code follows the style guidelines of this project
- [x] I have performed a self-review of my own code
- [x] I have commented my code, particularly in hard-to-understand areas
- [x] I have made corresponding changes to the documentation
- [x] My changes generate no new warnings
- [x] I have added tests that prove my fix is effective or that my feature works
- [x] New and existing unit tests pass locally with my changes
- [ ] Any dependent changes have been merged and published in downstream modules"	1	True	2018-01-14 19:09:50	2018-01-15 01:53:18	2018-01-15 01:53:18
https://github.com/OpenMined/PySyft/pull/1287	[]	added sign function for Int Tensor	"added sign function for Int Tensor# Description

Implements the sign function for Int Tensors as stated in issue Pysyft OpenMined/PySyft#1174

Corresponding OpenMined PR:  https://github.com/OpenMined/OpenMined/pull/349

Fixes # (issue)  OpenMined/PySyft#1174

## Type of change

Please delete options that are not relevant.

- [x] New feature (non-breaking change which adds functionality)

# How Has This Been Tested?

Please describe the tests that you ran to verify your changes. Provide instructions so we can reproduce. Please also list any relevant details for your test configuration

- I added a unit test and tested that the functionality of the sign function.

- I ran a jupyter notebook tests of the form, to ensure functionality is accurate.

`data = np.array([[-1,-2,3],[4,5,-6]]).astype('int')`
`m = IntTensor(data)`
`m.sign()`



**Test Configuration**:
* CPU: 2.7 GHz Intel Core i5
* GPU: 
* PySyft Version:
* Unity Version:
* OpenMined Unity App Version:

# Checklist:

- [x] My code follows the style guidelines of this project
- [x] I have performed a self-review of my own code
- [x] I have commented my code, particularly in hard-to-understand areas
- [x] I have made corresponding changes to the documentation
- [x] My changes generate no new warnings
- [x] I have added tests that prove my fix is effective or that my feature works
- [x] New and existing unit tests pass locally with my changes
- [x] Any dependent changes have been merged and published in downstream modulesreturns a float?"	2	True	2018-01-14 15:34:07	2018-01-15 22:50:25	2018-01-15 22:50:25
https://github.com/OpenMined/PySyft/pull/1280	[]	Add trace function to intTensor	"Add trace function to intTensor# Description

Fixes #1246
OpenMined PR: https://github.com/OpenMined/OpenMined/pull/331

## Type of change

- [x] New feature (non-breaking change which adds functionality)

# How Has This Been Tested?

- [x] Added CPU test in Unity

# Checklist:

- [x] My code follows the style guidelines of this project
- [x] I have performed a self-review of my own code
- [x] I have commented my code, particularly in hard-to-understand areas
- [x] I have made corresponding changes to the documentation
- [x] My changes generate no new warnings
- [x] I have added tests that prove my fix is effective or that my feature works
- [x] New and existing unit tests pass locally with my changes
- [x] Any dependent changes have been merged and published in downstream modules"	1	True	2018-01-13 21:09:22	2018-01-13 21:31:12	2018-01-13 21:31:05
https://github.com/OpenMined/PySyft/pull/758	[]	__add__ method for IntTensor	"__add__ method for IntTensor# Description

Added the `__add__` method to `IntTensor`

Fixes OpenMined/PySyft#755

## Type of change

- [x] New feature (non-breaking change which adds functionality)

# How Has This Been Tested?

- [x] Created a Jupyter notebook example
- [x] Added CPU/GPU tests in Unity

# Checklist:

- [x] My code follows the style guidelines of this project
- [x] I have performed a self-review of my own code
- [x] I have commented my code, particularly in hard-to-understand areas
- [x] I have made corresponding changes to the documentation
- [x] My changes generate no new warnings
- [x] I have added tests that prove my fix is effective or that my feature works
- [x] New and existing unit tests pass locally with my changes
- [x] Any dependent changes have been merged and published in downstream modules"	4	True	2018-01-11 23:35:00	2018-01-13 00:27:02	2018-01-12 22:56:57
https://github.com/OpenMined/PySyft/pull/754	[]	bugfix: do not delete results for inline aritmetic operations	"bugfix: do not delete results for inline aritmetic operations# Description

Fixes a bug: for inline arithmetic operations, no new python FloatTensor should be created. Otherwise, the first version of the tensor in python will be deleted, causing the Tensor in C# to be deleted aswell.

## Type of change

- Bug fix 

# How Has This Been Tested?

Tested in Syft Tensor Example Notebook.ipynb

# Checklist:

- [x] My code follows the style guidelines of this project
- [x] I have performed a self-review of my own code
- [ ] I have commented my code, particularly in hard-to-understand areas
- [ ] I have made corresponding changes to the documentation
- [x] My changes generate no new warnings
- [ ] I have added tests that prove my fix is effective or that my feature works
- [ ] New and existing unit tests pass locally with my changes
- [x] Any dependent changes have been merged and published in downstream modules
"	1	True	2018-01-09 15:45:14	2018-01-09 22:39:58	2018-01-09 22:37:56
https://github.com/OpenMined/PySyft/pull/752	[]	bugfix no-params-func	"bugfix no-params-func# Description

Simple tensor ops (a-b) were broken

## Type of change

Please delete options that are not relevant.

- [ X ] Bug fix (non-breaking change which fixes an issue)

# How Has This Been Tested?

Tested some notebooks that weren't working for me before"	1	True	2018-01-08 20:58:13	2018-01-08 21:06:25	2018-01-08 21:06:25
https://github.com/OpenMined/PySyft/pull/748	[]	implement model.evaluate() function	"implement model.evaluate() function# Description
To make it easier to evaluate the performance of different models, it's nice to have a model.evaluate() function that returns certain metrics and loss.

- Implemented model.evaluate() that returns metrics you provide (this can be custom metrics as well).
- Return the test loss

Dependent upon: https://github.com/OpenMined/OpenMined/pull/316 !

## Type of change

- [ ] Bug fix (non-breaking change which fixes an issue)
- [X] New feature (non-breaking change which adds functionality)
- [ ] Breaking change (fix or feature that would cause existing functionality to not work as expected)
- [ ] This change requires a documentation update

# How Has This Been Tested?
Tested in the Keras notebook.

# Checklist:

- [X] My code follows the style guidelines of this project
- [X] I have performed a self-review of my own code
- [X] I have commented my code, particularly in hard-to-understand areas
- [X] My changes generate no new warnings
- [X] I have added tests that prove my fix is effective or that my feature works
- [X] New and existing unit tests pass locally with my changes
- [X] Any dependent changes have been merged and published in downstream modules"	4	True	2018-01-06 13:48:59	2018-01-15 08:21:17	2018-01-15 02:16:18
https://github.com/OpenMined/PySyft/pull/747	[]	Implemented hyperparameter forwarding Keras	"Implemented hyperparameter forwarding KerasImplemented hyperparameter forwarding Keras
# Description
I noticed it wasn't possible to forward any hyperparameters like lr, momentum and decay to the optimizer in Keras. So I added keyword arguments to the optimizer and unpack them when calling the syft function.

## Type of change
- [ ] Bug fix (non-breaking change which fixes an issue)
- [X] New feature (non-breaking change which adds functionality)
- [ ] Breaking change (fix or feature that would cause existing functionality to not work as expected)
- [ ] This change requires a documentation update

# How Has This Been Tested?
Tested in the Keras notebook.

# Checklist:
- [X] My code follows the style guidelines of this project
- [X] I have performed a self-review of my own code
- [X] My changes generate no new warnings
- [ ] I have added tests that prove my fix is effective or that my feature works
- [X] New and existing unit tests pass locally with my changes
- [X] Any dependent changes have been merged and published in downstream modules
"	1	True	2018-01-06 11:55:43	2018-01-06 13:50:41	2018-01-06 13:50:32
https://github.com/OpenMined/PySyft/pull/742	[]	pysyft side of the openmined -> pysyft grid communication	"pysyft side of the openmined -> pysyft grid communication# Description

pysyft side of the openmined -> pysyft grid communication

## Type of change

- [x] New feature (non-breaking change which adds functionality)

# Checklist:

- [x] My code follows the style guidelines of this project
- [x] I have performed a self-review of my own code
- [x] I have commented my code, particularly in hard-to-understand areas
- [x] I have made corresponding changes to the documentation
- [x] My changes generate no new warnings
- [x] I have added tests that prove my fix is effective or that my feature works
- [x] New and existing unit tests pass locally with my changes
- [x] Any dependent changes have been merged and published in downstream modules
"	3	True	2018-01-05 19:17:51	2018-01-05 20:05:31	2018-01-05 20:05:25
https://github.com/OpenMined/PySyft/pull/740	[]	Reducing default epsilon for RMSProp and Adam to fit in float	"Reducing default epsilon for RMSProp and Adam to fit in float# Description

1e-8  = 0.00000001 which is too many digits for a float so the value of epsilon becomes 0
which can result in nan errors with RMSProp and Adam.
Not sure if there's an easy way to use doubles in this scenario so setting epsilon to 1e-6 for now

## Type of change

Please delete options that are not relevant.

- [x] Bug fix (non-breaking change which fixes an issue)
- [ ] New feature (non-breaking change which adds functionality)
- [ ] Breaking change (fix or feature that would cause existing functionality to not work as expected)
- [ ] This change requires a documentation update"	1	True	2018-01-05 18:56:21	2018-01-05 19:55:00	2018-01-05 19:54:50
https://github.com/OpenMined/PySyft/pull/397	[]	do not use hard coded type sizes	"do not use hard coded type sizes<!--
Thanks for submitting a PR. Please make sure  that you have read the contribution guidelines: https://github.com/OpenMined/Docs/blob/master/contributing/guidelines.md
-->


<!-- Example: Fixes #334 -->


#### What does your implementation fix? 

We should not use hard coded type sizes in the library. This fix uses the host architecture type size.



<!--
Please note that we are a small team of volunteers so patience is
essential; We value all the contributions, no matter how small they are. 
If we are slow to review, either the pull request needs 
some tweaking,convincing, etc. 
or probably the reviewers could be busy. In any
case, we hope for your understanding in the process.

However If you feel that  this needs to be fastened up.
Reachout to us on our slack #pysyft channel.

Thanks for the contribution!
-->"	1	True	2017-11-10 14:06:08	2017-11-10 14:19:37	2017-11-10 14:19:37
https://github.com/OpenMined/PySyft/pull/396	[]	Implement default set functionality resolves #93	"Implement default set functionality resolves #93<!--
Thanks for submitting a PR. Please make sure  that you have read the contribution guidelines: https://github.com/OpenMined/Docs/blob/master/contributing/guidelines.md
-->
#### Reference Issue
Fixes #93 

<!-- Example: Fixes #334 -->


#### What does your implementation fix? 

Following methods added on TensorBase :
- `storage_offset`
- `set_` 

#### Explain your changes.

Implements the same API as `torch.Tensor.set_()`, only it uses an `np.ndarray` in place of `torch.Storage`. 

So as a syft user instead of passing a `torch.Storage` to `set_` I need to pass a `np.ndarray`

#### include other comments?(if any)


<!--
Please note that we are a small team of volunteers so patience is
essential; We value all the contributions, no matter how small they are. 
If we are slow to review, either the pull request needs 
some tweaking,convincing, etc. 
or probably the reviewers could be busy. In any
case, we hope for your understanding in the process.

However If you feel that  this needs to be fastened up.
Reachout to us on our slack #pysyft channel.

Thanks for the contribution!
-->"	1	True	2017-11-10 13:35:27	2017-11-10 13:52:49	2017-11-10 13:52:49
https://github.com/OpenMined/PySyft/pull/394	[]	rolled back to using phe's floating point, until we have a better solution	"rolled back to using phe's floating point, until we have a better solution#### Reference Issue
#393 

#### Explain your changes.
It removes the fixed-point implementation that was contributed by yours truly!
The implementation was not very well thought out and buggy, and should not have been merged in the first place. I decided to remove it and fall back to `phe`'s built-in floating-point implementation, until we have a better solution."	1	True	2017-11-02 20:09:32	2017-11-03 14:47:26	2017-11-03 14:47:26
https://github.com/OpenMined/PySyft/pull/392	[]	Add cross functionality for Base Tensor Type	"Add cross functionality for Base Tensor Type#### Reference Issue
- Fixes #382

#### What does your implementation fix? 
Adds default cross functionality for base tensor type

#### Explain your changes.
- [X] Implement cross functionality using numpy.cross
- [X] If the Base Tensor type's attribute ""encrypted"" is set to True, it should return a NotImplemented error.
- [X] corresponding unit tests demonstrating the correct operation on the Base Tensor type implemented over int and float Tensors.
- [X] Inline documentation.
could you add an encryption [check](https://github.com/OpenMined/PySyft/blob/34af4f778c2b2f1a16a5a8aa505c37b7d9b18009/syft/math.py#L330) for the inputs that are passed?Have made the requested changes and updated the PR."	2	True	2017-11-02 19:06:29	2017-11-03 07:02:26	2017-11-03 07:02:26
https://github.com/OpenMined/PySyft/pull/391	[]	Split tensor	"Split tensorThis fixes #383 

#### What does your implementation fix? 
This add split functionality to default tensor type.

#### Explain your changes.
In syft.math it add a split function which uses numpy.array_split() for splitting the array into given axis into `split size` size of each chunk. The function returns a list containing divided sub-arrays. I had to some initial calculations to match the numpy api."	10	True	2017-10-31 09:08:36	2017-11-01 10:33:53	2017-11-01 10:33:53
https://github.com/OpenMined/PySyft/pull/388	[]	Dense to sparse matrix	"Dense to sparse matrix#### Reference Issue
Implements #274 


#### What does your implementation fix? 
Implements dense to sparse matrix conversion

#### Explain your changes.
Implement sparse function in math.py

implemented function uses scipy sompressed sparse row matrix format to create sparse matrix
function returns TensorBase object
Implement spars functions in tensor.py
sparse() returns TensorBase object same as sparse() in math.py
sparse_() operates inline
Add unit tests for both sparse() functions and for sparse_() 

#### include other comments?(if any)
A few days ago I created original pull request (#376), but I got a bit confused trying to push my changes after rebase and changes according to comments from reviewer so I accidentally deleted branch from my fork which automatically closed that pull request."	4	True	2017-10-30 21:15:08	2017-11-04 02:43:52	2017-11-04 02:43:52
https://github.com/OpenMined/PySyft/pull/387	[]	Remove capsule dependency from notebooks	"Remove capsule dependency from notebooks#### Reference Issue
- Addresses #384 
#### What does your implementation fix? 
- Removes capsule dependencies from the following notebooks
  - [Syft - Paillier Homographic Encrypted Linear Classification example ](https://github.com/OpenMined/PySyft/blob/master/notebooks/Syft%20-%20Paillier%20Homographic%20Encrypted%20Linear%20Classification%20example%20.ipynb)
  - [Syft - Paillier Encrypted Linear Classification](https://github.com/OpenMined/PySyft/blob/master/notebooks/Syft%20-%20Paillier%20Encrypted%20Linear%20Classification.ipynb)
#### Explain your changes.
Use `syft.he.keys.Paillier` instead of capsule to get the keys"	3	True	2017-10-30 16:39:21	2017-11-03 14:47:59	2017-11-03 14:47:59
https://github.com/OpenMined/PySyft/pull/374	[]	changes multinomial to match PyTorch's API	"changes multinomial to match PyTorch's API<!--
Thanks for submitting a PR. Please make sure  that you have read the contribution guidelines: https://github.com/OpenMined/Docs/blob/master/contributing/guidelines.md
-->
#### Reference Issue

<!-- Example: Fixes #334 -->


#### What does your implementation fix? 
Addresses the issue discussed in PR #367 comments

#### Explain your changes.
It changes multinomial implementation to match PyTorch's API

#### include other comments?(if any)


<!--
Please note that we are a small team of volunteers so patience is
essential; We value all the contributions, no matter how small they are. 
If we are slow to review, either the pull request needs 
some tweaking,convincing, etc. 
or probably the reviewers could be busy. In any
case, we hope for your understanding in the process.

However If you feel that  this needs to be fastened up.
Reachout to us on our slack #pysyft channel.

Thanks for the contribution!
-->"	1	True	2017-10-24 19:45:20	2017-10-25 01:51:05	2017-10-25 01:51:05
https://github.com/OpenMined/PySyft/pull/370	[]	Update abstract_model.py	"Update abstract_model.py#### Reference Issue

can't encrypt a model without a public key or decrypt one without a private key - the interface should reflect this.


#### What does your implementation fix? 


#### Explain your changes.


#### include other comments?(if any)


<!--
Please note that we are a small team of volunteers so patience is
essential; We value all the contributions, no matter how small they are. 
If we are slow to review, either the pull request needs 
some tweaking,convincing, etc. 
or probably the reviewers could be busy. In any
case, we hope for your understanding in the process.

However If you feel that  this needs to be fastened up.
Reachout to us on our slack #pysyft channel.

Thanks for the contribution!
-->"	1	True	2017-10-24 09:00:39	2017-10-29 14:08:34	2017-10-24 15:57:17
https://github.com/OpenMined/PySyft/pull/367	[]	Implement Default multinomial Functionality for Base Tensor Type	"Implement Default multinomial Functionality for Base Tensor Type<!--
Thanks for submitting a PR. Please make sure  that you have read the contribution guidelines: https://github.com/OpenMined/Docs/blob/master/contributing/guidelines.md
-->
#### Reference Issue

<!-- Example: Fixes #334 -->


#### What does your implementation fix? 

#### Explain your changes.


#### include other comments?(if any)


<!--
Please note that we are a small team of volunteers so patience is
essential; We value all the contributions, no matter how small they are. 
If we are slow to review, either the pull request needs 
some tweaking,convincing, etc. 
or probably the reviewers could be busy. In any
case, we hope for your understanding in the process.

However If you feel that  this needs to be fastened up.
Reachout to us on our slack #pysyft channel.

Thanks for the contribution!
-->"	9	True	2017-10-23 07:02:55	2017-10-24 21:46:56	2017-10-23 18:40:23
https://github.com/OpenMined/PySyft/pull/366	[]	Naming convention on test files solved #365	"Naming convention on test files solved #365#### Reference Issue #365

Test files follow naming convention"	3	True	2017-10-22 16:49:04	2017-10-23 19:18:33	2017-10-23 17:43:17
https://github.com/OpenMined/PySyft/pull/360	[]	Fix incorrect documentation	Fix incorrect documentation	1	True	2017-10-21 15:27:33	2017-10-22 06:08:36	2017-10-22 06:08:02
https://github.com/OpenMined/PySyft/pull/344	[]	ignore capsule style errors	ignore capsule style errors	1	True	2017-10-17 01:41:46	2017-10-17 09:02:26	2017-10-17 08:54:19
https://github.com/OpenMined/PySyft/pull/337	[]	Updated LinearClassifier	Updated LinearClassifierAdded some checks to encrypt() and decrypt(), fixed notebooks to use the right capsule. Also added an abstract interface for future implementations.	1	True	2017-10-15 21:56:19	2017-10-19 08:55:34	2017-10-19 08:55:34
https://github.com/OpenMined/PySyft/pull/320	[]	Feature/paillier fixed point functionality	"Feature/paillier fixed point functionalityThis partially addresses issue #12 
This is my third solution for having a more abstract fixed-point implementation.
My previous solutions involved creating our own fixed-point data type. But that was awkward given that `phe` module has its own internal fixed-point representation. 
The next solution was to  have our own fixed-point data type, and only use ""raw"" encrypting functions of `phe`, but that seemed like a waste. Because `phe` already has alot of fixed-point functionality built-in which we had to replicate for our own data type.

The only problem with `phe`'s fixed-point implementation was that we can not control the precision through its API (It is calculated automatically).

This is the third solution that I came up with. It basically replaces some built-in functions in `phe` module (without altering the code in the module itself) to allow us to explicitly control fixed-point precision encoding. The major change in this pull request is at line 140 of `he/paillier/keys.py`."	7	True	2017-10-11 01:21:58	2017-10-23 08:16:27	2017-10-23 08:16:27
https://github.com/OpenMined/PySyft/pull/314	[]	handle slices on 1 dim tensors, resolves #311	handle slices on 1 dim tensors, resolves #311Trying new PR as I force pushed by error on #312 and couldn't push anymore. Sorry will not  force push anymore.	1	True	2017-10-10 10:13:12	2017-10-10 16:01:17	2017-10-10 16:00:57
https://github.com/OpenMined/PySyft/pull/278	[]	Git fix	"Git fix.DS_Store is a file added by some vs code extensions.

Ignoring this file so that someone doesn't accidentally add it"	1	True	2017-10-02 04:48:33	2017-10-02 12:58:54	2017-10-02 12:24:04
https://github.com/OpenMined/PySyft/pull/275	[]	Implements Default half Functionality #52	"Implements Default half Functionality #52spacing needs some fix here.ignore this. The issue was fixed. My lazy eye missed the last commit.There are more separators than required. please check that.
Or maybe less too. this is also similar to the numpy example. not sure why different lengths are used.To adhere to the docstring format in #252, it should say 
```
Parameters
----------
```
even when there are no parameters"	4	True	2017-10-01 14:32:42	2017-10-17 15:22:31	2017-10-05 15:02:18
https://github.com/OpenMined/PySyft/pull/273	[]	#252 Inline Documentation Consistency	"#252 Inline Documentation Consistency This is one of my first pull requests. So Please feel free to tell me where I am wrong; I would love to get some feedback

I followed the NumPy Style on inline documentation. http://sphinxcontrib-napoleon.readthedocs.io/en/latest/example_numpy.html

It's a bit rough around the edges but let me know if I am on the right trackn x p output tensor.Hey, @CT83 The changes look ok, However, I will leave this open so that we can hear what other folks think about it, and if they like it as well, I think we could move forward.

and you can learn the basic git workflow over [here](https://github.com/OpenMined/Docs/blob/master/tutorials/github_contribution_workflow_tutorial.md)Yes, Thank you! (Deleted my previous Reply as I figured it out myself; later)Done!"	23	True	2017-10-01 09:52:49	2017-10-04 17:13:58	2017-10-04 02:10:21
https://github.com/OpenMined/PySyft/pull/267	[]	Changed weights initialization & added stride functionality #100	"Changed weights initialization & added stride functionality #100Initialization of all weights to zero mathematically leads to either the neuron values are zero (for multi layers) or the delta would be zero.Please make the documentation consistent with #252

you can take a look at this link 
https://github.com/OpenMined/PySyft/blob/4e2aa9e34df985f4d8e0703d900eaa2558fd413a/syft/math.py#L259Runtime error!! I guess not.
We can do a simple `Error` or better `ValueError` which suits this situation.
Look into these. `RuntimeError` is definitely not the one we should be using.@AkashGutha Pytorch used Runtime error for this issue.This still hasn't resonated with the expected style of documentation.
use Parameters and Results and separators.

Take a look at this link.
https://github.com/OpenMined/PySyft/blob/4e2aa9e34df985f4d8e0703d900eaa2558fd413a/syft/math.py#L259A tuple is returned when there's no Argument, If not an int is returned.
so maybe you can change the doc to reflect that?"	18	True	2017-09-30 13:12:02	2017-10-19 15:42:11	2017-10-19 15:41:56
https://github.com/OpenMined/PySyft/pull/264	[]	BMM functionality - issue #28	"BMM functionality - issue #28issue #28 

Features looking at:
1. if any of the tensors is encrypted return NotImplemented error.
2. Unit tests to check shape returned tensor shape.
3. Unit tests to check the tensor value returned.
4. Inline documentation should take inspiration from pytorch but not copy it (which currently i did)."	5	True	2017-09-30 11:47:35	2017-10-02 04:59:03	2017-10-02 04:37:39
https://github.com/OpenMined/PySyft/pull/225	[]	syft.he.paillier ModuleNotFoundError misspelling fix.	syft.he.paillier ModuleNotFoundError misspelling fix.	1	True	2017-09-09 18:06:09	2017-09-10 11:50:03	2017-09-10 11:49:51
https://github.com/OpenMined/PySyft/pull/200	[]	change Paillier to paillier to be consistant with PEP8 and fix case-s‚Ä¶	"change Paillier to paillier to be consistant with PEP8 and fix case-s‚Ä¶‚Ä¶ensitivity bug
fixes #194"	1	True	2017-09-01 06:27:55	2017-09-30 23:03:43	2017-09-01 22:51:14
https://github.com/OpenMined/PySyft/pull/160	[]	fix-pep8-tests	"fix-pep8-testsFixes #119

We got automatic pep8 style checks now üëç"	8	True	2017-08-19 10:45:06	2017-08-20 09:47:17	2017-08-20 00:44:44
https://github.com/OpenMined/PySyft/pull/156	[]	Fixes #142	Fixes #142 #142	2	True	2017-08-18 15:15:41	2017-08-18 16:04:46	2017-08-18 16:04:46
https://github.com/OpenMined/PySyft/pull/145	[]	Add Cumprod & erros fix	Add Cumprod & erros fixI fixed few errors that @samsontmr & I discussed I also added cumulative product over axis I also noticed the test for addbm failed but since @bartimaeus12 has already noticed the last issue #142 I'll leave it to him .	1	True	2017-08-16 10:57:25	2017-08-16 14:22:22	2017-08-16 14:22:21
